                                  1-Linux网络基本配置

1.1 Linux网络配置文件

1.1.1 /etc/sysconfig/network-scripts/ifcfg-eth0

      。查看目录内容：

        -->ls /etc/sysconfig/network-scripts

      。ifcfg-eth0内容

       其中BOOTPROTO有几种选项：

       * none：表示无需启动协议

       * bootp:表示使用BOOTP

       * dhcp: 表示使用DHCP动态获取IP地址。

       。static: 表示手工设置静态IP

       注意：在RHEL 6中网卡位置为：/etc/sysconfig/network-scripts/ifcfg_eth0

             修改文件后会立即生效。

1.1.2 /etc/resolv.conf文件

    此文件是由域名解析器(resolver,一个根据主机名解析IP地址的库)使用的配置文件。

    内容: search localhost              #表示DNS搜索路径，即解析不完整名称时默认的附加名后缀，这样可以在解析名称时用
    
                                         简短的主机名而不是完全合格域名(FQDN)

          nameserver 114.114.114.114    #表示解析域名时使用该IP地址指定的主机为域名服务器，其中域名服务器按顺序解析。


1.1.3 /etc/host.conf文件

     此文件指定如何解析主机名,Linux系统通过解析器获得主机名对应的IP地址。

     multi on           #表示在/etc/hosts文件中指定的主机是否可以有多个地址，拥有多个IP地址的主机一般称为多穴主机。 
     order hosts,bind   #指定主机名查询顺序，这里规定先使用DNS服务器来解析域名，然后再查询/etc/hosts文件。
     nospoof on         #表示不允许对该服务器进行IP地址欺骗。

1.1.4 /etc/sysconfig/network文件

    此文件用来指定服务器器上的网络配置信息。

    。NETWORKING=yes   #是否配置网络

    。HOSTNAME=rhel    #计算机主机名

    。GATEWAY=192.168.0.1 #网关IP地址

1.1.5 /etc/hosts文件

    计算机启动时查询的主机名、DNS文件位置，在没有域名服务器的情况下，系统上的所有网络程序都通过查询该文件来解析对应于某个

    主机名的IP地址。
  
    127.0.0.1       localhost
    192.168.0.225   ubuntu-225

1.1.6 /etc/networks文件

    此文件定义了网络名和网络地址之间的映射关系。
    default 0.0.0.0
    loopback 127.0.0.0
    link-local 169.254.0.0
 
    sh 192.168.0.0

1.1.7 /etc/protocols文件

    此文件定义了计算机主机使用的协议，以及每一个协议的协议号等相关信息。

    协议名  协议号  协议全名        注释

    ip      0       IP              # internet protocol, pseudo protocol number
    hopopt  0       HOPOPT          # hop-by-hop options for ipv6
    icmp    1       ICMP            # internet control message protocol
    igmp    2       IGMP            # internet group management protocol
    ggp     3       GGP             # gateway-gateway protocol
    ipencap 4       IP-ENCAP        # IP encapsulated in IP (officially ``IP'')
    st      5       ST              # ST datagram mode
    tcp     6       TCP             # transmission control protocol
    cbt     7       CBT             # CBT, Tony Ballardie <A.Ballardie@cs.ucl.ac.uk>
    egp     8       EGP             # exterior gateway protocol
    igp     9       IGP             # any private interior gateway (Cisco: for IGRP)
    bbn-rcc 10      BBN-RCC-MON     # BBN RCC Monitoring
    nvp     11      NVP-II          # Network Voice Protocol
    pup     12      PUP             # PARC universal packet protocol
    argus   13      ARGUS           # ARGUS
    emcon   14      EMCON           # EMCON
    xnet    15      XNET            # Cross Net Debugger
    chaos   16      CHAOS           # Chaos
    udp     17      UDP             # user datagram protocol
    mux     18      MUX             # Multiplexing protocol
    ....................................................................................
    
1.1.8 /etc/services文件

    文件定义了Linux系统中所有的服务的名称、协议名称、服务的端口等信息。它是一个服务名和端口对应的

    数据库文件。

    tcpmux          1/tcp                           # TCP port service multiplexer
    tcpmux          1/udp                           # TCP port service multiplexer
    rje             5/tcp                           # Remote Job Entry
    rje             5/udp                           # Remote Job Entry
    echo            7/tcp
    echo            7/udp
    discard         9/tcp           sink null
    discard         9/udp           sink null
    systat          11/tcp          users
    systat          11/udp          users
    daytime         13/tcp
    daytime         13/udp
    qotd            17/tcp          quote
    qotd            17/udp          quote
    msp             18/tcp                          # message send protocol
    msp             18/udp                          # message send protocol
    chargen         19/tcp          ttytst source
    chargen         19/udp          ttytst source
    ftp-data        20/tcp
    ....................................................................................

1.2 Linux网络命令

1.2.1 traceroute

    使用traceroute命令可以显示数据包到目标主机之间的路径。此命令使用户可以追踪网络数据包的路由途径，

    预设数据包大小是60字节，用户可以另外设置。

    语法：traceroute [选项] [主机名|IP地址] [数据包大小]

                     traceroute命令选项含义
    --------------------------------------------------------------------------
    选项                                 选项含义
    --------------------------------------------------------------------------
    -d                    启用套接字级别的调试功能
    --------------------------------------------------------------------------
    -4                    使用IPv4地址
    --------------------------------------------------------------------------
    -6                    使用IPv6地址
    --------------------------------------------------------------------------、
    -F                    不要分段数据包
    --------------------------------------------------------------------------
    -g<网关>              通过指定网关的路由数据包，最多设置8个IPv4和127个IPv6
    --------------------------------------------------------------------------
    -I                    使用ICMP ECHO进行路由跟踪
    --------------------------------------------------------------------------
    -T                    使用TCP SYN进行路由跟踪
    --------------------------------------------------------------------------
    -m<最大TTL>           设置跳的最大数(最大TTL)，默认为30
    --------------------------------------------------------------------------
    -n                    不将IP地址解析成域名
    --------------------------------------------------------------------------
    -p<端口>              设置目的端口来使用
    --------------------------------------------------------------------------
    -r                    绕过正常的路由，并直接发送到连接网络上的主机
    --------------------------------------------------------------------------
    -s<来源地址>          设置本地主机送出数据包的IP地址
    --------------------------------------------------------------------------
    -t<tos>               设置检测数据包的TOS数值
    --------------------------------------------------------------------------
    -v                    详细显示命令的执行过程
    --------------------------------------------------------------------------
    -N<次数>              设置同时要尝试探测的次数，默认为16
    --------------------------------------------------------------------------
    -w<等待时间>          设置等待远程主机回应的时间
    --------------------------------------------------------------------------
    -x                    开启或关闭数据包的正确性检验
    --------------------------------------------------------------------------
    -U                    使用UDP的特定端口进行路由跟踪
    --------------------------------------------------------------------------
    -i<接口>              指定网络接口进行操作
    --------------------------------------------------------------------------

    例1：跟踪本地计算机到www.163.com网站的路径。

    -->traceroute www.163.com

       traceroute to www.163.com (121.18.238.198), 30 hops max, 60 byte packets     
       1  * * *
       2  202.106.149.209 (202.106.149.209)  14.321 ms  14.785 ms  16.036 ms
       3  61.148.16.133 (61.148.16.133)  14.945 ms  14.682 ms  14.299 ms
       4  61.148.152.217 (61.148.152.217)  16.690 ms 123.126.6.57 (123.126.6.57)  16.304 ms 61.148.152.217 (61.148.152.217)  15.343 ms
       5  124.65.56.157 (124.65.56.157)  15.801 ms  15.465 ms 61.51.112.45 (61.51.112.45)  15.181 ms
       6  123.126.0.97 (123.126.0.97)  14.808 ms  24.011 ms  24.032 ms
       7  219.158.98.210 (219.158.98.210)  24.646 ms  25.094 ms  24.771 ms
       8  61.182.178.46 (61.182.178.46)  39.386 ms  38.814 ms  37.997 ms
       9  221.194.41.122 (221.194.41.122)  34.504 ms  34.184 ms  34.551 ms
       10  * * *
       11  * * *
       12  121.18.238.198 (121.18.238.198)  38.176 ms  33.399 ms  33.241 ms

       结果可知：

       。远程主机的IP地址为：121.18.238.198

       。允许经过的路由器上限为30 (30 hops max)

       。传送测试数据包的大小为60字节(60 byte packets)

       。实际经过的路由数目为11，（12-1）

       。经过路由器的时间，在上例中每一条记录中都包含3个以ms为单位的时间，它们就是分组尝试三次经过该路由器的时间。

       。如果显示为"*"，则表示分组在指定的TTL时间内，无法将分组经过该路由器，表示该路由器目前正处于忙碌状态。

1.2.2 mii-tool

    使用mii-tool命令可以查看和设置网卡的工作模式

    语法: mii-tool[选项][接口]

                                             mii-tool命令选项含义
    ------------------------------------------------------------------------------------
            选项                            选项含义  
    ------------------------------------------------------------------------------------
             -v                        显示更详细的输出信息
    ------------------------------------------------------------------------------------
             -r                        重新启动自动协商
    ------------------------------------------------------------------------------------
             -R                        重置MII开启状态
    ------------------------------------------------------------------------------------ 
             -F                        更改网络接口协商模式
    ------------------------------------------------------------------------------------
             -w                        监测链路状体的变化
    ------------------------------------------------------------------------------------
   
    例1.2 查看网卡eth0的工作模式

    -->mii-tool eth0
       eth0:negotiated 100baseTx-FD,link ok    #网卡工作在100M全双工自适应模式下(100baseTx-FD)

    例1.3 查看网卡eth0的工作模式以及更详细的信息

    -->mii-tool -v eth0
       
      eth0: negotiated 100baseTx-FD, link ok
      product info: vendor 00:50:43, model 2 rev 3
      basic mode:   autonegotiation enabled
      basic status: autonegotiation complete, link ok
      capabilities: 100baseTx-FD 100baseTx-HD 10baseT-FD 10baseT-HD
      advertising:  100baseTx-FD 100baseTx-HD 10baseT-FD 10baseT-HD
      link partner: 100baseTx-FD 100baseTx-HD 10baseT-FD 10baseT-HD


    例1.4 设置网卡eth0工作在100M半双工模式下

    -->mii-tool -F 100BaseTx-HD eth0

    例1.5 设置网卡eth0的自适应工作莫斯

    -->mii-tool -r eth0

    -->mii-tool -v eth0

1.2.3 ifconfig

    使用ifconfig命令可以显示和配置网络接口.

    语法：ifcofnig [接口][选项][IP地址]

                        ifconfig命令选项含义
    ----------------------------------------------------------------------------------------
        选项                                  选项含义
    ----------------------------------------------------------------------------------------
         -a                            显示所有网络接口的状态
    ----------------------------------------------------------------------------------------
         add<地址>                     设置网络设备的IPv6地址
    ----------------------------------------------------------------------------------------
         del<地址>                     删除网络设备的IPv6地址
    ----------------------------------------------------------------------------------------
         mem_start<内存地址>           设置网络设备在主内存所占用的起始地址
    ----------------------------------------------------------------------------------------
         media<类型>                   设置网络设备的媒介类型
    ----------------------------------------------------------------------------------------
         metric<数目>                  指定在计算数据包的传送次数时，所要加上的数目
    ----------------------------------------------------------------------------------------
         mtu<字节>                     设置网络设备的最大传输单元(MTU)
    ----------------------------------------------------------------------------------------
         netmask<子网掩码>             设置网络设备的子网掩码
    ----------------------------------------------------------------------------------------
         up                            激活指定的网络设备
    ----------------------------------------------------------------------------------------
         down                          关闭指定的网络设备
    ----------------------------------------------------------------------------------------
         hw<类型><硬件地址>            设置这个接口的硬件地址(MAC地址)。目前支持的硬件类型包括
	                               ether(Ethernet)、ax25(AMPR AX.25)、ARCnet和netrom 
				       (AMPR NET/ROM)
    ----------------------------------------------------------------------------------------
         txqueuelen<长度>              设置设备发送队列的长度
    ----------------------------------------------------------------------------------------
         multicast                     设置接口上的多播标志
    ----------------------------------------------------------------------------------------
         tunnel<地址>                  创建IPv4与IPv6之间的隧道通信地址
    ----------------------------------------------------------------------------------------

    例1.6：配置网卡eth0的IP地址，同时激活改设备

    -->ifconfig eth0 192.168.0.2 netmask 255.255.255.0 up   #临时设置，重启失效

    例1.7：配置网卡eth0的别名设备 eth0:1的IP地址

    -->ifconfig eth0:1 up 

    例1.8 激活网卡eth0:1设备

    -->ifcofnig eth0:1 up

    例1.9 查看网卡eth0设置的配置   

    -->ifcofig eth0

    eth0      Link encap:Ethernet  HWaddr 00:0C:29:52:16:99
              inet6 addr: fe80::20c:29ff:fe52:1699/64 Scope:Link
              UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
              RX packets:62038 errors:0 dropped:0 overruns:0 frame:0
              TX packets:178 errors:0 dropped:0 overruns:0 carrier:0
              collisions:0 txqueuelen:1000
              RX bytes:18735692 (17.8 MiB)  TX bytes:24260 (23.6 KiB)


	         ifconfig eth0命令输出信息描述
     -----------------------------------------------------------------------------------------------
     输出信息                                             信息描述
     -----------------------------------------------------------------------------------------------
     Link encap:Ethernet                                  网络类型
     -----------------------------------------------------------------------------------------------
     HWaddr 00:0C:29:52:16:99                             网卡的硬件地址(MAC地址)
     -----------------------------------------------------------------------------------------------
     inet addr: 192.168.0.2                               网卡的IP地址
     ------------------------------------------------------------------------------------------------
     Bcast: 192.158.0.255                                 广播地址
     ------------------------------------------------------------------------------------------------
     Mask: 255.255.255.0                                  子网掩码
     ------------------------------------------------------------------------------------------------
     inet6 addr: fe80::20c:29ff:fe52:1699/64 Scope:Link   网卡的IPv6地址
     ------------------------------------------------------------------------------------------------
     UP BROADCAST RUNNING MULTICAST                       up代表处于启用状态
     ------------------------------------------------------------------------------------------------
     MTU:1500                                             最大传输单元，以太网中默认为1500字节
     ------------------------------------------------------------------------------------------------
     Metric:1                                             默认的路由成本
     ------------------------------------------------------------------------------------------------
     RX packets:62038 errors:0 dropped:0 overruns:0 frame:0 已经接收的数据包统计
                                                             packets:网络接口收到的数据包数量
							     errors:发生错误的次数
							     dropped: 由于系统资源限制而丢弃的数据包数量
						             overrun：由于发生堵塞，收到的数据包被丢弃的数量
							     carrier: 连接介质出现故障的次数，比如网线解除不好						  
     ------------------------------------------------------------------------------------------------
     TX packets:178 errors:0 dropped:0 overruns:0 carrier:0  已经传送的数据包统计
     ------------------------------------------------------------------------------------------------
     collisions:0                                            数据包冲突的次数
     ------------------------------------------------------------------------------------------------
     txqueuelen:1000                                         传送对列长度                                   
     ------------------------------------------------------------------------------------------------
     RX bytes:18735692 (17.8 MiB)                            已经接收的数据量
     ------------------------------------------------------------------------------------------------
     TX bytes:24260 (23.6 KiB)                               已经传送的数据量
     ------------------------------------------------------------------------------------------------

     例1.10 查看所有启用的网卡设备

     -->ifconfig


     例1.11  查看所有的网卡设备

     -->ifconfig -a

     例1.12 关闭网卡eth0:1设备

     -->ifconfig eth0:1 down 

     例1.13 更改网卡eth0的硬件MAC地址为：00:0C:29:18:2E:3D

     -->ifconfig eth0 hw ether 00:0C:29:18:2E:3D

     -->ifconfig eth0



1.2.4 ifdown 

      该命令可以关闭网络接口。

      语法：ifdown[网卡设备名]

      -->ifdown eth0

      -->ifconfig eth0
  

1.2.5 ifup

      该命令可以开启网络接口

      命令语法：ifup [网卡设备名]

      例1.15： 开启网络接口eth0

      -->ifup eth0

1.2.6 ping

     使用ping命令用来测试与目标计算机之间的联通性。执行ping命令会使用ICMP传输协议发出要求回应的信息，

      命令语法： ping [选项][目标]

                              ping命令选项含义
     -----------------------------------------------------------------------
       选项                               选项含义
     -----------------------------------------------------------------------
       -c<完成次数>             设置完成要求回应的次数
     -----------------------------------------------------------------------
       -i<间隔秒数>             在每个数据包发送之间等待的时间(秒数)。默认值
                                为在每个数据包发送之间等待一秒。
     -----------------------------------------------------------------------
       -n                       指定只输出数字，不去查询主机地址的符号名。
     -----------------------------------------------------------------------
       -s<数据包大小>           指定要发送的数据的字节数，默认值是56
     -----------------------------------------------------------------------
       -t<存活数值>             设置存活数值TTL的大小
     -----------------------------------------------------------------------
       -b                       允许执行ping广播地址
     -----------------------------------------------------------------------
       -v                       显示详细输出信息
     -----------------------------------------------------------------------
       -q                       安静输出
     -----------------------------------------------------------------------
       -r                       绕过正常的路由表，直接发送到连接接口上的主机
     -----------------------------------------------------------------------
       -W<超时>                 等待一个响应的时间，单位为妙
     -----------------------------------------------------------------------
       -w<截止日期>             指定超时，单位为秒
     ------------------------- ----------------------------------------------
       -B                       不允许ping来改变探测器的源地址
     ------------------------- ----------------------------------------------
       -L                       抑制组播数据包的回送。仅适用ping目标是一个多播
                                地址
     -------------------------------------------------------------------------
       -I<接口地址>             设置源地址为指定接口的地址
     -------------------------------------------------------------------------
       -R                       记录路由
     -------------------------------------------------------------------------

     例1.16 测试与网站www.baidu.com连通性。

     -->www.ping www.baidu.com

     PING www.a.shifen.com (61.135.169.125) 56(84) bytes of data.
    64 bytes from 61.135.169.125: icmp_seq=1 ttl=56 time=75.2 ms
    64 bytes from 61.135.169.125: icmp_seq=2 ttl=56 time=1.56 ms

    --- www.a.shifen.com ping statistics ---
    4 packets transmitted, 4 received, 0% packet loss, time 3729ms
    rtt min/avg/max/mdev = 1.529/19.996/75.249/31.900 ms


     例1.17 测试与计算机192.168.0.128的连通性，每次发送的ICMP数据包大小为128字节

     -->ping -s 128 192.168.0.88
        PING 192.168.0.88 (192.168.0.88) 128(156) bytes of data.
        136 bytes from 192.168.0.88: icmp_seq=1 ttl=128 time=1.16 ms
        136 bytes from 192.168.0.88: icmp_seq=2 ttl=128 time=1.09 ms
        136 bytes from 192.168.0.88: icmp_seq=3 ttl=128 time=1.15 ms

        --- 192.168.0.88 ping statistics ---
        3 packets transmitted, 3 received, 0% packet loss, time 2238ms
        rtt min/avg/max/mdev = 1.090/1.134/1.163/0.042 ms

     例1.18 测试与计算机192.168.0.88的连通性，发送4个ICMP数据包

     -->pinr -c 4 192.168.0.88

        PING 192.168.0.88 (192.168.0.88) 56(84) bytes of data.
        64 bytes from 192.168.0.88: icmp_seq=1 ttl=128 time=2.65 ms
        64 bytes from 192.168.0.88: icmp_seq=2 ttl=128 time=0.572 ms
        64 bytes from 192.168.0.88: icmp_seq=3 ttl=128 time=0.955 ms
        64 bytes from 192.168.0.88: icmp_seq=4 ttl=128 time=0.800 ms

        --- 192.168.0.88 ping statistics ---
        4 packets transmitted, 4 received, 0% packet loss, time 3010ms
        rtt min/avg/max/mdev = 0.572/1.245/2.653/0.824 ms


 1.2.7 netstat 

      此命令可以显示网络状态的信息，得知整个Linux系统的网络情况，比如网络联机、路由表、

      接口统计、伪装连接和组播成员。

      语法：netstat [选项][延迟]

                              netstat命令选项含义
      ----------------------------------------------------------------
         选项                        选项含义  
      ----------------------------------------------------------------
         -a           显示所有的socket
      ----------------------------------------------------------------
         -i           显示接口表
      ----------------------------------------------------------------
         -M           显示伪装的连接
      ----------------------------------------------------------------
         -n           直接使用IP地址，而不解析名称
      -----------------------------------------------------------------
         -p           显示正在使用Socket的PID和程序名称
      -----------------------------------------------------------------
         -r           显示路由表信息
      -----------------------------------------------------------------
         -s           显示网络统计信息(如SNMP)
      -----------------------------------------------------------------
         -t           显示TCP传输协议的连接状况
      -----------------------------------------------------------------
         -u           显示UDP传输协议的连接状况
      -----------------------------------------------------------------
         -o           显示计时器
      -----------------------------------------------------------------
         -g           显示组播组成员
      -----------------------------------------------------------------
         -v           显示详细信息
      -----------------------------------------------------------------
         -s           显示网络统计信息(如SNMP)
      -----------------------------------------------------------------

     例1.19 显示网络接口状态信息

     -->netstat -i

     Kernel Interface table
     Iface       MTU Met    RX-OK RX-ERR RX-DRP RX-OVR    TX-OK TX-ERR TX-DRP TX-OVR Flg
     eth0       1500   0   435283      0      0      0   194163      0      0      0 BMRU
     lo        65536   0       50      0      0      0       50      0      0      0 LRU
     virbr0     1500   0        0      0      0      0       39      0      0      0 BMRU

     例1.20 显示内核路由表信息

     -->netstat -r

     Kernel IP routing table
     Destination     Gateway         Genmask         Flags   MSS Window  irtt Iface
     sh              *               255.255.255.0   U         0 0          0 eth0
     192.168.122.0   *               255.255.255.0   U         0 0          0 virbr0
     default         192.168.0.1     0.0.0.0         UG        0 0          0 eth0

     例1.21 显示端口号为22的连接情况

     -->netstat -antu|grep 22
     
     tcp        0      0 192.168.122.1:53            0.0.0.0:*                   LISTEN
     tcp        0      0 0.0.0.0:22                  0.0.0.0:*                   LISTEN
     tcp        0     52 192.168.0.188:22            192.168.0.27:2161           ESTABLISHED
     tcp        0      0 192.168.0.188:22            192.168.0.27:2034           ESTABLISHED
     tcp        0      0 192.168.0.188:22            192.168.0.27:1681           ESTABLISHED
     tcp        0      0 :::22                       :::*                        LISTEN
     udp        0      0 192.168.122.1:53            0.0.0.0:*
     udp        0      0 :::56227                    :::*

     例1.22 检查系统上开放端口的情况
     
     -->netstat -tulnp

Active Internet connections (only servers)
Proto Recv-Q Send-Q Local Address               Foreign Address             State       PID/Program name
tcp        0      0 192.168.122.1:53            0.0.0.0:*                   LISTEN      2489/dnsmasq
tcp        0      0 0.0.0.0:22                  0.0.0.0:*                   LISTEN      2023/sshd
tcp        0      0 127.0.0.1:631               0.0.0.0:*                   LISTEN      1891/cupsd
tcp        0      0 127.0.0.1:25                0.0.0.0:*                   LISTEN      2228/master
tcp        0      0 0.0.0.0:57818               0.0.0.0:*                   LISTEN      1785/rpc.statd
tcp        0      0 0.0.0.0:5672                0.0.0.0:*                   LISTEN      2302/qpidd
tcp        0      0 127.0.0.1:6379              0.0.0.0:*                   LISTEN      10324/redis-server
tcp        0      0 0.0.0.0:111                 0.0.0.0:*                   LISTEN      1676/rpcbind
tcp        0      0 :::22                       :::*                        LISTEN      2023/sshd
tcp        0      0 ::1:631                     :::*                        LISTEN      1891/cupsd
tcp        0      0 :::35833                    :::*                        LISTEN      1785/rpc.statd
tcp        0      0 :::5989                     :::*                        LISTEN      2503/cimserver
tcp        0      0 :::5672                     :::*                        LISTEN      2302/qpidd
tcp        0      0 :::111                      :::*                        LISTEN      1676/rpcbind
udp        0      0 192.168.122.1:53            0.0.0.0:*                               2489/dnsmasq
udp        0      0 127.0.0.1:703               0.0.0.0:*                               1785/rpc.statd
udp        0      0 0.0.0.0:67                  0.0.0.0:*                               2489/dnsmasq
udp        0      0 0.0.0.0:42341               0.0.0.0:*                               1765/avahi-daemon
udp        0      0 0.0.0.0:5353                0.0.0.0:*                               1765/avahi-daemon
udp        0      0 0.0.0.0:1003                0.0.0.0:*                               1676/rpcbind
udp        0      0 0.0.0.0:111                 0.0.0.0:*                               1676/rpcbind
udp        0      0 0.0.0.0:631                 0.0.0.0:*                               1891/cupsd
udp        0      0 0.0.0.0:783                 0.0.0.0:*                               1618/portreserve
udp        0      0 0.0.0.0:47390               0.0.0.0:*                               1785/rpc.statd
udp        0      0 :::1003                     :::*                                    1676/rpcbind
udp        0      0 :::111                      :::*                                    1676/rpcbind
udp        0      0 :::56227                    :::*                                    1785/rpc.statd


协议              本地地址  端口号               目的地址                   状态         PID/程序名


1.2.8 arp

    使用arp命令可以增加、删除和显示ARP缓存条目

    语法：arp [选项] [IP地址] [MAC地址]

                             arp命令选项含义
    ---------------------------------------------------------------------
        选项                             选项含义 
    ---------------------------------------------------------------------
         -a                  显示指定主机当前所有的ARP缓存
    ---------------------------------------------------------------------
         -d                  删除指定的条目
    ---------------------------------------------------------------------
         -s                  设置一个新的ARP条目
    ---------------------------------------------------------------------
         -n                  不解析名称
    ---------------------------------------------------------------------
         -v                  显示详细信息
    ---------------------------------------------------------------------
         -i<接口>            指定网络接口
    ---------------------------------------------------------------------

     例1.23 查看系统ARP缓存信息

     -->arp 

     Address                  HWtype  HWaddress           Flags Mask            Iface
     192.168.0.27             ether   d4:3d:7e:de:ff:48   C                     eth0
     192.168.0.1              ether   48:46:fb:86:48:fa   C                     eth0

     例1.24 添加一个新的ARP条目

     -->arp -s 192.168.0

     -->arp 

     例1.25 删除一个ARP条目

     -->arp -d 192.168.0

     -->arp

 
1.2.9 rpcinfo 

    使用rpcinfo命令可以显示那些使用portmap注册的程序的信息，并向程序进行RPC调用，检查他们是否正常运行。

    命令语法：rpcinfo [选项] [主机] [RPC程序编号] [版本号]

                                 rpcinfo命令选项含义
    ---------------------------------------------------------------------------------------------------
      选项                                       选项含义
    ---------------------------------------------------------------------------------------------------
      -p       探测使用端口映射协议版本2的主机上的portmap服务并显示所有已注册的RPC程序的列表。如果不

               指定主机，默认值为本地主机
    ----------------------------------------------------------------------------------------------------
      -u       执行一个到使用UDP的指定主机上的程序号的过程0的RPC调用，并报告是否收到响应。当使用在第三条

               语法中显示的-T选项时废弃本选项。
    ----------------------------------------------------------------------------------------------------
      -l       显示在指定主机上的指定程序号和版本号的条目的列表。返回所有使用与用于联系远程portmap守护程序

               的协议在同一个协议系列的传输的条目。
    ------------------------------------------------------------------------------------------------------
      -s       显示主机上所有已注册的RPC程序的简明列表。如果没有指定主机，则默认为本地主机。
    ------------------------------------------------------------------------------------------------------
      -n<端口> 使用指定端口作为-t和-u选项的端口号来替换端口映射给出的端口号。使用-n选项来避免到远程端口映射

               查找服务地址的调用。-a选项废弃本选项。
    --------------------------------------------------------------------------------------------------------
      -t       执行一个到使用TCP的指定主机上的程序号的过程0的RPC调用，并报告是否收到响应。当使用在第三条语法

               中显示的-T选项时废弃本选项。
    --------------------------------------------------------------------------------------------------------
      -m       显示指定主机上的端口映射操作系统信息表。此表包含对每个版本的端口映射(版本2、3和4)的统计信息、
               每个过程请求和成功服务的次数、所做的远程调用请求的类型和数目和关于已处理的RPC地址查询的信息。
	       本信息用来监视在主机上的RPC活动。 
    ---------------------------------------------------------------------------------------------------------
      -d       删除指定程序号和版本好的RPC服务的注册。如果使用传输，只注销那个传输上的服务，否则注销所有注册
               的传输上的服务。本选项仅可由root用户执行。 
    ----------------------------------------------------------------------------------------------------------
      -b       将RPC广播到指定的程序号和版本号的过程0并报告响应的所有主机。如果指定传输，它仅广播它的指定传输

               上的请求。如果任何传输不支持广播则打印错误消息。由于可能对别的系统产生不利的影响，应该限制使用

	       广播。
    -----------------------------------------------------------------------------------------------------------
     例1.26 显示使用portmap注册的程序的信息
      
     -->rpcinfo   

     例1.27 显示主机192.168.0.146上已注册的RPC程序的简明列表。

     -->rpcinfo -s 192.168.0.146   #用法有误

     例1.28 显示主机192.168.0.146 上使用端口映射协议版本2的portmap服务并显示所有已注册的RPC程序的列表

     --> rpcinfo -p 192.168.0.146

      程序   版本 协议   端口
     100000    4   tcp    111  portmapper
     100000    3   tcp    111  portmapper
     100000    2   tcp    111  portmapper
     100000    4   udp    111  portmapper
     100000    3   udp    111  portmapper
     100000    2   udp    111  portmapper
     100024    1   udp  59889  status
     100024    1   tcp  55842  status

     例1.29 显示端口映射操作统计信息表

     -->rpcinfo -m       #用法有误

1.2.10  ip

    使用ip命令可以显示和操纵路由、设备、策略路由和隧道等

    命令语法：

    ip [选项][对象][命令]

                                    ip命令选项含义 
    ----------------------------------------------------------------------------------------------------
       选项                              选项含义
    ----------------------------------------------------------------------------------------------------
        -s          输出相信信息
    ----------------------------------------------------------------------------------------------------
        -f         这个选项后面接协议种类，包括inet、inet6或者link，强调使用的协议种类。如果没有足够的
	           信息告诉ip使用的协议种类，ip就会使用默认值inet或者any。link比较特殊，它表示不涉及任何
                   网络协议。		    
    ----------------------------------------------------------------------------------------------------
        -o         对每行记录都使用单行输出，回行用字符代替。如果需要使用wc、grep等工具处理ip的输出，会
	           用到这个选项。  
    ----------------------------------------------------------------------------------------------------  
 
                                           对象
    ----------------------------------------------------------------------------------------------------
       对象                                描述
    ----------------------------------------------------------------------------------------------------
       link                              网络设备
    ---------------------------------------------------------------------------------------------------
       address                           一个设备的协议（IP或者IPV6）地址
    ---------------------------------------------------------------------------------------------------	
       addrabel                          为协议地址选择标签配置
    ---------------------------------------------------------------------------------------------------	  
       neighbour                          ARP或NDISC缓冲区条目
    ---------------------------------------------------------------------------------------------------	  
       route                              路由表条目
    ---------------------------------------------------------------------------------------------------
       rule                               路由策略数据库中的规则
    ---------------------------------------------------------------------------------------------------
       maddress                           多播地址
    --------------------------------------------------------------------------------------------------- 
       mroute                             多播路由缓冲区条目
    ---------------------------------------------------------------------------------------------------
       tunnel                             基于IP的隧道
    ---------------------------------------------------------------------------------------------------
       xfrm                               IPsec协议框架
    ---------------------------------------------------------------------------------------------------

    1.ip  address

    使用ip address命令实现协议地址管理

    例1.30: 查看网卡协议地址

    -->ip address

       1: lo: <LOOPBACK,UP,LOWER_UP> mtu 16436 qdisc noqueue
          link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
           inet 127.0.0.1/8 scope host lo
       2: eth0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast qlen 1000
           link/ether 08:00:27:91:ac:82 brd ff:ff:ff:ff:ff:ff
           inet 192.168.0.241/24 brd 192.168.0.255 scope global eth0

    例1.31: 显示网卡eth0

    -->ip address show eth0

        2: eth0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast qlen 1000
           link/ether 08:00:27:91:ac:82 brd ff:ff:ff:ff:ff:ff
           inet 192.168.0.241/24 brd 192.168.0.255 scope global eth0


    例1.32: 列出网卡eth0 

    --> ip address list eth0

        2: eth0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast qlen 1000
           link/ether 08:00:27:91:ac:82 brd ff:ff:ff:ff:ff:ff
           inet 192.168.0.241/24 brd 192.168.0.255 scope global eth0

    例1.33: 在网卡eth0上增加一个IP地址192.168.0.233/24，标准广播地址，指定别名为：eth0:0

    -->ip address add 192.168.0.233/24 brd + dev eth0 label eth0:0

    -->ip address   #查看添加的地址

    1: lo: <LOOPBACK,UP,LOWER_UP> mtu 16436 qdisc noqueue
       link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
       inet 127.0.0.1/8 scope host lo
    2: eth0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast qlen 1000
       link/ether 08:00:27:91:ac:82 brd ff:ff:ff:ff:ff:ff
       inet 192.168.0.241/24 brd 192.168.0.255 scope global eth0
       inet 192.168.0.233/24 brd 192.168.0.255 scope global secondary eth0:0

    例1.34: 删除网卡eth0上的IP地址192.168.0.233/24

    -->ip address del 192.168.0.233/24 dev eth0

    例1.35: 添加静态主机路由

    -->ip address add local 192.168.1.1/24 brd + dev eth0

    -->ip address

    1: lo: <LOOPBACK,UP,LOWER_UP> mtu 16436 qdisc noqueue
       link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
       inet 127.0.0.1/8 scope host lo
    2: eth0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast qlen 1000
       link/ether 08:00:27:91:ac:82 brd ff:ff:ff:ff:ff:ff
       inet 192.168.0.241/24 brd 192.168.0.255 scope global eth0

    例1.36 添加静态主机路由

    -->ip address add local 192.168.2.1/24 brd -dev eth0

    -->ip address

    1: lo: <LOOPBACK,UP,LOWER_UP> mtu 16436 qdisc noqueue
       link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
       inet 127.0.0.1/8 scope host lo
    2: eth0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast qlen 1000
       link/ether 08:00:27:91:ac:82 brd ff:ff:ff:ff:ff:ff
       inet 192.168.0.241/24 brd 192.168.0.255 scope global eth0
       inet 192.168.1.1/24 brd 192.168.1.255 scope global eth0

    例1.37 添加静态主机路由，并配置网卡eth0的别名设备eth0:1的IP地址

    -->ip address add local 192.168.3.1/24 brd + label eth0:1 dev eth0

    --> ip address

    1: lo: <LOOPBACK,UP,LOWER_UP> mtu 16436 qdisc noqueue
       link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
       inet 127.0.0.1/8 scope host lo
    2: eth0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast qlen 1000
       link/ether 08:00:27:91:ac:82 brd ff:ff:ff:ff:ff:ff
       inet 192.168.0.241/24 brd 192.168.0.255 scope global eth0
       inet 192.168.1.1/24 brd 192.168.1.255 scope global eth0
       inet 192.168.3.1/24 brd 192.168.3.255 scope global eth0:1

    例1.38 在回环设备上添加一个回环地址
    
    -->ip address add 127.0.0.1/8 dev lo brd + scope host

    -----------------------------------------------------------------------------
    2. ip link

    使用ip link命令可以实现网络设备配置

    例1.39 列出网卡eth0的属性

    -->ip link list eth0

    2: eth0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast qlen 1000
    link/ether 08:00:27:91:ac:82 brd ff:ff:ff:ff:ff:ff


    例1.40 列出网卡eth0的属性的详细信息
    
    -->ip -s link list eth0 
   
    2: eth0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast qlen 1000
    link/ether 08:00:27:91:ac:82 brd ff:ff:ff:ff:ff:ff

    例1.41 显示网卡eth0的属性的详细信息

    -->ip -s link show eth0  #有误


    例1.41 显示网卡eth0的属性的详细信息

    -->ip -s link show eth0


     例1.42 启用网卡eth0

     -->ip link set dev eth0 up

     例1.43 停用网卡eth0
     
     -->ip link set dev eth0 down 

     例1.44 更改网络设备eth0传输对列的长度为900

     -->ip link set dev eth0 txqueuelen 900

     例1.45 更改网络设备eth0的MTU(最大传输单元)的值为1400

     -->ip link set dev eth0 mtu 1400

     例1.46 修改网络设备eth0的MAC地址为：00:0C:29:B6:D2:A4

     -->ip link set dev eth0 address 00:0C:29:B6:D2:A4

     ------------------------------------------------------------------
    3. ip route

    使用ip route命令实现路由表管理

    例1.47 显示路由表

    -->ip route
    
    192.168.0.0/24 dev eth0  proto kernel  scope link  src 192.168.0.241
    169.254.0.0/16 dev eth0  scope link
    default via 192.168.0.1 dev eth0


    例1.48 显示路由表

    --> ip route show
    192.168.0.0/24 dev eth0  proto kernel  scope link  src 192.168.0.241
    169.254.0.0/16 dev eth0  scope link
    default via 192.168.0.1 dev eth0

    例1.49 添加静态网络路由

    -->ip route add 192.168.1/24 via 192.168.0.1

    例1.50:添加静态主机路由

    -->ip route add 192.168.1.2 via 192.168.0.1

    例1.51: 更改静态网络路由

    -->ip route chg 192.168.1/24 dev eth0

    例1.52: 获取到IP地址192.168.0.200

    --> ip route get 192.168.0.200

    192.168.0.200 dev eth0  src 192.168.0.241
    cache  mtu 1500 advmss 1460 hoplimit 64

    例1.53: 计算路由缓存里面的条数

    -->ip -o route list cloned | wc

       10     130    1051

    例1.54:列出网络192.168.0.0的路由表

    -->ip route list 192.168.0/24

    192.168.0.0/24 dev eth0  proto kernel  scope link  src 192.168.0.241

    例1.55:计算使用gated/bgp协议的路由个数
    
    -->ip route list proto gated/bgp | wc

    -->0       0       0

    例1.56:  搜索目的地址是192.168.0.146,来自192.168.0.146，从eth0设备达到的路由。

    -->ip route g 192.168.0.146 from 192.168.0.146 iif eth0

    -------------------------------------------------------------------------------
    4. ip rule 

    使用ip rule命令实现路由策略数据库管理

    例：1.57：列出规则

    --> ip rule list

    0:      from all lookup 255
    32766:  from all lookup main
    32767:  from all lookup default


    5. ip neighbour

    使用ip neigh命令实现邻居/ARP表管理

    例1.58: 查看系统ARP缓存信息

    -->ip neighbour list
    
    192.168.0.27  dev eth0 lladdr d4:3d:7e:de:ff:48 DELAY
    192.168.0.242 dev eth0 lladdr 08:00:27:10:f8:21 DELAY

    例1.59： 查看IP地址192.168.0.146的系统ARP缓存信息

    -->ip -s neighbour list 192.168.0.146

    例1.60：在网卡eth0上为IP地址192.168.0.6添加一个永久ARP条目

    -->ip neighbour add 192.168.0.241 lladdr 08:00:27:91:ac:82 dev eth0 nud perm

    -->ip address

   1: lo: <LOOPBACK,UP,LOWER_UP> mtu 16436 qdisc noqueue
      link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
      inet 127.0.0.1/8 scope host lo
   2: eth0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast qlen 1000
      link/ether 08:00:27:91:ac:82 brd ff:ff:ff:ff:ff:ff
      inet 192.168.0.241/24 brd 192.168.0.255 scope global eth0

    例1.61：把IP地址192.168.0.241d ARP条目状态更改为reacheable

    -->ip neighbour chg 192.168.0.241 dev eth0 nud reachable

    -->ip address show eth0

    2: eth0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast qlen 1000
    link/ether 08:00:27:91:ac:82 brd ff:ff:ff:ff:ff:ff
    inet 192.168.0.241/24 brd 192.168.0.255 scope global eth0

    例1.62: 在网卡 eth0上删除IP地址192.168.0.241d ARP条目 
    
    -->ip neighbour del 192.168.0.241 dev eth0

1.3 使用nmap扫描网络

1.3.1  nmap简介

        nmap(Network Mapper,网络映射器)是一款网络探测和安全审核程序，通过扫描单个主机或网络

    获取计算机正在运行和提供的服务等信息。

        nmap支持的扫描技术有：UDP、TCP connect () 、TCP SYN(半开扫描)、ftp代理(bounce攻击)、

    反向标志、ICMP、FIN扫描、ACK扫描、圣诞树(Xmas Tree)、SYN扫描以及null扫描。

        nmap还能提供关于目标机的进一步信息，包括反向域名、操作系统猜测、设备类型和MAC地址。

	。查看是否安装了nmap

	-->rpm -q nmap
        package nmap is not installed  #如果没有安装，执行安装

	-->yum install nmap -y

1.3.2 使用nmap

        根据使用的功能选项，nmap可以报告远程主机特征、使用的操作系统、TCP序列、运行绑定到每个端口

    上的应用程序的用户名、DNS名以及主机地址是否是欺骗地址等。

        在nmap的所有选项中，只有目标选项时必须给出的。其最简单的形式是在命令行直接输入一个主机名或者

    一个IP地址。如果希望扫描某个IP地址的一个子网，可以在IP地址的后面加上"/掩码" 。掩码范围为0~32。使用

    "/24"扫描C类地址，“/16”扫描B类地址。

        nmap更加强大的表示方法来更加灵活第指定IP地址：比如要扫描B类网络“192.168.*.*”，可以使用下面三种

    方式来指定这些地址： "192.168.*.*"、"192.168.0-255.0-255" 或者"192.168.0.0/16"

    命令语法： nmap [扫描类型] [选项] [扫描目标说明]

        nmap可以对主机、端口、服务、版本和操作系统进行扫描。
  
	                    扫描目标说明
    -------------------------------------------------------------------------
        扫描目标                              描述
    -------------------------------------------------------------------------
      -iL<输入文件名>             从主机或网络列表中输入
    -------------------------------------------------------------------------
      -iR<主机数量>               随机选择目标
    -------------------------------------------------------------------------
      --exclude <主机>            排除主机或网络
    -------------------------------------------------------------------------
      --excludefile <排除文件>    排除文件中的列表
    -------------------------------------------------------------------------

    例1.63 扫描计算机192.168.0.146的所有TCP端口，并打开细节模式。

    --> nmap -v 192.168.0.146   #v参数表示提高输出信息的详细度
  
     Starting Nmap 4.11 ( http://www.insecure.org/nmap/ ) at 2014-12-12 17:01 CST
     Initiating ARP Ping Scan against 192.168.0.146 [1 port] at 17:01
     vThe ARP Ping Scan took 0.01s to scan 1 total hosts.
     DNS resolution of 1 IPs took 13.00s.
     Initiating SYN Stealth Scan against 192.168.0.146 [1680 ports] at 17:02
     Discovered open port 22/tcp on 192.168.0.146
     Discovered open port 80/tcp on 192.168.0.146
     Stats: 0:00:14 elapsed; 0 hosts completed (1 up), 1 undergoing SYN Stealth Scan
     SYN Stealth Scan Timing: About 40.21% done; ETC: 17:02 (0:00:01 remaining)
     Discovered open port 8009/tcp on 192.168.0.146
     Discovered open port 111/tcp on 192.168.0.146
     The SYN Stealth Scan took 1.18s to scan 1680 total ports.
     Host 192.168.0.146 appears to be up ... good.
     Interesting ports on 192.168.0.146:
     Not shown: 1676 closed ports
     PORT     STATE SERVICE
     22/tcp   open  ssh
     80/tcp   open  http
     111/tcp  open  rpcbind
     v8009/tcp open  ajp13
     MAC Address: 00:0C:29:89:D9:5A (VMware)

     Nmap finished: 1 IP address (1 host up) scanned in 14.251 seconds
               Raw packets sent: 1688 (74.270KB) | Rcvd: 1681 (77.322KB)
 
     ----------------------------------------------------------------------------

     -->nmap -v 192.168.0.138   

     Starting Nmap 4.11 ( http://www.insecure.org/nmap/ ) at 2014-12-12 17:04 CST
     Initiating ARP Ping Scan against 192.168.0.138 [1 port] at 17:04
     The ARP Ping Scan took 0.01s to scan 1 total hosts.
     DNS resolution of 1 IPs took 0.23s.
     Initiating SYN Stealth Scan against 192.168.0.138 [1680 ports] at 17:04
     Discovered open port 5520/tcp on 192.168.0.138
     Discovered open port 3389/tcp on 192.168.0.138
     Discovered open port 443/tcp on 192.168.0.138
     Discovered open port 1158/tcp on 192.168.0.138
     Discovered open port 135/tcp on 192.168.0.138
     Discovered open port 5560/tcp on 192.168.0.138
     Discovered open port 139/tcp on 192.168.0.138
     Discovered open port 1521/tcp on 192.168.0.138
     Discovered open port 1433/tcp on 192.168.0.138
     Discovered open port 445/tcp on 192.168.0.138
     The SYN Stealth Scan took 1.37s to scan 1680 total ports.
     Host 192.168.0.138 appears to be up ... good.
     Interesting ports on 192.168.0.138:
     Not shown: 1670 closed ports
     PORT     STATE SERVICE
     135/tcp  open  msrpc
     139/tcp  open  netbios-ssn
     443/tcp  open  https
     445/tcp  open  microsoft-ds
     1158/tcp open  lsnr
     1433/tcp open  ms-sql-s
     1521/tcp open  oracle
     3389/tcp open  ms-term-serv
     5520/tcp open  sdlog
     5560/tcp open  isqlplus
     MAC Address: BC:5F:F4:A1:7E:AF (Unknown)

     Nmap finished: 1 IP address (1 host up) scanned in 1.663 seconds
               Raw packets sent: 1717 (75.546KB) | Rcvd: 1681 (77.322KB)



     例1.64  发起对计算机192.168.0.147的秘密SYN扫描，同时还探测操作系统类型
     
     -->nmap -sS -O 192.168.0.147
         
        Starting Nmap 4.11 ( http://www.insecure.org/nmap/ ) at 2014-12-12 17:08 CST
        Interesting ports on 192.168.0.147:
        Not shown: 1672 closed ports
        PORT     STATE SERVICE
        80/tcp   open  http
        135/tcp  open  msrpc
        139/tcp  open  netbios-ssn
        445/tcp  open  microsoft-ds
        1158/tcp open  lsnr
        1521/tcp open  oracle
        3389/tcp open  ms-term-serv
        5520/tcp open  sdlog
        MAC Address: 00:0C:29:19:C8:0F (VMware)
        No exact OS matches for host (If you know what OS is running on it, see http://www.insecure.org/cgi-bin/nmap-submit.cgi).
        TCP/IP fingerprint:
        SInfo(V=4.11%P=x86_64-redhat-linux-gnu%D=12/12%Tm=548AB08B%O=80%C=1%M=000C29)
        TSeq(Class=TR%IPID=I%TS=100HZ)
        T1(Resp=Y%DF=Y%W=2000%ACK=S++%Flags=AS%Ops=MNWNNT)
        T2(Resp=Y%DF=Y%W=0%ACK=S%Flags=AR%Ops=)
        T3(Resp=Y%DF=Y%W=0%ACK=O%Flags=AR%Ops=)
        T4(Resp=Y%DF=Y%W=0%ACK=O%Flags=R%Ops=)
        T5(Resp=Y%DF=Y%W=0%ACK=S++%Flags=AR%Ops=)
        T6(Resp=Y%DF=Y%W=0%ACK=O%Flags=R%Ops=)
        T7(Resp=Y%DF=Y%W=0%ACK=S++%Flags=AR%Ops=)
        PU(Resp=Y%DF=N%TOS=0%IPLEN=164%RIPTL=148%RID=E%RIPCK=E%UCK=E%ULEN=134%DAT=E)

        Uptime 2.224 days (since Wed Dec 10 11:46:10 2014)

        Nmap finished: 1 IP address (1 host up) scanned in 21.629 seconds


     例1.65 发起对www.163.com所在网络的所有255个地址的秘密SYN扫描，同时还探测每台主机操作系统的类型
     
     -->nmap -sS -O 163.com/24

Starting Nmap 4.11 ( http://www.insecure.org/nmap/ ) at 2014-12-12 17:19 CST
Warning: Hostname 163.com resolves to 2 IPs. Using 123.58.180.8.
Stats: 0:00:19 elapsed; 0 hosts completed (0 up), 0 undergoing Host Discovery
System DNS resolution Timing: About 63.29% done; ETC: 17:19 (0:00:03 remaining)
Warning:  OS detection will be MUCH less reliable because we did not find at least 1 open and 1 closed TCP port
Interesting ports on 123.58.180.1:
Not shown: 1665 closed ports
PORT     STATE    SERVICE
135/tcp  filtered msrpc
136/tcp  filtered profile
137/tcp  filtered netbios-ns
138/tcp  filtered netbios-dgm
139/tcp  filtered netbios-ssn
445/tcp  filtered microsoft-ds
593/tcp  filtered http-rpc-epmap
901/tcp  filtered samba-swat
1068/tcp filtered instl_bootc
3128/tcp filtered squid-http
3333/tcp filtered dec-notes
4444/tcp filtered krb524
5800/tcp filtered vnc-http
5900/tcp filtered vnc
6667/tcp filtered irc
Too many fingerprints match this host to give specific OS details

Warning:  OS detection will be MUCH less reliable because we did not find at least 1 open and 1 closed TCP port
All 1680 scanned ports on 123.58.180.2 are closed (1653) or filtered (27)
Device type: general purpose|media device
Running: Apple Mac OS 8.X, Compaq Tru64 UNIX 5.X, Linux 2.4.X|2.5.X|2.6.X, Microsoft Windows Longhorn, Microsoft Windows, Pace embedded
Too many fingerprints match this host to give specific OS details

Interesting ports on 123.58.180.3:
Not shown: 1661 closed ports
PORT     STATE    SERVICE
80/tcp   open     http
111/tcp  open     rpcbind
135/tcp  filtered msrpc
136/tcp  filtered profile
137/tcp  filtered netbios-ns
138/tcp  filtered netbios-dgm
139/tcp  filtered netbios-ssn
445/tcp  filtered microsoft-ds
593/tcp  filtered http-rpc-epmap
901/tcp  filtered samba-swat
1068/tcp filtered instl_bootc
3128/tcp filtered squid-http
3333/tcp filtered dec-notes
4444/tcp filtered krb524
5800/tcp filtered vnc-http
5900/tcp filtered vnc
6667/tcp filtered irc
8009/tcp open     ajp13
8080/tcp open     http-proxy
No exact OS matches for host (If you know what OS is running on it, see http://www.insecure.org/cgi-bin/nmap-submit.cgi).
TCP/IP fingerprint:
SInfo(V=4.11%P=x86_64-redhat-linux-gnu%D=12/12%Tm=548AB3D2%O=80%C=1)
TSeq(Class=TR%IPID=Z)
T1(Resp=Y%DF=Y%W=16A0%ACK=S++%Flags=AS%Ops=MNNTNW)
T2(Resp=N)
T3(Resp=Y%DF=Y%W=0%ACK=O%Flags=AR%Ops=)
T4(Resp=N)
T5(Resp=Y%DF=Y%W=0%ACK=S++%Flags=AR%Ops=)
T6(Resp=N)
T7(Resp=N)
PU(Resp=Y%DF=N%TOS=0%IPLEN=164%RIPTL=148%RID=E%RIPCK=E%UCK=E%ULEN=134%DAT=E)






     
     例1.66 对计算机192.168.0.146发起圣诞树扫描，确定这台主机是否打开了22、53、110、143和4564端口。

     -->[root@redhat58-242 drbd0]# nmap -sX -p 22,53,110,143,4564 192.168.0.146

     Starting Nmap 4.11 ( http://www.insecure.org/nmap/ ) at 2014-12-12 17:22 CST
     Interesting ports on 192.168.0.146:
     PORT     STATE         SERVICE
     22/tcp   open|filtered ssh
     53/tcp   closed        domain
     110/tcp  closed        pop3
     143/tcp  closed        imap
     4564/tcp closed        unknown
     MAC Address: 00:0C:29:89:D9:5A (VMware)

     Nmap finished: 1 IP address (1 host up) scanned in 11.466 seconds

     例1.67: 对IP地址从192.168.0.1到192.168.0.12发起圣诞树扫描，确定这些系统是否打开了21、80和1433端口。

     -->nmap -sX -p 21,80,1433 192.168.0.1-12

    Starting Nmap 4.11 ( http://www.insecure.org/nmap/ ) at 2014-12-12 17:24 CST
    Interesting ports on 192.168.0.1:
    PORT     STATE         SERVICE
    21/tcp   closed        ftp
    80/tcp   open|filtered http
    1433/tcp closed        ms-sql-s
    MAC Address: 48:46:FB:86:48:FA (Unknown)

    ........



   Interesting ports on 192.168.0.7:
   PORT     STATE         SERVICE
   21/tcp   closed        ftp
   80/tcp   open|filtered http
   1433/tcp closed        ms-sql-s
   MAC Address: 2C:41:38:84:FD:FF (Unknown)

   Nmap finished: 12 IP addresses (7 hosts up) scanned in 14.497 seconds


     例1.68: 随机选择100台主机扫描是否运行Web服务器(80)端口，兵器禁止对主机列表

     -->nmap -v -iR 100 -P0 -p 80

     Starting Nmap 4.11 ( http://www.insecure.org/nmap/ ) at 2014-12-12 17:28 CST
     DNS resolution of 100 IPs took 13.57s.
     Initiating SYN Stealth Scan against 100 hosts [1 port/host] at 17:28
     The SYN Stealth Scan took 32.56s to scan 100 total ports.
     Host 88.151.201.72 appears to be up ... good.
     Interesting ports on 88.151.201.72:
     PORT   STATE    SERVICE
     80/tcp filtered http

     Host c-73-0-232-2.hsd1.fl.comcast.net (73.0.232.2) appears to be up ... good.
     Interesting ports on c-73-0-232-2.hsd1.fl.comcast.net (73.0.232.2):
     PORT   STATE    SERVICE
     80/tcp filtered http

     Host 220.226.127.248 appears to be up ... good.
     Interesting ports on 220.226.127.248:
     PORT   STATE    SERVICE
     80/tcp filtered http
 
      .......

     例1.69: 只扫描指定的IP范围：寻找192.168.0.3~192.168.0.5主机的Web服务器

     -->nmap -v --randomize_hosts -p 80 192.168.0.3-5


     例1.70: 显示主机接口和路由

     -->nmap -iflist
        
        Starting Nmap 4.11 ( http://www.insecure.org/nmap/ ) at 2014-12-12 17:37 CST
        ************************INTERFACES************************
        DEV  (SHORT) IP/MASK          TYPE     UP MAC
        lo   (lo)    127.0.0.1/8      loopback up
        eth0 (eth0)  192.168.0.242/24 ethernet up 08:00:27:10:F8:21

        **************************ROUTES**************************
        DST/MASK      DEV  GATEWAY
        192.168.0.0/0 eth0
        169.254.0.0/0 eth0
        0.0.0.0/0     eth0 192.168.0.1

1.4 捕获网络数据包

1.4.1 tcpdump 

      tcpdump是Linux系统中强大的网络数据采集分析工具之一，可以将网络中传送的数据包的头完全

    截获下来提供分析。它支持针对网络层、协议、主机、网络或端口的过滤，并提供and、or、not等逻辑

    语句来筛选信息。它具有强大的功能，领货单截去策略，成为每个高级系统管理员分析网络、排查问题等

    必备的工具之一。

    命令语法：

    tcpdump [选项] [表达式]

    例1.71：捕获第一个网络接口上所有流过的数据包

    -->tcpdump    #执行命令后会不停显示数据包信息，按Ctrl+C终止。

tcpdump: verbose output suppressed, use -v or -vv for full protocol decode
listening on eth0, link-type EN10MB (Ethernet), capture size 96 bytes
17:54:12.462455 IP redhat58-241.ssh > 192.168.0.27.53383: P 3346616741:3346616857(116) ack 690925182 win 41520 <nop,nop,timestamp 260051635 37796913>
17:54:12.500546 IP redhat58-241.ssh > 192.168.0.27.53383: P 116:232(116) ack 1 win 41520 <nop,nop,timestamp 260051636 37796913>
17:54:12.462903 IP 192.168.0.27.53383 > redhat58-241.ssh: . ack 116 win 65160 <nop,nop,timestamp 37796919 260051584>
17:54:12.463630 IP redhat58-241.48922 > public1.114dns.com.domain:  26800+ PTR? 27.0.168.192.in-addr.arpa. (43)
17:54:12.489500 arp who-has 192.168.0.58 tell 192.168.0.87
17:54:12.499531 IP public1.114dns.com.domain > redhat58-241.48922:  26800 NXDomain* 0/1/0 (99)
17:54:12.500379 IP redhat58-241.ssh > 192.168.0.27.53383: P 232:428(196) ack 1 win 41520 <nop,nop,timestamp 260051674 37796919>
17:54:12.500738 IP redhat58-241.ssh > 192.168.0.27.53383: P 428:608(180) ack 1 win 41520 <nop,nop,timestamp 260051675 37796919>
17:54:12.500825 IP redhat58-241.ssh > 192.168.0.27.53383: P 608:772(164) ack 1 win 41520 <nop,nop,timestamp 260051675 37796919>
17:54:12.500889 IP redhat58-241.33715 > public1.114dns.com.domain:  11790+ PTR? 114.114.114.114.in-addr.arpa. (46)
17:54:12.501132 IP 192.168.0.27.53383 > redhat58-241.ssh: . ack 428 win 64848 <nop,nop,timestamp 37796922 260051636>
17:54:12.501442 IP 192.168.0.27.53383 > redhat58-241.ssh: . ack 772 win 64504 <nop,nop,timestamp 37796922 260051675>
17:54:12.540139 IP public1.114dns.com.domain > redhat58-241.33715:  11790 1/0/0 (78)
17:54:12.540502 IP redhat58-241.ssh > 192.168.0.27.53383: P 772:936(164) ack 1 win 41520 <nop,nop,timestamp 260051715 37796922>
17:54:12.540733 IP redhat58-241.33928 > public1.114dns.com.domain:  42860+ PTR? 58.0.168.192.in-addr.arpa. (43)
17:54:12.568948 IP public1.114dns.com.domain > redhat58-241.33928:  42860 NXDomain* 0/1/0 (99)
17:54:12.569864 IP redhat58-241.52168 > public1.114dns.com.domain:  2301+ PTR? 87.0.168.192.in-addr.arpa. (43)
17:54:12.580558 IP6 fe80::1407:32b:edab:aec3.60120 > ff02::1:3.hostmon: UDP, length 33
17:54:12.581396 IP 192.168.0.130.63654 > 224.0.0.252.hostmon: UDP, length 33

19 packets captured
38 packets received by filter
0 packets dropped by kernel

      如果不指定网卡，默认tcpdump只会监视第一个网络接口，一般是eth0

    例1.72：指定监听一个数据包，达到指定数量后自动停止抓包

    -->tcpdump -c 1

      tcpdump: verbose output suppressed, use -v or -vv for full protocol decode
      listening on eth0, link-type EN10MB (Ethernet), capture size 96 bytes
      18:28:20.806122 IP redhat58-241.ssh > 192.168.0.27.53383: P 3346629421:3346629537(116) ack 690928786 win 44288 <nop,nop,timestamp 262100291 38001755>
      1 packets captured
      96 packets received by filter
      0 packets dropped by kernel
                                  
    例1.73: 将捕获到的数据包写入/root/dumpfile文件中保存

    -->tcpdump -w /root/dumpfile

    -->Ctrl +C 结束写入

    -->strings  /root/dumpfile   #查看捕获的二进制文件  

    例1.74  捕获经过网络接口eth0的数据包

    -->tcpdump -i eth0
tcpdump: verbose output suppressed, use -v or -vv for full protocol decode
listening on eth0, link-type EN10MB (Ethernet), capture size 96 bytes


18:40:00.610136 IP redhat58-241.ssh > 192.168.0.27.53383: P 3346953749:3346953865(116) ack 690958294 win 44288 <nop,nop,timestamp 262800202 38071741>
18:40:20.609425 IP redhat58-241.ssh > 192.168.0.27.53383: P 116:232(116) ack 1 win 44288 <nop,nop,timestamp 262800202 38071741>
18:40:00.610546 arp who-has 192.168.0.1 tell redhat58-241
18:40:00.610686 IP 192.168.0.27.53383 > redhat58-241.ssh: . ack 116 win 63956 <nop,nop,timestamp 38071742 262800192>
18:40:00.611569 arp reply 192.168.0.1 is-at 94:de:80:87:eb:ce (oui Unknown)
18:40:00.611577 IP redhat58-241.41081 > 114.114.114.114.domain:  18672+ PTR? 27.0.168.192.in-addr.arpa. (43)
18:40:00.611599 arp reply 192.168.0.1 is-at 48:46:fb:86:48:fa (oui Unknown)
18:40:00.687696 IP 192.168.0.81.elatelink > 234.34.23.234.33674: UDP, length 20
18:40:00.832567 IP 192.168.0.27.53383 > redhat58-241.ssh: . ack 232 win 63840 <nop,nop,timestamp 38071765 262800202>
18:40:01.403734 IP6 fe80::f6ce:46ff:fe42:56bc.dhcpv6-client > ff02::1:2.dhcpv6-server: dhcp6 solicit
18:40:01.666226 arp reply 192.168.0.3 is-at c8:3a:35:5e:d4:db (oui Unknown)

11 packets captured
667 packets received by filter
476 packets dropped by kernel



    例1.75  捕获主机rhel收到和发出的所有数据包   #rhel为主机名

    -->tcpdump host redhat58-241


    例1.76 捕获主机192.168.0.146收到和发出的所有数据包

    -->tcpdump host 192.168.0.146


    例1.77 捕获主机192.168.0.146发送的所有数据包

    -->tcpdump ip src 192.168.0.146

    例1.78 捕获所有发送到IP地址为192.168.0.138的所有数据包

    -->tcpdump ip dst 192.168.0.138

    例1.79 捕获主机redhat58-241、redhat58-242或yhq-PC之间的流量

    -->tcpdump host redhat58-241 and \( redhat58-242 or yhq-PC \)

    例1.80 捕获主机192.168.0.27和192.168.0.241或192.168.0.242之间的通信

    -->tcpdump host 192.168.0.27 and \(192.168.0.241 or 192.168.0.242 \)

    例1.81 捕获主机redhat58-241与主机linux之外的任何主机之间的所有IP数据包

    -->tcpdump ip host redhat58-241 and not  redhat58-242

    例1.82 捕获主机192.168.0.241和主机192.168.0.242之外的所有主机通信的IP数据包

    -->tcpdump ip host 192.168.0.241 and ! 192.168.0.242

    例1.8.3 捕获主机redhat58-241发送的经过网络接口eth0的所有数据包

    -->tcpdump -i eth0 src host rhel 


    例1.8.4 捕获所有发送到主机redhat58-241的经过网络接口 eth0的所有数据包

    -->tcpdump -i eth0 dst host redhat58-241

    例1.8.5 捕获本机UDP协议123端口的数据包

    -->tcpdump udp port 123

    例1.8.6 捕获本地主机与网络主机地址www.baidu.com的主机之间的所有数据包（网络地址在
    
             /etc/networks文件中定义）
    
    -->tcpdump net www.baidu.com

    例1.8.7 捕获涉及非本地主机的每个TCP对话的开始和结束包(SYN和FIN包)

    -->tcpdump 'tcp[tcpflags] & (tcp-syn|tcp-fin) !=0 and not src and dst net localnet'

    例1.8.8 显示不是通过以太网广播或多播信息报发送的IP广播或多播数据包

    -->tcpdump 'ether[0] & 1 =0 and ip [16] > = 224'

    例1.8.9  显示除echo request或echo reply类型以外的ICMP包

    -->tcpdump  'icmp[icmptype] !=icmp-echo and icmp [icmptype] !=icmp-echoreply'

       icmp-echoreply'
       tcpdump: verbose output suppressed, use -v or -vv for full protocol decode
       listening on eth0, link-type EN10MB (Ethernet), capture size 96 bytes

       0 packets captured
       1 packets received by filter
       0 packets dropped by kernel

    例1.9.0  捕获网络192.168.0.0/24发送的所有数据包

    -->tcpdump src net  192.168.0.0/24


tcpdump: verbose output suppressed, use -v or -vv for full protocol decode
listening on eth0, link-type EN10MB (Ethernet), capture size 96 bytes

19:08:08.393784 IP redhat58-242.ssh > 192.168.0.27.58340: P 1006949468:1006949584(116) ack 3027132338 win 37368 <nop,nop,timestamp 264678190 38240546>
19:08:28.543572 IP redhat58-242.ssh > 192.168.0.27.58340: P 116:232(116) ack 1 win 37368 <nop,nop,timestamp 264678191 38240546>
19:08:08.394622 IP 192.168.0.27.58340 > redhat58-242.ssh: . ack 116 win 64024 <nop,nop,timestamp 38240551 264678141>
19:08:08.465344 arp reply 192.168.0.3 is-at c8:3a:35:5e:d4:db (oui Unknown)
19:08:08.542705 arp who-has redhat58-242 tell redhat58-241
19:08:08.542793 arp reply redhat58-242 is-at 08:00:27:10:f8:21 (oui Unknown)
19:08:08.546203 arp who-has 192.168.0.1 tell redhat58-242
19:08:08.547275 arp reply 192.168.0.1 is-at 94:de:80:87:eb:ce (oui Unknown)

19:08:08.547327 IP redhat58-242.53500 > 114.114.114.114.domain:  9834+ PTR? 27.0.168.192.in-addr.arpa. (43)

9 packets captured
369 packets received by filter
150 packets dropped by kernel

    例1.9.1   捕获所有发送到网卡MAC地址的数据包

    -->tcpdump ether dst  D4-3D-7E-DE-FF-48    #注意此处的MAC地址必须为linux的

    例1.9.2  捕获ARP协议数据包

    -->tcpdump -p arp 

    例1.9.3  捕获UDP协议、端口号为53的数据包

    -->tcpdump -p udp port 53

tcpdump -p udp port 53
tcpdump: verbose output suppressed, use -v or -vv for full protocol decode
listening on eth0, link-type EN10MB (Ethernet), capture size 96 bytes

19:15:13.298291 IP redhat58-242.58252 > 114.114.114.114.domain:  33357+ PTR? 239.0.168.192.in-addr.arpa. (44)
19:15:13.300393 IP redhat58-241.51526 > 114.114.114.114.domain:  56326+ PTR? 114.114.114.114.in-addr.arpa. (46)
19:15:13.326474 IP 114.114.114.114.domain > redhat58-242.58252:  33357 NXDomain* 0/1/0 (100)
19:15:17.407652 IP redhat58-242.51718 > 114.114.114.114.domain:  1885+ PTR? 240.0.168.192.in-addr.arpa. (44)
19:15:17.436066 IP 114.114.114.114.domain > redhat58-242.51718:  1885 NXDomain* 0/1/0 (100)
19:15:18.298431 IP redhat58-241.37012 > 8.8.8.8.domain:  56326+ PTR? 114.114.114.114.in-addr.arpa. (46)
19:15:19.411004 IP redhat58-242.47378 > 114.114.114.114.domain:  53066+ PTR? 144.0.168.192.in-addr.arpa. (44)
19:15:19.436539 IP 114.114.114.114.domain > redhat58-242.47378:  53066 NXDomain* 0/1/0 (100)
19:15:22.727796 IP redhat58-242.45903 > 114.114.114.114.domain:  29563+ PTR? 9.0.168.192.in-addr.arpa. (42)
19:15:22.756344 IP 114.114.114.114.domain > redhat58-242.45903:  29563 NXDomain* 0/1/0 (98)
19:15:23.297214 IP redhat58-241.51526 > 114.114.114.114.domain:  56326+ PTR? 114.114.114.114.in-addr.arpa. (46)
19:15:23.735424 IP redhat58-242.52878 > 114.114.114.114.domain:  30899+ PTR? 243.0.168.192.in-addr.arpa. (44)
19:15:23.765891 IP 114.114.114.114.domain > redhat58-242.52878:  30899 NXDomain* 0/1/0 (100)
19:15:23.845232 IP redhat58-242.43431 > 114.114.114.114.domain:  10035+ PTR? 244.0.168.192.in-addr.arpa. (44)
19:15:23.875860 IP 114.114.114.114.domain > redhat58-242.43431:  10035 NXDomain* 0/1/0 (100)
19:15:27.041247 IP redhat58-242.58215 > 114.114.114.114.domain:  37640+ PTR? 108.0.168.192.in-addr.arpa. (44)
19:15:27.066081 IP 114.114.114.114.domain > redhat58-242.58215:  37640 NXDomain* 0/1/0 (100)
19:15:28.297205 IP redhat58-241.37012 > 8.8.8.8.domain:  56326+ PTR? 114.114.114.114.in-addr.arpa. (46)
19:15:33.297609 IP redhat58-241.37024 > 114.114.114.114.domain:  10479+ PTR? 8.8.8.8.in-addr.arpa. (38)
19:15:38.296710 IP redhat58-241.40751 > 8.8.8.8.domain:  10479+ PTR? 8.8.8.8.in-addr.arpa. (38)
19:15:43.296932 IP redhat58-241.37024 > 114.114.114.114.domain:  10479+ PTR? 8.8.8.8.in-addr.arpa. (38)


1.4.2 Wireshark

      Wireshark是一个网络数据包分析软件，它的主要功能是捕获网络数据包，并显示详细的网络数据包，为用户提供关于网络和

      上层协议的各种信息。

      通过使用Wireshark可以实现以下目的。

      。检测网络问题

      。检查信息安全问题

      。为新的通信协议除错

      。学习网络协议的相关知识

      1.安装Wireshark

      在Linux系统中查看libsmi、wireshark和wireshark-gnom软件包是否已经安装，如果没有执行安装：

      -->rpm -q libsmi

      -->rpm -q wireshark

      -->rpm -q wireshark-gnom


      安装：

      -->yum install libsmi wireshark  wireshark-gnom  wireshark-gnome  -y


      2.捕获数据包

      图形界面操作：

      -->应用程序-->Internet-->Wireshark Network Analyzer

      。终端打开方法(图形界面)：

      -->wireshark

      -->菜单栏“Capture”-->Interfaces-->Wireshark

      -->选择eth0右侧对应的“Start”按钮启动，开始捕获数据包

      3.保存捕获的数据包

      -->菜单栏“Capture”-->Interfaces-->Wireshark-->Stop--->关闭

      -->菜单栏单击"File"-->Save-->名称：fenxi1 ------------>保存

                                   保存于文件夹：/root/

      打开保存的文件

      -->strings /root/fenxi1


      4.导出捕获的数据包

      -->菜单栏“File”-->Export-->as "Plain Text file ..."    #导出为txt文件

                                 as "CSV" (Comma Separated Values packet summary) file....   #导出为.csv文件

				 as "C Arrays" (packet bytes) file..      #导出为.c文件

				 as XML - "PSML" (packet summary) file..  #导出为xml (PSML)文件

				 as XML -"PDML" (packet details) file...  #导出为xml (PDML)文件


      5.设置Wireshark选项
      
      -->菜单栏"Capture"-->Options-->进行相关设置,设置完毕单击"Start"按钮开始捕获数据包

      6.过滤数据包

      -->菜单栏"Capture"-->"Capture Files"-->设置过滤内容，比如只捕获192.168.0.146数据，然后单击"确定"。

      7.启用或禁用协议

      -->菜单栏”Analyze“ -->"Enabled Protocols"-->选择要禁用的协议掐面的勾-->应用-->确定



1.5 TCP Wrappers

1.5.1 TCP Wrappers简介

        TCP Wrappers保护机制用来通过定义哪些主机允许或不允许连接到网络服务。TCP Wrappers为多种不同的服务提供访问

    把关的功能，大多数网络服务系统"如SSH、Telnet和FTP等"都利用TCP Wrappers在外来进入系统的请求和被请求的服务器之间

    设立防范。

        当一个客户端试图与一个网络服务进行连接时，首先会检查主机的访问文件/etc/hosts.allow和/etc/hosts.deny，然后来

    决定这个客户端是否被允许连接到这个服务。如果一个客户端被允许进行连接，TCP Wrappers会释放它对所请求服务的连接控制

    权，然后将不再在这个客户与服务器间的通信过程中起作用。除了可以控制访问和记录日志信息外，TCP Wrappers还可以在允许

    或拒绝到网络服务的连接请求之前来执行相关的命令与客户进行交流。

        TCP Wrappers拥有以下其它网络控制技术所不具备的优势：

	。对客户端和网络的透明性。连接的客户端和网络feudal都不需要知道TCP Wrappers在使用中合法用户会被记录到日志中，并

	  获得所需要的服务，而非法用户则无法获得要求的服务。

	。中央化管理多项协议：TCP Wrappers独立运行与它们所保护的网络服务，这就允许多个服务器应用程序共享一组通用的访问控制

	  配置文件，从而简化了管理任务。

	  。查看是否安装如下包：

	  -->rpm -qa |grep tcp_wrappers

             tcp_wrappers-7.6-40.7.el5   #TCP_Wrappers安全工具
             tcp_wrappers-7.6-40.7.el5   

	  。安装

	  -->yum install tcp_wrappers-* -y

	  (yum install tcp_wrappers  tcp_wrappers-devel tcp_wrappers-libs -y)


1.5.2 配置TCP Wrappers

      要实现TCP Wrappers，通过/etc/hosts.allow和/etc/hosts.deny文件来实现，/etc/hosts.allow文件用来定义允许的访问，而/etc/hosts.deny

      文件用来定义拒绝的访问。两个文件的格式是完全相同的。在两个文件中添加规则来指定是否允许访问网络服务，空行或以'#'开始的行会被忽略。

      每条规则使用以下规则来对网络服务的访问进行控制。

            服务列表： 客户端列表：选项

      1.服务列表

          一个由逗号分隔的服务名列表，在/usr/sbin目录中的程序，或ALL(EXCEPT)通配符，服务列表也接收运算符。ALL代表所有的服务程序，也可以

      指定特定的服务，如:in.tftpd代表TFTP服务器程序，vsftpd代表vsftpd服务器程序。


      2.客户端列表

          一个逗号分隔的主机名、主机IP地址、特殊模式或通配符列表，该列表用来识别这项规则影响的主机，客户端列表也接受运算符。

	                                通配符
       ----------------------------------------------------------------------------------------
           通配符                                    描述
       ----------------------------------------------------------------------------------------
           ALL                          代表所有的客户端地址

	   LOCAL                        代表本机地址

	   UNKNOWN                      代表可解析的域名

	   KNOWN                        代表不可解析的域名
	
	----------------------------------------------------------------------------------------

                                        客户端
        -----------------------------------------------------------------------------------------
	    举例                                         描述
	-----------------------------------------------------------------------------------------
	  .sh.com                        sh.com域内的任何主机

	  linux.sh.com                   主机域名linux.sh.com

	  linux                          主机名linux

	  192.168.0.5                    主机192.168.0.5

	  192.168.0.0、255.255.255.0     192.168.0.0 网络内的任何主机

	  192.168.0.                     192.168.0.0 网络内的任何主机

	  fe80:20c:29ff:fefa::/64        fe80:20c:29ff:fefa::网络内任何主机

	  @mynetwork                     网络组名mynetwork内的主机
	  -------------------------------------------------------------------------------------------

	  注意：TCP Wrappers的掩码只支持长格式，比如：192.168.0.0/255.255.255.0,而不能使用192.168.0.0/24


      3.选项

          这个选项被触发时要运行一个动作选项或由冒号分隔开动作列表。选项字段支持扩展式，发布Shell命令，允许或

      拒绝访问以及修改日志记录。


                            扩展是命令列表
          -------------------------------------------------------------------------------------
	     命令                                         描述
	  -------------------------------------------------------------------------------------
	      %a                    客户端主机IP地址
	  -------------------------------------------------------------------------------------
	      %A                    服务器主机IP地址
	  ------------------------------------------------------------------------------------
	      %c                    客户端信息，如用户名或主机名，或用户名和IP地址
	  ------------------------------------------------------------------------------------
	      %d                    守护进程名称
	  ------------------------------------------------------------------------------------
	      %h                     客户端主机名或IP地址（如果主机名不可用）
          ------------------------------------------------------------------------------------
              %H                     服务器主机名或IP地址（如果主机名不可用）
	  ------------------------------------------------------------------------------------
	      %n                     客户端主机名(或unknown、paranoid)
          ------------------------------------------------------------------------------------
	      %N                     服务器主机名(或unknown、paranoid)
          ------------------------------------------------------------------------------------
	      %p                     守护进行PID
	  -----------------------------------------------------------------------------------
              %s                     服务器信息，如守护进程的进程和服务器的主机名或IP地址
	  -------------------------------------------------------------------------------------
	      %u                     客户端用户名(或unknown)
  	  -------------------------------------------------------------------------------------
	      %%                     扩展为一个”%“字符
  	  -------------------------------------------------------------------------------------	    

          实例：

	  (1) /etc/hosts.allow文件

	      ALL:ALL

	      ALL:192.168.0

	      ALL:LOCAL @NETGROUP

	      in.tftpd: LOCAL,.sh.com

	   (2)/etc/hosts.deny文件

	      ALL:ALL

	      ALL:192.168.0.5

	      vsftpd: .sh.com

	      ALL:linux.sh.com,.bj.com


1.5.3 EXCEPT

          访问控制规则接收EXCEPT，可以用在一个规则的服务列表中，也可以用在客户端列表中。EXCEPT允许特定的例外以用来在

      同一个规则中拓宽匹配的范围。

           从组织结构上来说，避免使用EXCEPT更简易一些。因为这样可以让其它的系统管理员能很快地扫描相关的文件，以便查看

      哪些主机或被拒绝访问服务，而无需通过EXCEPT来进行排序。

      例1.94 修改/etc/hosts.allow文件，除主机linux.sh.com之外，允许所有sh.com域的主机连接所有的服务。

          -->vim /etc/hosts.allow

	  ALL: .sh.com EXCEPT linux.com 

      例1.95 修改/etc/hosts.allow ，来自192.168.0.0网络的所有主机都可以使用除FTP之外的所有服务。

          -->ALL EXCEPT vsftpd: 192.168.0


1.6 ADSL连接

1.6.1 ADSL 简介

        ADSL(Asymmetric Digital Subscriber Line，非对称数字用户线路)是一种采用异步传输模式(ATM)，上行和下行带宽不对称的数据传输方式。
  
    ADSL采用频分复用技术把普通的电话线分成了电话、上行和下行三个相对独立的信道，从而避免了相互之间的干扰。


1.6.2 配置和启动ADSL连接

    1.安装ppp和rp-pppoe软件包

    -->rpm -q ppp
    
       ppp-2.4.4-2.el5

    -->rpm -q rp-pppoe

       package pppoe is not installed   #需要安装

    -->yum install pppoe  pppoe-relay  pppoe-server pppoe-sniff -y

    注意如果yum安装后仍提示没有pppoe-setup命令，则通过源码安装相关包

    。安装ppp

    -->tar -zxf ppp-2.4.5.tar.gz

    -->cd ppp-2.4.5

    -->make

    -->make install

    。安装rp-pppoe

    
    -->tar -zxf rp-pppoe-3.8.tar.gz

    -->cd rp-pppoe-3.8

    -->cd src

    -->./configure

    -->make

    -->make install



    2.配置ADSL连接

    使用pppoe-setup命令可以在Linux系统下配置ADSL连接

    -->pppoe-setup

    -->Enter your Login Name (default root):      #请输入ADSL连接的用户账户名，默认是root，此处回车

    -->(defauilt eth):   eth0      #输入eth0

    -->addresses.  You may have some problems with demand-activated links.
       >>> Enter the demand value (default no):  no   #回车，默认选择的为no,表示断线后不再进行自动拨号



    -->PASSWORD
       >>> Please enter your PPPoE password:       #输入PPPOE密码2次(yhq845541)
       >>> Please re-enter your PPPoE password:

    -->The firewall choices are:


    1 - STANDALONE: Appropriate for a basic stand-alone web-surfing workstation
    2 - MASQUERADE: Appropriate for a machine acting as an Internet gateway
                for a LAN
    >>> Choose a type of firewall (0-2): 0        #输入0表示使用管理员自己配置的防火墙

    ** Summary of what you entered **


 
    
    -->>>> Accept these settings and adjust configuration files (y/n)? y   #输入y 输入的信息正确，完成配置


    Congratulations, it should be all set up!

    Type 'pppoe-start' to bring up your PPPoE link and 'pppoe-stop' to bring
    it down.  Type 'pppoe-status' to see the link status.

    3.启动或端开ADSL连接

    。启动ADSL连接

    -->pppoe-start   

    ................TIMED OUT   #此处这个错误是因为没有将ADSL业务的电话线路连接在数字用户线路访问多路复用器

                                (DSLAM)上

    。查看ADSL连接

    -->pppoe-status /etc/sysconfig/network-scripts/ifcfg-ppp0

    。断开ADSL连接

    -->pppoe-stop   

    。查看ADSL连接的状态

    -->pppoe-status /etc/sysconfig/network-scripts/ifcfg-eth0
    
    Note: You have enabled demand-connection; pppoe-status may be inaccurate.
    pppoe-status: Link is down (can't read pppoe PID file .pppoe)
