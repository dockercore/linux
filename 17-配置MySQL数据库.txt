                                    第17章 配置MySQL数据库

17.1 MySQL数据库简介

     MySQL主要有以下两种存储引擎：

     。MyISAM:MySQL 5.5之前的默认数据库引擎。拥有较高的插入、查询速度、但不支持事务。

     。InnoDB:事务型数据库的首选引擎，支持ACID事务、支持行级锁定，从MySQL5.5开始成为

       默认的数据库引擎。


17.2 安装MySQL软件

    MySQL主要有两种方式：RPM软件包和源码编译方式：


17.2.1 RPM软件包方式安装MySQL

    1.安装软件包

    -->rpm -qa|grep mysql

    -->yum install mysql-libs mysql mysql-server  mysql-test -y


    2.初始化MySQL数据库

    -->service mysqld start

17.2.2 源码编译方式安装MySQL

    1.安装cmake软件包

    -->yum install cmake -y

    2.创建用户和组群

    -->groupadd mysql

    -->useradd -r -g mysql mysql   #用户mysql是Linux系统用户

    3.创建安装目录和数据库存储目录

    -->mkdir -p /usr/local/mysql

    -->mkdir -p /usr/local/mysql/data

    4.安装mysql软件

    cmake是一个跨平台的安装编译工具，可以用简单的语句来描述所有平台的安装编译过程。

它能够输出各种各样的makefile或project文件，能测试编译器所支持的C++特性。

    命令语法：

    cmake [选项]

                                             cmake命令选项含义
    -----------------------------------------------------------------------------------
         选项                                        选项含义
    -----------------------------------------------------------------------------------
      -DCMAKE_INSTALL_PREFIX          指定MySQL软件安装目录
    -----------------------------------------------------------------------------------  
      -DINSTALL_DATADIR               指定数据块存储目录
    -----------------------------------------------------------------------------------
      --DDEFAULT_CHARSET              指定默认字符集
    -----------------------------------------------------------------------------------
      --DDEFAULT_COLLATION            指定默认排序规则  
    -----------------------------------------------------------------------------------
      --DEXTRA_CHARSETS               安装所有扩展字符集
    -----------------------------------------------------------------------------------
      --DENABLED_LOCAL_INFILE         允许从本地导入数据
    -----------------------------------------------------------------------------------

    安装mysql


    。查询是否安装了mysql

    -->rpm -qa|grep mysql
mysql-server-5.1.73-5.el6_6.x86_64
mysql-libs-5.1.73-5.el6_6.x86_64
mysql-5.1.73-5.el6_6.x86_64
mysql-devel-5.1.73-5.el6_6.x86_64

    。卸载安装的mysql

    -->rpm -e mysql-server-5.1.73-5.el6_6.x86_64 mysql-libs-5.1.73-5.el6_6.x86_64 \
mysql-5.1.73-5.el6_6.x86_64 mysql-devel-5.1.73-5.el6_6.x86_64 --nodeps


    -->tar -zxf mysql-5.7.1-m11.tar.gz 

    -->cd mysql-5.7.1-m11

    -->cmake . \
-DCMAKE_INSTALL_PREFIX=/usr/local/mysql \
-DMYSQL_DATADIR=/usr/local/mysql/data \
-DDEFAULT_CHARSET=utf8 \
-DDEFAULT_COLLATION=utf8_general_ci \
-DEXTRA_CHARSETS=all \
-DENABLED_LOCAL_INFILE=1

    -->make

    -->make install 


    5.设置目录所有者

    -->chown -R root:mysql /usr/local/mysql

    -->chown -R mysql:mysql /usr/local/mysql/data


    6.设置环境

    -->vim /root/.bash_profile

       PATH=$PATH:$HOME/bin:/usr/local/mysql/bin:/usr/local/mysql/lib   #添加mysql项


    -->source /root/.bash_profile

    7.复制配置文件

    使用以下命令将/usr/local/mysql/support-files/my-default.cnf文件复制为/etc/my.cnf文件。

    -->cp /usr/local/mysql/support-files/my-default.cnf /etc/my.cnf

    8.创建系统数据库

    -->cd /usr/local/mysql

    -->scripts/mysql_install_db --user=mysql

    9.启动mysqld服务

    -->cp /usr/local/mysql/support-files/mysql.server /etc/init.d/mysqld

    -->service mysqld start

    -->service mysqld status

    10.登录MySQL服务器

    -->mysql

Welcome to the MySQL monitor.  Commands end with ; or \g.
Your MySQL connection id is 1
Server version: 5.7.1-m11 Source distribution

Copyright (c) 2000, 2013, Oracle and/or its affiliates. All rights reserved.

Oracle is a registered trademark of Oracle Corporation and/or its
affiliates. Other names may be trademarks of their respective
owners.

Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.

mysql> 

 

17.2.3 控制mysqld服务

    1.启动mysqld服务

    -->service mysqld start

       Starting MySQL.                                            [  OK  ]


    2.查看mysqld服务运行状态

    -->service mysqld status

       MySQL running (24903)                                      [  OK  ]

    3.停止mysqld服务

    -->service mysqld stop

       Shutting down MySQL..                                      [  OK  ]


    4.重新启动mysqld服务

    -->service mysqld restart 

       Shutting down MySQL..                                      [  OK  ]
       Starting MySQL.                                            [  OK  ]


    5.开机自动启动mysqld服务

    -->chkconfig mysqld on 

    -->chkconfig --list mysqld 


17.3 MySQL实用程序

17.3.1 常用MySQL实用程序

                             MySQL实用程序
    --------------------------------------------------------------------------------
        命令                                     功能
    --------------------------------------------------------------------------------
       mysql                  基于命令行的MySQL客户端程序
    --------------------------------------------------------------------------------
       mysql_config           获得用于编译客户端的编译选项
    --------------------------------------------------------------------------------
       mysqlshow              显示数据库、表和列等信息
    --------------------------------------------------------------------------------
       mysqlaccess            用于检查访问权限的客户端
    --------------------------------------------------------------------------------
       mysqladmin             执行MySQL数据库管理操作的客户端程序
    --------------------------------------------------------------------------------
       mysqlbinlog            用于处理二进制日志文件的实用工具
    --------------------------------------------------------------------------------
       mysqlimport            数据导入程序
    --------------------------------------------------------------------------------
       mysql_install_db       初始化MySQL数据目录
    --------------------------------------------------------------------------------
       mysqldump              将MySQL数据库导出到文件（起到备份作用）
    --------------------------------------------------------------------------------
       mysqlhotcopy           数据库备份程序
    --------------------------------------------------------------------------------
       mysql_upgrade          为MySQL升级检查表
    --------------------------------------------------------------------------------
       mysqlcheck             表维护程序
    --------------------------------------------------------------------------------
       mysql_client_test      测试客户端API
    --------------------------------------------------------------------------------
       mysql_zap              杀死匹配某一模式的进程
    --------------------------------------------------------------------------------
       myisamlog              显示MyISAM日志文件内容
    --------------------------------------------------------------------------------
       myisampack             生成压缩和只读的MyISAM表
    --------------------------------------------------------------------------------
       myisamchk              MyISAM表维护实用工具
    --------------------------------------------------------------------------------

17.3.2 mysqlshow 

    使用mysqlshow命令可以用来很快地查找存在哪些数据、数据表中的表、表中的类和索引等信息。

    命令：

    mysqlshow [选项][数据库[表[列]]]

                                 mysqlshow命令选项含义
    ----------------------------------------------------------------------------------------
          选项                              选项含义
    -----------------------------------------------------------------------------------------
      --protocol=<协议>                  用于连接的协议，协议可以是tcp、socket、pipe或memory
    -----------------------------------------------------------------------------------------
      -t                                 显示表类型的列
    -----------------------------------------------------------------------------------------
      --default-character-set=<字符集>   设置默认字符集
    -----------------------------------------------------------------------------------------
      -u <用户名>                        用于进行登录的用户
    -----------------------------------------------------------------------------------------
      -P <端口>                          用于连接的端口号，如果没有指定，默认值是3306
    -----------------------------------------------------------------------------------------
      -p <密码>                          指定连接到服务器时使用的密码
    -----------------------------------------------------------------------------------------
      -h <主机>                          指定连接主机
    -----------------------------------------------------------------------------------------
      -v                                 显示详细的输出信息
    -----------------------------------------------------------------------------------------
      -C                                 在服务器/客户端协议中使用压缩
    -----------------------------------------------------------------------------------------

    例17.1：显示MySQL服务器中所有的数据库

    -->mysqlshow
+--------------------+
|     Databases      |
+--------------------+
| information_schema |
| mysql              |
| performance_schema |
| test               |
+--------------------+


注意：如果设置密码了输出报错：mysqlshow
mysqlshow: Access denied for user 'root'@'localhost' (using password: NO)

解决方法：

[root@Puppet-client ~]# mysqlshow -uroot -p
Enter password: 
+--------------------+
|     Databases      |
+--------------------+
| information_schema |
| mysql              |
| performance_schema |
| test               |
+--------------------+



  
    例17.2 显示数据库mysql中的表

    -->mysqlshow mysql 或：mysqlshow mysql -uroot -p


Database: mysql
+---------------------------+
|          Tables           |
+---------------------------+
| columns_priv              |
| db                        |
| event                     |
| func                      |
| general_log               |
| help_category             |
| help_keyword              |
| help_relation             |
| help_topic                |
| innodb_index_stats        |
| innodb_table_stats        |
| ndb_binlog_index          |
| plugin                    |
| proc                      |
| procs_priv                |
| proxies_priv              |
| servers                   |
| slave_master_info         |
| slave_relay_log_info      |
| slave_worker_info         |
| slow_log                  |
| tables_priv               |
| time_zone                 |
| time_zone_leap_second     |
| time_zone_name            |
| time_zone_transition      |
| time_zone_transition_type |
| user                      |
+---------------------------+


17.3.3 mysqladmin

    使用mysqladmin命令可以管理MySQL服务器，比如检查MySQL服务器配置和当前状态，

创建和删除数据库、数据库对象等。

    命令语法：

    mysqladmin [选项] [命令]

                                mysqladmin命令选项含义
    ---------------------------------------------------------------------------------------------
         选项                                     选项含义
    ---------------------------------------------------------------------------------------------
      -h <主机名>                       指定连接的MySQL服务器
    ---------------------------------------------------------------------------------------------
      -p <密码>                         指定连接服务器的用户密码
    ---------------------------------------------------------------------------------------------
      -C                                在服务器和客户端协议中使用压缩
    ---------------------------------------------------------------------------------------------
      --default-character-set=<字符集>  设置默认字符集
    ---------------------------------------------------------------------------------------------
      -P<端口>                          指定用于连接端口号
    ---------------------------------------------------------------------------------------------
      -f                                在删除数据库时不要求确认。执行过程中出现错误仍旧继续运行
    ---------------------------------------------------------------------------------------------
      --protocol=<协议>                 用于连接的协议，协议可以是tcp、socket、pipe或memory 
    ---------------------------------------------------------------------------------------------
      -w                                如果连接已关闭等待并重试
    ---------------------------------------------------------------------------------------------
      create <数据库名>                 创建一个新的数据库
    ---------------------------------------------------------------------------------------------
      debug                             将调试信息写入日志
    ---------------------------------------------------------------------------------------------
      drop <数据库名>                   删除一个数据库（包括数据库中所有的表）
    ---------------------------------------------------------------------------------------------
      extended-status                   显示服务器扩展状态消息
    ---------------------------------------------------------------------------------------------
      flush-hosts                       刷新所有缓存主机
    ---------------------------------------------------------------------------------------------
      flush-logs                        刷新所有日志
    ---------------------------------------------------------------------------------------------
      flush-status                      清空状态变量
    ---------------------------------------------------------------------------------------------
      flush-tables                      刷新所有表
    ---------------------------------------------------------------------------------------------
      flush-threads                     清空线程缓存
    ---------------------------------------------------------------------------------------------
      flush-privileges                  重新加载授权表，和reload起到一样的作用
    ---------------------------------------------------------------------------------------------
      kill <线程ID>                     杀死MySQL线程，可以理解为根据连接ID(Connection id)关闭连接
    ---------------------------------------------------------------------------------------------
      password <新密码>                 更改旧密码为新密码
    ---------------------------------------------------------------------------------------------
      ping                              检查mysqld进程是否在运行
    ---------------------------------------------------------------------------------------------
      processlist                       显示服务器中活跃的线程列表
    ---------------------------------------------------------------------------------------------
      reload                            重新加载授权表
    ---------------------------------------------------------------------------------------------
      refresh                           刷新所有表并关闭和打开日志文件
    ---------------------------------------------------------------------------------------------
      shutdown                          关闭MySQL服务
    ---------------------------------------------------------------------------------------------
      status                            显示服务器的基本状态信息
    ---------------------------------------------------------------------------------------------
      start-slave                       启动MySQL从服务器
    ---------------------------------------------------------------------------------------------
      stop-slave                        停止MySQL从服务器
    ---------------------------------------------------------------------------------------------
      variables                         显示可用变量
    ---------------------------------------------------------------------------------------------
      version                           显示MySQL的版本信息
    ---------------------------------------------------------------------------------------------

    例17.3 设置MySQL用户root的密码，密码为yhq845541

    -->mysqladmin -uroot -p password 'newpassword'

=====================================================================================
使用网上介绍的方法修改root用户的密码：
# mysqladmin -uroot -p password 'newpassword'
Enter password:
mysqladmin: connect to server at 'localhost' failed
error: 'Access denied for user 'root'@'localhost' (using password: YES)'

现在终于被我找到了解决方法：

切换到root用户，然后进入mysql 的bin目录后，

    -->/etc/init.d/mysql stop 

    -->cd /usr/local/mysql/bin

    -->./mysqld_safe --user=mysql --skip-grant-tables --skip-networking & 

    -->./mysql -u root mysql 

    -->mysql> UPDATE user SET Password=PASSWORD('newpassword') where USER='root';

    -->mysql> FLUSH PRIVILEGES;

    -->mysql> quit;
====================================================================================

其它：

    -->mysqladmin processlist -uroot -p   #显示服务器中活跃的线程列表
Enter password: 
+----+------+-----------+----+---------+------+-------+------------------+
| Id | User | Host      | db | Command | Time | State | Info             |
+----+------+-----------+----+---------+------+-------+------------------+
| 17 | root | localhost |    | Query   | 0    | init  | show processlist |
+----+------+-----------+----+---------+------+-------+------------------+

    例17.4 显示MySQL服务器的基本状态信息

    -->mysqladmin status -uroot -p
Enter password: 
Uptime: 8545  Threads: 1  Questions: 6  Slow queries: 0  Opens: 67  Flush tables: 1  Open tables: 60  Queries per second avg: 0.000


                                   表17.6 mysqladmin status命令输出信息描述
    ----------------------------------------------------------------------------------------
        输出信息                             信息描述
    ----------------------------------------------------------------------------------------
        Uptime:8545             MySQL服务器已经运行的时间，单位为秒
    ----------------------------------------------------------------------------------------
        Threads:1               活动的线程数量
    ----------------------------------------------------------------------------------------        
        Questions: 6            从MySQL服务器启动后，来自客户问题的数量
    ----------------------------------------------------------------------------------------
        Slow queries: 0         已经超过long_query_time秒的查询数量
    ----------------------------------------------------------------------------------------
        Opens: 67               MySQL服务器打开的表数量
    ----------------------------------------------------------------------------------------
        Flush tables: 1         MySQL服务器执行flush、refresh和reload命令的次数
    ----------------------------------------------------------------------------------------
        Open tables:60          当前被打开的表的数量
    ----------------------------------------------------------------------------------------
        Queries per second avg: 0.000  平均每秒查询次数
    ----------------------------------------------------------------------------------------


17.3.4 myisamchk

    使用myisamchk命令可以检查和修复MyISAM表。使用不带选项的命令，所有表都将被检查是否有错误。

    命令语法：

    myisamchk [选项] [表名]

                                    myisamchk命令选项含义
    -------------------------------------------------------------------------------------------------
      选项                                               选项含义
    -------------------------------------------------------------------------------------------------
      -p                   与-r和-n的用法相同，但使用不同的线程并创建所有键
    -------------------------------------------------------------------------------------------------  
      -c                   检查表的错误，如果不明确指定操作类型选项，这就是默认操作
    -------------------------------------------------------------------------------------------------
      -w                   如果表被锁住就等待
    -------------------------------------------------------------------------------------------------
      -B                   将MYD文件备份为file_name-time.BAK
    -------------------------------------------------------------------------------------------------
      -c                   检查表是否有错误
    -------------------------------------------------------------------------------------------------
      -f                   如果myisamchk发现表内有任何错误，则自动进行修复。维护类型与-r选项指定
                           的相同。
    -------------------------------------------------------------------------------------------------
      -r                   可以修复几乎所有一切问题，除非唯一的键不唯一时。
    -------------------------------------------------------------------------------------------------
      -C                   只检查自上次检查以来更改的表
    -------------------------------------------------------------------------------------------------
      -F                   检查只是还没有被正确关闭的表
    -------------------------------------------------------------------------------------------------
      -v                   输出详细信息
    -------------------------------------------------------------------------------------------------
      -s                   只显示错误信息
    -------------------------------------------------------------------------------------------------
      -f                   强制覆盖旧的临时文件
    -------------------------------------------------------------------------------------------------
      --max-record-length=<最大记录长度>   如果使用myisamchk不能分配内存来保存它，跳过大于这个的行
    -------------------------------------------------------------------------------------------------
      -n                   如果临时文件非常大，使用排序强制恢复
    -------------------------------------------------------------------------------------------------
      -u                   将用myisampack打包表解包
    -------------------------------------------------------------------------------------------------
      -i                   显示有关表被检查的统计信息
    -------------------------------------------------------------------------------------------------
      -D<长度>             数据文件的最大长度
    -------------------------------------------------------------------------------------------------
      -e                   进行修复，试图从数据文件恢复每一行。一般情况下会发现大量的垃圾行。不要使用
                           该选项，除非你不顾后果。
    -------------------------------------------------------------------------------------------------
      -q                   不更改数据文件快速修复。
    -------------------------------------------------------------------------------------------------
      -S                   排序索引块
    -------------------------------------------------------------------------------------------------
      -m                   比-e更快速地进行检查。只能发现99.99%的错误，在大多数情况下就足够了。
    -------------------------------------------------------------------------------------------------
      -o                   使用老的恢复方法
    -------------------------------------------------------------------------------------------------
      -U                   将信息保存在。MYI文件中，来表示表检查的时间以及是否表奔溃了。
    -------------------------------------------------------------------------------------------------
      -a                   分析键值的分布
    -------------------------------------------------------------------------------------------------
      -d                   显示有关表的一些信息
    -------------------------------------------------------------------------------------------------

    例17.5 检查和修复MyISAM表

    -->myisamchk /var/lib/mysql/mysql/db.MYI 

Checking MyISAM file: /var/lib/mysql/mysql/db.MYI
Data records:       4   Deleted blocks:       0
- check file-size
- check record delete-chain
- check key delete-chain
- check index reference
- check data record references index: 1
- check data record references index: 2


17.3.5 mysql 

    mysql是MySQL命令行工具，它是一个简单的输入行编辑功能的SQL Shell，支持交互式和非交互式使用。当交互使用

时，查询结果显示一个ASCII表的格式。当使用非交互方式，查询结果显示一个制表符分隔的格式。输出格式可以使用命令

选项进行更改。

    命令语法：

    mysql [选项][数据库]

                                                       mysql命令选项含义
    -------------------------------------------------------------------------------------------------------
         选项                                     选项含义
    -------------------------------------------------------------------------------------------------------
          -h<主机名>                         指定连接的MySQL服务器
    -------------------------------------------------------------------------------------------------------
          -P<端口号>                         指定连接的MySQL服务器所使用的端口号
    -------------------------------------------------------------------------------------------------------
          -u<用户>                           指定连接MySQL服务器时使用的用户名
    -------------------------------------------------------------------------------------------------------
          -p<密码>                           指定连接MySQL服务器时用户的密码
    -------------------------------------------------------------------------------------------------------
          -D<数据库>                         指定使用的数据库。
    -------------------------------------------------------------------------------------------------------
          --deefault-character-set=<字符集>  指定默认字符集
    -------------------------------------------------------------------------------------------------------
          -f                                 即使出现一个SQL错误仍旧继续
    -------------------------------------------------------------------------------------------------------
          -C                                 在客户端和服务器之间的协议进行压缩
    -------------------------------------------------------------------------------------------------------
          -e<命令>                           执行命令并退出
    ------------------------------------------------------------------------------------------------------- 
          -w                                 如果连接已关闭等待并重试  
    -------------------------------------------------------------------------------------------------------  
 

    在mysql命令行工具中，可以使用的命令如表：

                                                       命令
    ---------------------------------------------------------------------------------------------------------
      命令              快捷键                                     描述
    ---------------------------------------------------------------------------------------------------------
       ?                  \?                            显示帮助信息，和help命令功能一样。
    ---------------------------------------------------------------------------------------------------------
      clear               \c                            清除当前输入信息
    ---------------------------------------------------------------------------------------------------------
      help                \h                            显示帮助信息
    ---------------------------------------------------------------------------------------------------------
      connect             \r                            重新连接到服务器
    ---------------------------------------------------------------------------------------------------------
      edit                \e                            使用$EDITOR编辑命令
    ---------------------------------------------------------------------------------------------------------
      exit                \q                            退出mysql和quit命令功能一样
    ---------------------------------------------------------------------------------------------------------   
      quit                \q                            退出mysql
    ---------------------------------------------------------------------------------------------------------
      print               \p                            打印当前命令
    ---------------------------------------------------------------------------------------------------------
      status              \s                            从服务器获取状态信息
    ---------------------------------------------------------------------------------------------------------
      system              \!                            执行系统Shell命令
    ---------------------------------------------------------------------------------------------------------
      source              \.                             执行SQL脚本文件。需要指定一个文件名作为参数
    ---------------------------------------------------------------------------------------------------------
      rehash              \#                             重新生成哈希值
    ---------------------------------------------------------------------------------------------------------
      ego                 \G                             发送命令到MySQL服务器，垂直显示结果
    ---------------------------------------------------------------------------------------------------------
      go                  \g                             发送命令到MySQL服务器
    ---------------------------------------------------------------------------------------------------------
      use                 \u                             使用另外一个数据库。需要指定数据库名称作为参数
    ---------------------------------------------------------------------------------------------------------
      charset             \C                             切换到另外一个字符集
    ---------------------------------------------------------------------------------------------------------
      notee               \t                             不要写入输出文件
    ---------------------------------------------------------------------------------------------------------
      prompt              \R                             改变mysql提示
    ---------------------------------------------------------------------------------------------------------
      delimiter           \d                             设置语句分隔符
    ---------------------------------------------------------------------------------------------------------
      tee                 \T                             设置输出文件，一切都追加到指定的输出文件
    ---------------------------------------------------------------------------------------------------------
      warnings            \W                             在每条语句后显示警告
    ---------------------------------------------------------------------------------------------------------
      nowarning           \w                             在每条语句后不显示警告
    ---------------------------------------------------------------------------------------------------------


    在使用mysql命令行工具时会有不同的提示符，表示当前所处的不同状态

                                     mysql提示符描述
    ---------------------------------------------------------------------------------------------------------
        提示符                                            描述
    ---------------------------------------------------------------------------------------------------------
        mysql>                 准备接受新命令
    ---------------------------------------------------------------------------------------------------------
        ->                     等待多行命令的下一行
    ---------------------------------------------------------------------------------------------------------
        '>                     表示一个以单引号开始的字符串还没有以单引号结束，等待下一行匹配开始的单引号
    ---------------------------------------------------------------------------------------------------------
        ">                     表示一个以双引号开始的字符串还没有以单引号结束，等待下一行匹配开始的双引号
    ---------------------------------------------------------------------------------------------------------

    例17.7 登录MySQL服务器

    -->mysql


    例17.8 查询数据库mysql中表user的User列数据

    -->mysql -e 'SELECT User FROM user' mysql;


17.3.6 mysqlimport

    使用mysqlimport命令可以实现数据导入，mysqlimport提供了一个LOAD DATA INFILE语句的命令行界面。

    命令语法：

    mysqlimport [选项][数据库][文本文件]

                                           mysqlimport命令选项含义
    -----------------------------------------------------------------------------------------
      选项                                           选项含义
    -----------------------------------------------------------------------------------------
       -d                                    首先从表中删除所有行
    -----------------------------------------------------------------------------------------
       -h<主机名>                            指定连接主机
    -----------------------------------------------------------------------------------------
       -u<用户名>                            进行登录的用户名
    -----------------------------------------------------------------------------------------
       -v                                    显示详细的信息
    -----------------------------------------------------------------------------------------
       -P<端口>                              连接使用的端口号
    -----------------------------------------------------------------------------------------
       -l                                    锁定所有表写入(这会禁用线程）
    -----------------------------------------------------------------------------------------
       -p<密码>                              连接到MySQL服务器时使用的密码
    -----------------------------------------------------------------------------------------
       -i                                    如果发现重复的唯一键，保持旧行
    -----------------------------------------------------------------------------------------  
       -f                                    出现SQL错误继续执行
    -----------------------------------------------------------------------------------------
       --default-character-set=<字符集>      设置默认字符集
    -----------------------------------------------------------------------------------------
       -C                                    在服务器/客户端协议中使用压缩
    -----------------------------------------------------------------------------------------
       -r                                    如果发现重复的唯一键，更换旧行
    -----------------------------------------------------------------------------------------

    注意：

    文本文件的数据格式必须与表中的记录格式一致，而且文本文件名称和表名要一样，否则mysqlimport命令

将会出错。

    实例：把table1文本文件里面的数据导入到数据库www的表table1中。

    1.创建表

    -->mysql -e 'CREATE TABLE table1(id int,name varchar(20));' www -uroot -p
       Enter password:

    2.创建文本文件

    创建文本文件table1,该文件内容如下，总共两列数据，两列之间的数据使用[Tab]键来分隔。

    -->vim table1

      1        zhangsan
      2        lisi

     注意1和zhangsan2个字段之间是tab分隔8个字符。

    3.导入数据

    使用以下命令将table1文件里的数据导入到数据库www的表table1中

    -->mysqlimport --local www table1 -uroot -p
Enter password: 
www.table1: Records: 2  Deleted: 0  Skipped: 0  Warnings: 4
  
    4.查询数据

    使用以下命令查询数据库www的表table1的数据

    -->mysql -e 'SELECT * FROM table1' www -uroot -p

Enter password: 
+------+----------+
| id   | name     |
+------+----------+
|    1 | zhangsan |
|    2 | lisi     |
+------+----------+


17.3.7 mysqlcheck 

    mysqlcheck命令可以检查和修复MyISAM表。它还可以优化和分析表。mysqlcheck的功能类似myisamchk，

但其工作不同。主要差别是当MySQL服务器在运行时必须使用mysqlcheck，而myisamchk应用于服务器没有运行

时。使用mysqlcheck的好处是不需要停止服务器来检查或修复表。

    mysqlcheck为用户提供了一种方便的使用SQL语句CHECK TABLE、REPAIR TABLE、ANALYZE TABLE和OPTIMIZE 

TABLE的方式。它确定在要执行的操作中使用哪个语句，然后将语句发送到要执行的服务器上。

    命令语法：

    mysqlcheck [选项] 数据库[表]

                                                   mysqlcheck命令选项含义
    ---------------------------------------------------------------------------------------------------
         选项                                             选项含义
    ---------------------------------------------------------------------------------------------------      
          -B          处理数据库中命名的所有表。使用该选项，所有字名参量被看做数据库名，而不是表名
    ---------------------------------------------------------------------------------------------------
          -a          分析表
    ---------------------------------------------------------------------------------------------------
          -A          检查所有数据库
    ---------------------------------------------------------------------------------------------------
          -l          不是为每个表发出一个语句，而是为命名数据库中待处理的所有表的每个数据库执行一个语句。
    -----------------------------------------------------------------------------------------------------
          -c          检查表的错误
    -----------------------------------------------------------------------------------------------------
          -C          只检查上次检查上次检查以来已经更改的或没有正确关闭的表
    -----------------------------------------------------------------------------------------------------
          -f          即使出现SQL错误也继续
    -----------------------------------------------------------------------------------------------------
          --compress  压缩在客户端和服务器之间发送的所有信息
    -----------------------------------------------------------------------------------------------------
          --default-character-set=<字符集>   使用指定默认字符集
    -----------------------------------------------------------------------------------------------------
          --auto-repair                      如果某个被检查表破坏了，自动修复它。检查完所有表后自动进行所有
                                             需要的修复
    -----------------------------------------------------------------------------------------------------
          --character-sets-dir=<安装目录>    字符集的安装目录
    -----------------------------------------------------------------------------------------------------
          --S <套接字文件>                   用于连接的套接字文件
    -----------------------------------------------------------------------------------------------------
          -p<密码>                           指定当连接服务器时使用的密码
    -----------------------------------------------------------------------------------------------------
          -u<用户名>                         当连接服务器时使用的MySQL用户名
    -----------------------------------------------------------------------------------------------------
          -p<密码>                           指定当连接服务器时使用的密码
    -----------------------------------------------------------------------------------------------------
          -r                                 执行可以修复大部分问题的修复，只是唯一值不唯一时不能修复
    -----------------------------------------------------------------------------------------------------
          -P<端口号>                         用于连接的TCP/IP端口号
    ----------------------------------------------------------------------------------------------------- 
          --protocol=<协议>                  指定使用的连接协议，协议可以是tcp、socket、pipe或memory
    -----------------------------------------------------------------------------------------------------
          -F                                 只检查没有正确关闭的表
    -----------------------------------------------------------------------------------------------------
          -s                                 沉默模式，只打印错误消息
    -----------------------------------------------------------------------------------------------------
          -v                                 冗长模式，打印关于各阶段程序操作的信息
    -----------------------------------------------------------------------------------------------------
          -h<主机>                           连接指定主机上的MySQL服务器
    -----------------------------------------------------------------------------------------------------
          -q                                 如果正使用该选项在检查表，它防止扫描行以检查错误链接的检查。
                                             这是最快的检查方法。如果正使用该选项在修复表，它尝试只修复索引
                                             树。这是最快的修复方法。
    ------------------------------------------------------------------------------------------------------------
          -e                                 如果正使用该选项来检查表，可以确保他们100%地一致，但需要很长的时间。
                                             如果正使用该选项来修复表，则运行扩展修复，不但执行的时间很长，而且
                                             还会产生大量的垃圾行。
    ------------------------------------------------------------------------------------------------------------
          -m                                 执行比-e操作更快的检查。只能发现99.99%的错误 
    -----------------------------------------------------------------------------------------------------------
          -o                                 优化表
    -----------------------------------------------------------------------------------------------------
          --tables                           覆盖-B选项
    -----------------------------------------------------------------------------------------------------


    例17.9 检查和修复数据库www中的所有表

    -->mysqlcheck www -uroot -p

Enter password: 
www.table1                                         OK


    例17.10检查和修复数据库www中的table1表

    -->mysqlcheck www table1 -uroot -p

Enter password: 
www.table1                                         OK



17.4 管理和维护MySQL数据库

17.4.1 数据库

    数据库是指以一定方式存储在一起、能为多个用户共享、具有尽可能小的冗余度、与应用程序彼此独立

的数据集合。


    1.显示数据库

    例17.1 显示MySQL服务器上所有的数据库

    -->mysql> show databases;
+--------------------+
| Database           |
+--------------------+
| information_schema |
| mysql              |
| performance_schema |
| test               |
| test2              |
| www                |
+--------------------+
6 rows in set (0.00 sec)

    2.创建数据库
    
    CREATE DATABASE语句用于创建数据库，并进行命名。如果要使用CREATE DATABASE语句，需要获得数据库

CREATE权限。CHARACTER SET子句用于更改默认的数据库字符集。COLLATE子句用于更改默认的数据库排序规则。

    SQL语法：

    CREATE {DATABASE|SCHEMA} [IF NOT EXISTS] db_name
        [[DEFAULT]CHARACTER SET charset_name
        [[DEFAULT]COLLATE collation_name]

    例17.12 创建数据库www

    -->mysql> create database www;

    例17.13 创建数据库www，数据库字符集为utf8

    -->mysql> create database www collate utf8_general_ci;

    3.使用数据库

    -->use www;

    4.更改数据库

    ALTER DATABASE语句用于更改数据的全局特性。要使用ALTER DATABASE语句，需要获得数据库ALTER权限。

CHARACTER SET子句用于更改默认的数据库字符集。COLLATE子句用于更改默认的数据库排序规则。

    SQL语法：

    ALTER {DATABASE|SCHEMA}[db_name]
      [DEFAULT]CHARACTER SET charset_name
      [DEFAULT]COLLATE collation_name

    例17.16：更改数据库www的默认数据库字符集为utf8

    -->mysql> alter database www default character set utf8;

      Query OK, 1 row affected (0.04 sec)


    5.删除数据库

    DROP DATABASE语句用于删除数据库的所用表格和删除数据库，此语句会从指定的数据库目录中删除数据库的文件

和目录。

    SQL语法：

    DROP  {DATABASE|SCHEMA}[IF EXISTS] db_name

    例17.17 删除数据库www

    -->mysql> drop database www;

       Query OK, 1 row affected (0.37 sec)


17.4.2 数据类型

    数据类型是数据的一种属性，表示数据所表示信息的类型。在MySQL数据库中，可以使用数据类型有日期和时间数据

类型、字符数据类型以及数值数据类型。

    1.日期和时间数据类型

    （1）DATE

     日期，支持的范围为'1000-01-01 00:00:00'到'9999-12-31 23:59:59'。MySQL以'YYYY-MM-DD HH:MM:SS'格式显示

DATETIME值，但允许使用字符串或数字为DATETIME列分配值。

    （2）DATETIME

     日期和时间的组合。支持范围是'1000-01-01 00:00:00'到'9999-12-31 23:59:59'。

    （3）TIMESTAMP
    
     时间戳。范围是'1970-01-01 00:00:00'到2037年。

    （4）TIME

     时间。范围是'-838:59:59'到'838:59:59'。MySQL以‘HH:MM:SS’格式显示TIME值，但允许使用字符串或数字为TIME

列分配值。

    （5）YEAR

     两位或四位格式的年。默认是四位格式。在四位格式中，允许的值是1901到2155和0000。在两位格式中，允许的值是70

到69，表示从1970年到2069年。MySQL以YYYY格式显示YEAR值，但允许使用字符串或数字为YEAR列分配值。

    2.字符数据类型

    常用的字符类有：

    （1）CHAR

     CHAR列的长度固定为创建表时声明的长度。长度可以为从0到255的任何值。

    （2）VARCHAR

     VARCHAR列中的值可变长字符串。长度可以指定为0到65535之间的值。

    （3）BINARY

     类似于CHAR数据类型，但保存二进制字节字符串而不是非二进制字符串。

    （4）VARBINARY

     类似于VARCHAR数据类型，但保存二进制字节字符串而不是非二进制字符串。

    （5）BLOB和TEXT

     对于字段长度要求超过255个的情况下，MySQL提供了TEXT和BLOB两种数据类型。根据存储数据的大小，它们都有不同的

子类型。这些大型的数据用于存储文本块或图像、声音文件等二进制数据类型。


    3.数值数据类型

    （1）TINYINT

     很小的整数。带符号的范围是-128到127。无符号的范围是0到255。

    （2）SMALLINT

     小的整数。带符号的范围是-32768到32767。无符号的范围是0到65535.

    （3）BIGINT

     大整数。带符号的范围是-9223372036854775808到9223372036854775807。无符号的范围是0到18446744073709551615。

    （4）INT

     普通大小的整数。带符号的范围是-2147483648到2147483647。无符号的范围是0到4294967295.

    （5）MEDIUMINT

     中等大小的整数。带符号的范围是-8388608到8388607。无符号的范围是0到16777215。

    （6）NUMERIC

     用于保存必须为确切精度的值，比如货币数据。当声明该类型的列时，通常要指定精度和标度。

    （7）DECIMAL

     DECIMAL和NUMERIC数据类型在MySQL数据库中视为相同的类型。

    （8）FLOAT

     用于表示近似数值数据类型。SQL标准允许在关键字FLOAT后面的括号内选择用位指定精度。

    （9）DOUBLE

     普通大小（双精度）浮点数。允许的值是-1.7976931348623157E+308到-2.2250738585072014E-308、

0和2.2250738585072014E-308到1.7976931348623157E+308。
   

17.4.3 表

    表是数据库中用来存储数据的对象，是有结构的数据的集合，是整个数据库系统的基础。

    1.列出指定数据库中的表

     SHOW TABLES语句列出了指定数据库中的非临时表。如果对于一个表没有权限，则该表不会在SHOW TABLES

输出中显示。

     SQL语法：

     SHOW [FULL] TABLES [FROM db_name] [LIKE 'pattern']

     例17.18： 列出数据库mysql中的表

     -->mysql> show tables;
+---------------------------+
| Tables_in_mysql           |
+---------------------------+
| columns_priv              |
| db                        |
| event                     |
| func                      |
| general_log               |
| help_category             |

   

    2.创建表

    CREATE TABLE语句用于创建表。必须拥有表CREATE权限。创建表时，可以使用TEMPORARY关键词。只有在当前

连接情况下，临时表才是可见的。当连接关闭时，临时表被自动取消。这意味着两个不同的连接可以使用它相同

的临时表名称，同时，两个临时表不会互相冲突，也不与原有的同名的非临时表冲突。（原有的表被隐藏，直到

临时表被取消时为止）必须拥有CREATE TEMPORARY TABLES权限，才能创建临时表。如果表已存在，则使用关键词

IF NOT EXISTS可以防止发生错误。


     例17.19 创建表table1

     -->mysql> create table table1(id int,name varchar(20));

       Query OK, 0 rows affected (0.24 sec)

     注意：当出现以下错误信息时，代表没有指定数据库，使用USE语句来指定。

     ERROR 1046(3D000)：No database selected


     例17.20 创建表table2，id列不允许输入空值，name列允许空值。

     -->mysql> create table table2(id int not null,name varchar(20) null);

     Query OK, 0 rows affected (0.19 sec)


     例17.21 根据表table1创建表table3

     -->mysql> create table table3 select * from table1;

     Query OK, 0 rows affected (0.07 sec)
     Records: 0  Duplicates: 0  Warnings: 0


     例17.22 根据表table1创建表table4

     -->mysql> create table table4 like table1;

     Query OK, 0 rows affected (0.08 sec)


     3.查看表结构

     DESCRIBE语句可以提供有关表中各列的信息。它是SHOW COLUMNS FROM的快捷方式。这些语句

也可以显示语句，用于阅览。

     SQL语法：

     {DESCRIBE | DESC} tab1_name | wild]

     例17.23 查看表table1结构

     -->mysql> desc table1;
+-------+-------------+------+-----+---------+-------+
| Field | Type        | Null | Key | Default | Extra |
+-------+-------------+------+-----+---------+-------+
| id    | int(11)     | YES  |     | NULL    |       |
| name  | varchar(20) | YES  |     | NULL    |       |
+-------+-------------+------+-----+---------+-------+
2 rows in set (0.04 sec)

     4.更改表

     ALTER TABLE语句用于更改原有表的结构。比如增加或删减列，创建或取消索引，更改原有列的

类型，或重新命名列或表，还可以更改表的评注和表的类型。

    （1）修改列

     例17.24：修改表table1的name列

     -->mysql> desc table1;
+-------+-------------+------+-----+---------+-------+
| Field | Type        | Null | Key | Default | Extra |
+-------+-------------+------+-----+---------+-------+
| id    | int(11)     | YES  |     | NULL    |       |
| name  | varchar(40) | YES  |     | NULL    |       |
+-------+-------------+------+-----+---------+-------+
2 rows in set (0.01 sec)

    （2）添加列

     例17.25 在表table1中添加phone列

     -->mysql> alter table table1 add column phone varchar(20);

     Query OK, 0 rows affected (0.11 sec)
     Records: 0  Duplicates: 0  Warnings: 0
      
   
    （3）删除列

     例17.26 删除表table1的phone列

     -->mysql> alter table table1 drop column phone;

        Query OK, 0 rows affected (0.07 sec)
        ecords: 0  Duplicates: 0  Warnings: 0

     5.删除表

     DROP TABLE语句用于删除一个或多个表。对于不存在的表，使用IF EXISTS用于防止

错误发生。 

     SQL语句：

     DROP TABLE [IF EXISTS]
     TBL_NAME [,tbl_name]
     [RESTRICT]CASCADE]


     例17.27 删除表table1

     -->mysql> drop table table1;
        Query OK, 0 rows affected (0.03 sec)


    6.重命名表

    当执行RENAME时，不能有被锁定的表，也不能有处于活动状态的事务。还必须拥有原表

的ALTER和DROP权限，以及新表的CREATE和INSERT权限。

    例17.28 将表table1重命名为table1。

    -->mysql> rename table table1 to table11;

       Query OK, 0 rows affected (0.00 sec)


17.4.4 DML数据操作

    1.INSERT：插入数据

    例17.29：向表table1中插入数据

    -->mysql> insert into table1 values(1,'张三');

   ERROR 1366 (HY000): Incorrect string value: '\xE5\xBC\xA0\xE4\xB8\x89' for column 'name' at row 1

   解决方法：

    -->mysql> alter table table1 convert to character set utf8;

      Query OK, 0 rows affected (0.08 sec)
      Records: 0  Duplicates: 0  Warnings: 0

    -->mysql> insert into table1 values(1,'张三');

      Query OK, 1 row affected (0.02 sec)


    例17.30 把表table1的数据插入到表table2中。


    -->insert into table2  select * from table1;

    例17.31 向表table1中的id列插入数据

    -->mysql> insert into table1 set id=4;

    Query OK, 1 row affected (0.00 sec)

    
    例17.32 向表table1中插入数据

    -->mysql> insert into table1 set id=5,name='qiujiu';

       Query OK, 1 row affected (0.00 sec)


    -->mysql> select * from table1;

+------+--------+
| id   | name   |
+------+--------+
|    1 | 张三   |
|    4 | NULL   |
|    5 | qiujiu |
+------+--------+
3 rows in set (0.00 sec)


    2.SELECT:查询数据

    SELECT语句用于查询表和视图中的数据

    例17.33： 查询表table1的数据
 
    -->mysql> select * from table1;

+------+--------+
| id   | name   |
+------+--------+
|    1 | 张三   |
|    4 | NULL   |
|    5 | qiujiu |
+------+--------+
3 rows in set (0.00 sec)


    例17.34 查询表table1中id列数据。

    -->mysql> select id from table1;

+------+
| id   |
+------+
|    1 |
|    4 |
|    5 |
+------+
3 rows in set (0.00 sec)

    例17.35 查询表table1中id大于2的数据

    -->mysql> select * from table1 where id>2;

+------+--------+
| id   | name   |
+------+--------+
|    4 | NULL   |
|    5 | qiujiu |
+------+--------+
2 rows in set (0.01 sec)


    例17.36 查询表table1中的数据，按id列降序排序

    -->mysql> select * from table1 order by id desc;

+------+--------+
| id   | name   |
+------+--------+
|    5 | qiujiu |
|    4 | NULL   |
|    1 | 张三   |
+------+--------+
3 rows in set (0.00 sec)


    -->mysql> select * from table1 order by id asc;

+------+--------+
| id   | name   |
+------+--------+
|    1 | 张三   |
|    4 | NULL   |
|    5 | qiujiu |
+------+--------+
3 rows in set (0.00 sec)


    例17.37 查询表table1中的数据，按id列分组

    -->mysql> select * from table1 group by id;

+------+--------+
| id   | name   |
+------+--------+
|    1 | 张三   |
|    4 | NULL   |
|    5 | qiujiu |
+------+--------+
3 rows in set (0.00 sec)


    例17.38 查询表table1中的数据，按id列分组，然后按id<2分组筛选。

    -->mysql> select * from table1 group by id having id <2;

+------+--------+
| id   | name   |
+------+--------+
|    1 | 张三   |
+------+--------+
1 row in set (0.00 sec)


    3. UPDATE: 更新数据

    UPDATE语句可以用新值更新原有表行中的各列。SET子句指示要修改哪些列和要给予哪些值。

WHERE子句指定应更新哪些行。如果没有WHERE子句，则更新所有的行。如果指定了ORDER BY子句，

则按照被指定的顺序对行进行更新。LIMIT子句用于指定一个限值，限值可以被更新的行的数目。

    UPDATE语句支持以下修饰符

    。如果使用LOW_PRIORITY关键词，则UPDATE的执行被延迟了，直到没有其他的客户端从表中读取为止。

    。如果使用IGNORE关键词，则即使在更新过程中出现错误，更新语句也不会中断。

    例17.39 更新表table1的数据

    -->mysql> update table1 set name='李四' where id=1;

       Query OK, 1 row affected (0.00 sec)
       Rows matched: 1  Changed: 1  Warnings: 0

    -->mysql> select * from table1;

+------+--------+
| id   | name   |
+------+--------+
|    1 | 李四   |
|    4 | NULL   |
|    5 | qiujiu |
+------+--------+
3 rows in set (0.00 sec)


    4.DELETE:删除数据

    DELETE语句用于删除表的行数据，并返回被删除的记录的数目。如果DELETE语句中没有WHERE子句，

则所有的行都被删除。

    例17.40 删除表table1中满足条件id=1的数据

    -->mysql> select * from table1;

+------+--------+
| id   | name   |
+------+--------+
|    1 | 李四   |
|    4 | NULL   |
|    5 | qiujiu |
+------+--------+
3 rows in set (0.00 sec)

    -->mysql> delete from table1 where id=1;

       Query OK, 1 row affected (0.01 sec)

    -->mysql> select * from table1;
+------+--------+
| id   | name   |
+------+--------+
|    4 | NULL   |
|    5 | qiujiu |
+------+--------+
2 rows in set (0.00 sec)

    例17.41 删除表table1的全部数据

    -->mysql> delete from table1;

       Query OK, 2 rows affected (0.00 sec)

    -->mysql> select * from table1;

       Empty set (0.00 sec)

17.4.5 索引

    索引是对表中一列或多列的值进行排序的一种结构，通过使用索引可以快速地访问表中的数据。索引提供指向

存储在表的指定列的数据值的指针，然后根据指定的排序顺序对这些指针排序。

    1.创建索引

    可以使用CREATE INDEX语句和ALTER TABLE ...ADD INDEX语句来创建索引

    （1）CREATE INDEX语句

    CREATE INDEX语句被映射到一个ALTER TABLE语句上，用于创建索引。通常当使用CREATE TABLE创建表时，也可以

同时在表中创建索引。CREATE INDEX允许向已有的表中添加索引。

    一个index_col_name规约可以以ASC或DESC为结尾。


    例17.42 创建索引index1

    -->mysql> create index index1 on table1(id);

       Query OK, 0 rows affected (0.22 sec)
       Records: 0  Duplicates: 0  Warnings: 0


    例17.43 创建唯一索引index2

    -->mysql> create unique index index2 on table1(id);

       Query OK, 0 rows affected (0.18 sec)
       Records: 0  Duplicates: 0  Warnings: 0


    （2）ALTER TABLE ... ADD INDEX语句

     ALTER TABLE ... ADD INDEX语句用于在修改表的时候创建索引。

    例17.44 修改表table1,创建索引index1

    -->alter table table1 add index index1(id);


    2.查看表上索引信息

    SHOW INDEX语句会返回表上索引的信息

                                        SHOW INDEX输出字段描述
    ---------------------------------------------------------------------------------------
      字段                                   描述
    ----------------------------------------------------------------------------------------
     Table                  表名
    ----------------------------------------------------------------------------------------
     Non_unique             如果索引不能包含重复数据为0。如果可以则为1
    ----------------------------------------------------------------------------------------
     Key_name               索引的名称
    ----------------------------------------------------------------------------------------
     Seq_in_index           索引中的序列号，从1开始
    ----------------------------------------------------------------------------------------
     Column_name            列名称
    ----------------------------------------------------------------------------------------
     Collation              列以什么方式存储在索引中，值A表示升序，NULL表示无分类。
    ------------------------------------------------------------------------------------------
     Cardinality            索引中唯一值的数目的估计值。通过运行ANALYZE TABLE或myisamchk -a
                            可以更新。基数根据被存储为整数的统计数据来计数，所以即使对于小型
                            表，该值也没有必要时精确的。基数越大，当进行联合时，MySQL使用该索引
                            的机会就越大。
    ------------------------------------------------------------------------------------------
     Sub_part               如果列只是被部分第编入索引，则为被编入索引的字符的数目。如果整列被
                            编入索引，则为NULL
    ------------------------------------------------------------------------------------------ 
     Packed                 指示关键字如何被压缩。如果没有压缩，则为NULL
    ------------------------------------------------------------------------------------------
     Null                   如果列含有NULL则显示YES。如果没有压缩则为NULL
    ------------------------------------------------------------------------------------------
     index_type             索引类型，可以是BTREE、FULLTEXT、HASH或RTREE
    ------------------------------------------------------------------------------------------
     Comment                注释
    ------------------------------------------------------------------------------------------


    例17.45 显示表table1上索引的信息

    -->mysql> show index from table1;
+--------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+
| Table  | Non_unique | Key_name | Seq_in_index | Column_name | Collation | Cardinality | Sub_part | Packed | Null | Index_type | Comment | Index_comment |
+--------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+
| table1 |          0 | index2   |            1 | id          | A         |           0 |     NULL | NULL   | YES  | BTREE      |         |               |
| table1 |          1 | index1   |            1 | id          | A         |           0 |     NULL | NULL   | YES  | BTREE      |         |               |
+--------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+
2 rows in set (0.00 sec)


    3.删除索引

    （1）DROP INDEX语句

     例17.46：删除索引index1

     -->mysql> drop index index1 on table1;


    （2）ALTER TABLE ... DROP INDEX语句

     ALTER TABLE ... DROP INDEX语句用于在修改表的时候删除索引

     例17.47 修改表table1，删除索引index1

     -->mysql> alter table table1 drop index index1;

    Query OK, 0 rows affected (0.13 sec)
    Records: 0  Duplicates: 0  Warnings: 0


--------------------------------------------------------------------

17.6 MySQL数据目录和日志文件

17.6.1 MySQL数据目录

    MySQL数据目录中包含了所有的数据库和表，他们被组织成一个树状的结构，该结构通过Linux文件

系统的层次结构使用简单的方式来实现。通过RPM软件包安装MySQL之后，数据目录默认为/var/lib/mysql

    源码：-->ls /usr/local/mysql/data/

    auto.cnf  ib_logfile0  ibtmp1  performance_schema  Puppet-client.pid  test2   # Puppet-client主机名
    ibdata1   ib_logfile1  mysql   Puppet-client.err   test

    在MySQL服务器中，每一个数据库都对应自己的数据库目录，这些数据库目录作为子目录存储在MySQL数据目录中，

与其所代表的数据库名称是一样的。比如数据库www对应的数据库目录为/var/lib/mysql/www。

    在MySQL服务器中，每一个表对应目录中的3个文件，分别为【格式文件】、【数据文件】和【索引文件】。每一个

文件的基本名称都是一样的，只是扩展名不同而已，如下所示显示表table1对应的文件

    -->ls /var/lib/mysql/www

columns_priv.frm   help_keyword.frm      proc.frm                   time_zone_leap_second.MYI
columns_priv.MYD   help_keyword.MYD      proc.MYD                   time_zone.MYD
columns_priv.MYI   help_keyword.MYI      proc.MYI                   time_zone.MYI
db.frm             help_relation.frm     procs_priv.frm             time_zone_name.frm
db.MYD             help_relation.MYD     procs_priv.MYD             time_zone_name.MYD
db.MYI             help_relation.MYI     procs_priv.MYI             time_zone_name.MYI


    或源码方式安装的：

    -->ls /usr/local/mysql/data/test

db.opt      table1.ibd  table2.ibd  table3.ibd  table4.ibd
table1.frm  table2.frm  table3.frm  table4.frm


    文件的扩展名表示不同的文件类型。

                                     数据库中表的文件类型
    -----------------------------------------------------------------------------------------------------------
       文件类型          文件扩展名                             描述
    -----------------------------------------------------------------------------------------------------------
       格式文件             .frm               包含表结构(列、列类型、索引）描述信息
    -----------------------------------------------------------------------------------------------------------
       数据文件             .MYD               包含表的数据信息
    -----------------------------------------------------------------------------------------------------------
       索引文件             .MYI               包含数据文件中任何索引的索引树，不管是否存在索引，都存在索引文件
    -----------------------------------------------------------------------------------------------------------


17.6.2 MySQL日志文件

    在MySQL服务器中，分别有【错误日志】、【通用查询日志】、【二进制日志】、【慢速查询日志】4种日志文件。

    1.错误日志文件

    错误日志文件记录了当MySQL服务器启动或停止时，以及MySQL服务器在运行过程中发生任何严重错误时的相关信息。在

/etc/my.cnf文件中可以指定log-error参数(比如log-error=/var/log/mysqld.log)来指定错误日志文件。如果log-error参数

没有指定文件名，使用错误日志名hostname.err（hostname是指计算机主机名）并在数据目录（默认是/var/lib/mysql)中写入

日志文件。

    。使用以下命令查看错误日志文件的保存路径

    -->mysql> show variables like 'log_error';
+---------------+---------------------+
| Variable_name | Value               |
+---------------+---------------------+
| log_error     | /var/log/mysqld.log |
+---------------+---------------------+
1 row in set (0.00 sec)


    2.通用查询日志

    通用查询日志文件记录客户端操作的所有SQL语句，包括SELECT查询语句在内。所有连接和语句被记录到通用查询日志文件中。

在/etc/my.cnf文件的[mysqld]部分中可以指定log参数（比如log=/var/lib/mysql/rhel.log)来指定通用查询日志文件。MySQL服务器

按照它接收的顺序记录SQL语句到通用查询日志文件。

    注意：log参数必须设置在/etc/my.cnf文件的[mysqld]部分中，否则可能不起作用。

    。查询mysql.user表

    -->mysql> select * from mysql.user;

mysql> select * from mysql.user;

| Host          | User   | Password                                  | Select_priv | Insert_priv | Update_priv | Delete_priv | Create_priv | Drop_priv | Reload_priv | Shutdown_priv | Process_priv | File_priv | Grant_priv | References_priv | Index_priv | Alter_priv | Show_db_priv | Super_priv | Create_tmp_table_priv | Lock_tables_priv | Execute_priv | Repl_slave_priv | Repl_client_priv | Create_view_priv | Show_view_priv | Create_routine_priv | Alter_routine_priv | Create_user_priv | Event_priv | Trigger_priv | ssl_type | ssl_cipher | x509_issuer | x509_subject | max_questions | max_updates | max_connections | max_user_connections |
| localhost     | root   |                                           | Y           | Y           | Y           | Y           | Y           | Y         | Y           | Y             | Y            | Y         | Y          | Y               | Y          | Y          | Y            | Y          | Y                     | Y                | Y            | Y               | Y                | Y                | Y              | Y                   | Y                  | Y                | Y          | Y            |          |            |             |              |             0 |           0 |               0 |                    0 |
| puppet-server | root   |                                           | Y           | Y           | Y           | Y           | Y           | Y         | Y           | Y             | Y            | Y         | Y          | Y               | Y          | Y          | Y            | Y          | Y                     | Y                | Y            | Y               | Y                | Y                | Y              | Y                   | Y                  | Y                | Y          | Y            |          |            |             |              |             0 |           0 |               0 |                    0 |
| 127.0.0.1     | root   |                                           | Y           | Y           | Y           | Y           | Y           | Y         | Y           | Y             | Y            | Y         | Y          | Y               | Y          | Y          | Y            | Y          | Y                     | Y                | Y            | Y               | Y                | Y                | Y              | Y                   | Y                  | Y                | Y          | Y            |          |            |             |              |             0 |           0 |               0 |                    0 |
| localhost     |        |                                           | N           | N           | N           | N           | N           | N         | N           | N             | N            | N         | N          | N               | N          | N          | N            | N          | N                     | N                | N            | N               | N                | N                | N              | N                   | N                  | N                | N          | N            |          |            |             |              |             0 |           0 |               0 |                    0 |
| puppet-server |        |                                           | N           | N           | N           | N           | N           | N         | N           | N             | N            | N         | N          | N               | N          | N          | N            | N          | N                     | N                | N            | N               | N                | N                | N              | N                   | N                  | N                | N          | N            |          |            |             |              |             0 |           0 |               0 |                    0 |
| localhost     | zabbix | *DEEF4D7D88CD046ECA02A80393B7780A63E7E789 | N           | N           | N           | N           | N           | N         | N           | N             | N            | N         | N          | N               | N          | N          | N            | N          | N                     | N                | N            | N               | N                | N                | N              | N                   | N                  | N                | N          | N            |          |            |             |              |             0 |           0 |               0 |                    0 |

6 rows in set (0.00 sec)



    。查看通用查询日志功能是否启用，以及通用查询日志文件的名称。

    -->mysql> show variables like '%general_log%';
+------------------+----------------------------------+
| Variable_name    | Value                            |
+------------------+----------------------------------+
| general_log      | ON                               |
| general_log_file | /var/lib/mysql/Puppet-server.log |
+------------------+----------------------------------+
2 rows in set (0.00 sec)


    3.二进制日志

   
    二进制日志文件记录了所有的DDL和DML的语句，但不包括SELECT查询的语句。每次重启MySQL服务都会重新生成一个二进制文件，

并且文件达到最高限度也会按顺序自动生成下一个文件。

    二进制日志以一种更有效的格式，并且是事务安全的方式包含更新日志中可用的所有信息。二进制日志包含了所有更新了数据或者

已经潜在更新了数据的所有语句。语句以“事件“的形式保存，它描述数据更改。

    二进制日志还包含关于每个更新数据库的语句的执行时间信息。它不包含没有修改任何数据的语句。二进制日志的主要目的是在恢复

时能够最大限度地更新数据库，因为二进制日志包含备份后进行的所有更新。二进制日志还用于在主复制服务器上记录所有将发送给从服务器

的语句。运行服务器时若启用二进制日志则性能大约慢1%。但是，二进制日志的好处，即用于恢复并允许设置复制超过了这个小小的性能

损失。

    在/etc/my.cnf文件的[mysqld]部分中可以指定log-bin参数（比如log-bin=/var/lib/mysql/mysqld-bin)来指定二进制日志文件，写入

包含所有更新数据的SQL命令的日志文件。

    MySQL服务器在每个二进制日志名后面添加一个数字扩展名。每次启动服务器或刷新日志时改数字则增加。如果当前的日志大小达到

max_binlog_size，还会自动创建新的二进制日志。如果正使用大的事务，二进制日志还会超过max_binlog_size。事务全写入一个二进制

日志中，绝对不要写入不同的二进制日志中。

    MySQL服务器还创建一个二进制日志索引文件，包含所有使用的二进制日志文件的文件名。默认情况下与二进制日志文件的文件名相同，

扩展名为".index"。可以在/etc/my.cnf文件的[mysqld]部分中指定log-bin-index参数（比如log-bin-index=/var/lib/mysql/mysqld-bin)

来更改二进制日志索引文件的文件名。

    二进制日志文件通常比较大，可以在/etc/my.cnf文件的[mysqld]部分中指定expire_logs_days参数（比如：expire_logs_days=5)来设置

二进制日志文件的过期时间。这样MySQL服务器就会自动删除到期的日志文件，节省磁盘空间。

    。查看是否启用了二进制日志

    -->mysql> show variables like 'log_bin';
+---------------+-------+
| Variable_name | Value |
+---------------+-------+
| log_bin       | OFF   |
+---------------+-------+
1 row in set (0.00 sec)

    -->vim /etc/my.cnf

[mysqld]
log-bin=/var/lib/mysql/mysqld-bin

    -->service mysqld restart

    -->mysql -uroot -p

    -->mysql>show variables like 'log_bin';
+---------------+-------+
| Variable_name | Value |
+---------------+-------+
| log_bin       | ON    |
+---------------+-------+
1 row in set (0.00 sec)

    
    -->mysql> use www;

    -->mysql> insert into table1 values(1,'zhangsan');

    Query OK, 1 row affected (0.00 sec)
    
   
    。查看所有二进制日志文件列表

    -->mysql> show binary logs;
+-------------------+-----------+
| Log_name          | File_size |
+-------------------+-----------+
| mysqld-bin.000001 |       125 |
| mysqld-bin.000002 |       394 |
+-------------------+-----------+
2 rows in set (0.01 sec)


    使用以下命令回放日志事件

    -->mysql> show binlog events;
+-------------------+-----+-------------+-----------+-------------+---------------------------------------+
| Log_name          | Pos | Event_type  | Server_id | End_log_pos | Info                                  |
+-------------------+-----+-------------+-----------+-------------+---------------------------------------+
| mysqld-bin.000001 |   4 | Format_desc |         1 |         106 | Server ver: 5.1.73-log, Binlog ver: 4 |
| mysqld-bin.000001 | 106 | Stop        |         1 |         125 |                                       |
+-------------------+-----+-------------+-----------+-------------+---------------------------------------+
2 rows in set (0.00 sec)


    二进制日志需要使用mysqlbinlog命令来查看，该日志里面记录着所有的DDL和DML语句。

    -->mysqlbinlog /var/lib/mysql/mysqld-bin.000001 

/*!40019 SET @@session.max_insert_delayed_threads=0*/;
/*!50003 SET @OLD_COMPLETION_TYPE=@@COMPLETION_TYPE,COMPLETION_TYPE=0*/;
DELIMITER /*!*/;
# at 4
#150726 22:01:18 server id 1  end_log_pos 106 	Start: binlog v 4, server v 5.1.73-log created 150726 22:01:18 at startup
ROLLBACK/*!*/;
BINLOG '
Lui0VQ8BAAAAZgAAAGoAAAAAAAQANS4xLjczLWxvZwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAu6LRVEzgNAAgAEgAEBAQEEgAAUwAEGggAAAAICAgC
'/*!*/;
# at 106
#150726 22:03:41 server id 1  end_log_pos 125 	Stop
DELIMITER ;
# End of log file
ROLLBACK /* added by mysqlbinlog */;
/*!50003 SET COMPLETION_TYPE=@OLD_COMPLETION_TYPE*/;


    4.慢速查询日志

    慢速查询日志文件对于跟踪有问题的查询非常有用，可以分析出当前程序汇总非常耗费资源的SQL语句。在默认情况下MySQL服务器是禁用

慢速查询日志的，在/etc/my.cnf文件的[mysqld]部分中可以指定slow_query_log=ON来启用。在/etc/my.cnf文件的[mysqld]部分中可以指定

log-slow-queries参数（比如log-slow-queries=/var/lib/mysql/slowquery.log)来指定慢速查询日志文件，MySQL服务器写入一个包含所有

执行时间超过long_query_time（比如long_query_time=1，表示查询超过一秒才记录）的SQL语句的日志文件。获得初始表锁定的时间不算作

执行时间。

    语句执行完并且所有锁释放后计入慢速查询日志，记录顺序可以与执行顺序不同。慢速查询日志可以用来找到执行时间长的查询，可以用于

优化SQL语句。但是检查又长又慢的查询日志会很困难。要想容易些，可以使用mysqldumpslow命令获得日志中显示的查询摘要来处理慢速查询

日志。用查询缓存处理的查询不加到慢速查询日志中，因为表有零行或一行而不能从索引中受益的查询也不写入慢速查询日志。


    。使用以下命令查询执行时间超过多少秒的查询是慢速查询：

     -->mysql> show variables like 'long_query_time';

+-----------------+-----------+
| Variable_name   | Value     |
+-----------------+-----------+
| long_query_time | 10.000000 |
+-----------------+-----------+
1 row in set (0.00 sec)

    。使用以下命令查看是否启用慢速查询日志，以及慢速查询日志文件的名称

    -->mysql> show variables like '%slow_query_log%';
+---------------------+---------------------------------+
| Variable_name       | Value                           |
+---------------------+---------------------------------+
| slow_query_log      | OFF                             |
| slow_query_log_file | /var/run/mysqld/mysqld-slow.log |
+---------------------+---------------------------------+
2 rows in set (0.00 sec)

    -->vim /etc/my.cnf

[mysqld]
log-slow-queries=/var/lib/mysql/slowquery.log

    -->service mysqld restart

Stopping mysqld:                                           [  OK  ]
Starting mysqld:                                           [  OK  ]


    -->mysql -uroot -p

    -->mysql> show variables like '%slow_query_log%';
+---------------------+------------------------------+
| Variable_name       | Value                        |
+---------------------+------------------------------+
| slow_query_log      | ON                           |
| slow_query_log_file | /var/lib/mysql/slowquery.log |
+---------------------+------------------------------+
2 rows in set (0.00 sec)


    如果慢速查询日志记录的内容很多，可以使用mysqldumpslow进行分类汇总。

输入以下命令：

    -->mysqldumpslow /var/lib/mysql/slowquery.log 

Reading mysql slow query log from /var/lib/mysql/slowquery.log
Count: 1  Time=0.00s (0s)  Lock=0.00s (0s)  Rows=0.0 (0), 0users@0hosts
  

    参数：

    。Count:1  表示出现次数

    。Time=0.00s 表示执行最长时间。 累计总耗费时间(Time)

    。Lock=0.00s(0s) 表示等待所的时间。

    。Rows=0.0(0) 表示发送给客户端的行总数，扫描的行总数(Rows)

    。Users:用户

    以及SQL语句本身。

17.7 MySQL数据库备份和恢复

17.7.1 mysqldump备份数据库

    使用mysqldump命令可以备份MySQL数据库和表的结构及内容：

    命令语法：

    mysqldump [选项] [数据库[表]]

                                      
                                        mysqldump命令选项含义
    -------------------------------------------------------------------------------------------------
         选项                                                 选项含义
    -------------------------------------------------------------------------------------------------
         -A                                 备份所有的数据库
    -------------------------------------------------------------------------------------------------
         -Y                                 备份所有的表空间
    -------------------------------------------------------------------------------------------------
         --add-drop-database                在每一个CREATE DATABASE语句前面添加上DROP DATABASE语句
    -------------------------------------------------------------------------------------------------
         --add-drop-table                   在每一个CREATE TABLE语句前面添加上DROP TABLE语句
    -------------------------------------------------------------------------------------------------
         --add-locks                        围绕INSERT语句添加锁
    -------------------------------------------------------------------------------------------------
         --B                                一次导出多个数据库，需要指定数据库列表
    -------------------------------------------------------------------------------------------------
         -f                                 即使发生SQL错误仍然导出操作
    -------------------------------------------------------------------------------------------------
         --default-character-set=<字符集>   指定默认字符集
    -------------------------------------------------------------------------------------------------
         -x                                  锁定所有数据库中的所有表
    -------------------------------------------------------------------------------------------------
         -i                                  写入附加信息
    -------------------------------------------------------------------------------------------------
         -l                                  导出之前先锁住需要导出的表，保证导出数据表之间的一致性。
    -------------------------------------------------------------------------------------------------
         --tables                            覆盖-B选项
    -------------------------------------------------------------------------------------------------
         -F                                  在服务器开始备份前刷新日志文件
    -------------------------------------------------------------------------------------------------
         --ignore-table=<表>                 不备份指定的表。指定忽略多个表，使用多次命令，一次一个表。
                                             每个表必须要指定数据库和表名。
    -------------------------------------------------------------------------------------------------
         -n                                  在备份数据库时进制CREATE DATABASE ...IF EXISTS语句
    -------------------------------------------------------------------------------------------------
         -t                                  在导出操作中不导出CREATE TABLE建表语句。
    -------------------------------------------------------------------------------------------------
         -d                                  在导出操作中不导出数据。
    -------------------------------------------------------------------------------------------------
         -p <密码>                           指定连接到MySQL服务器时使用的密码
    -------------------------------------------------------------------------------------------------
         -P <端口>                           指定用于连接的端口号
    -------------------------------------------------------------------------------------------------
         -C                                  在服务器/客户端协议中使用压缩
    -------------------------------------------------------------------------------------------------
         -h <主机名>                         连接到指定主机
    -------------------------------------------------------------------------------------------------
         -u <用户名>                         使用指定用户进行登录
    -------------------------------------------------------------------------------------------------
         -v                                  显示详细信息
    -------------------------------------------------------------------------------------------------
         -y                                   不要备份任何表空间信息
    -------------------------------------------------------------------------------------------------
         -c                                   使用完整插入语句
    -------------------------------------------------------------------------------------------------
         --delete-master-logs                 备份后在主服务器上删除日志
    -------------------------------------------------------------------------------------------------
         -e                                   使用多行INSERT语法，其中包括几个VALUES列表
    -------------------------------------------------------------------------------------------------
         -d                                   没有行信息
    -------------------------------------------------------------------------------------------------
         --triggers                           为每个备份的表备份触发器
    -------------------------------------------------------------------------------------------------
         --protocol=<协议>                    指定连接使用协议，可以是tcp、socker、pipe或memory
    -------------------------------------------------------------------------------------------------
         -X                                    备份数据库格式为XML
    -------------------------------------------------------------------------------------------------

     例17.65 备份所有数据库

     -->mysqldump -A > alldatabase.sql

       Warning: Skipping the data of table mysql.event. Specify the --events option explicitly


原因分析:

    由于mysql在全量导出时不导出event事件表,故需要在全量导出时忽略事件表

解决办法:


     -->mysqldump -A --events ignore-tables -uroot -pyhq845541 > all_database.sql


     -->ls all_database.sql 

        all_database.sql


     -->du -sh all_database.sql 

        4.0K	all_database.sql


    例17.66 备份数据库www

    -->mysqldump -B www -uroot -p > www_exp.sql
       Enter password: 
    
    例17.67 同时备份数据库ww1和www2

    -->mysqldump -B www1 www2 -uroot -p > www1_2_exp.sql

    例17.68备份数据库www1中的表table1

    -->mysqldump www table1 -uroot -p > table1_exp.sql
       Enter password: 

    例17.69 以gzip压缩的方式备份数据库www

    -->mysqldump www |gzip > www.sql.gz

    或：

    -->mysqldump www -uroot -p |gzip > www.sql.gz


17.7.2 恢复数据库

    使用mysqldump命令备份的数据库和表，可以使用mysql命令和source命令来护肤

    1.使用mysql命令恢复数据库

    例17.70 恢复数据库www

    -->mysql> drop database www;

       Query OK, 1 row affected (0.00 sec)

    -->mysql> create database www;

       Query OK, 1 row affected (0.00 sec)

    -->mysql www -uroot -p  <  www_exp.sql   #导入

    。查看

     -->mysql> use www;

Reading table information for completion of table and column names
You can turn off this feature to get a quicker startup with -A

Database changed

    -->mysql> show tables;

+---------------+
| Tables_in_www |
+---------------+
| table1        |
+---------------+
1 row in set (0.00 sec)


    例17.71 恢复使用gzip压缩的数据库www

    -->gzip -d < www.sql.gz | mysql www 

    例17.72 恢复数据库www

    -->mysql -e "source /root/www.sql" www


    2.使用source命令恢复数据库

    使用source命令可以导入SQL文件，包括使用mysqldump命令备份数据库生成的SQL文件

    例17.73 恢复数据库www

    -->mysql> source /root/www.sql

17.7.3  mysqlhotcopy数据库备份

    使用mysqlhotcopy命令可以进行MySQL数据库备份，它使用FLUSH TABLES、LOCK 、TABLES

和cp或scp来进行数据库备份，这是一种快速来备份数据库或表的犯法，仅用于备份MyISAM和

ARCHIVE表。

    命令语法：

    mysqlhotcopy [选项] 数据库名 [./匹配表的正则表达式/] [新数据库名|目录]

                                mysqlhotcopy命令选项含义
    ----------------------------------------------------------------------------------------
         选项                                       选项含义
    ----------------------------------------------------------------------------------------
        -u<用户>                           指定数据库登录的用户
    ----------------------------------------------------------------------------------------
        -p<密码>                           连接到服务器时使用的密码
    ----------------------------------------------------------------------------------------
        -h<主机名>                         以TCP/IP连接到本地服务器的主机名
    ----------------------------------------------------------------------------------------
        -P<端口>                           以TCP/IP连接到本地服务器时使用的端口
    ----------------------------------------------------------------------------------------
        -q                                 安静沉默
    ----------------------------------------------------------------------------------------
        --flushlog                         一旦所有的表都被锁定就刷新日志
    ----------------------------------------------------------------------------------------、 
        --regexp=<正则表达式>              使用匹配指定正则表达式的名称复制所有数据库
    ----------------------------------------------------------------------------------------
        --suffix=<后缀>                    为复制数据库的名称指定后缀
    ----------------------------------------------------------------------------------------
        --checkpint=<数据库.表>            插入检查点条目进入指定数据库和表
    ----------------------------------------------------------------------------------------
        --addtodest                        如果存在则不重命名目标目录，只需添加文件
    ----------------------------------------------------------------------------------------
        --noindices                        在复制中不包括全部索引文件
    ----------------------------------------------------------------------------------------
        --resetmaster                      一旦所有的表都被锁定，就重置binlog
    ----------------------------------------------------------------------------------------
        --resetslave                       一旦所有的表都被锁定，就重置master.info
    ----------------------------------------------------------------------------------------
        --method=<方法>                    指定复制方法
    ----------------------------------------------------------------------------------------

    例17.74 备份数据库www到/root目录下

    -->mysqlhotcopy www /root/

Locked 1 tables in 0 seconds.
Flushed tables (`www`.`table1`) in 0 seconds.
Copying 4 files...
Copying indices for 0 files...
Unlocked tables.
mysqlhotcopy copied 1 tables (4 files) in 0 seconds (0 seconds overall).

    查看：

    -->ls www

    db.opt  table1.frm  table1.MYD  table1.MYI


    例17.75  备份数据库www为数据库abc

    -->mysqlhotcopy www abc

Locked 1 tables in 0 seconds.
Flushed tables (`www`.`table1`) in 0 seconds.
Copying 4 files...
Copying indices for 0 files...
Unlocked tables.
mysqlhotcopy copied 1 tables (4 files) in 0 seconds (0 seconds overall).


    -->mysqlshow        或：mysqlshow -uroot -p
+--------------------+
|     Databases      |
+--------------------+
| information_schema |
| abc                |
| mysql              |
| test               |
| www                |
| zabbix             |
+--------------------+


    例17.76 备份数据库www中匹配以t开头的表到root目录下

    -->mysqlhotcopy www./t/ root

Locked 1 tables in 0 seconds.
Flushed tables (`www`.`table1`) in 0 seconds.
Copying 3 files...
Copying indices for 0 files...
Unlocked tables.
mysqlhotcopy copied 1 tables (3 files) in 0 seconds (0 seconds overall).

    -->ls www/

db.opt  table1.frm  table1.MYD  table1.MYI


17.8 用户管理

17.8.1 创建用户

    在MySQL服务器中创建用户可以有两种方法：

    第一种方法：使用CREAE USER语句创建用户；

    第二种方法：直接使用INSERT INTO语句向数据库mysql中的user表插入数据，然后使用FLUSH PRIVILEGES

语句重载授权表，以达到创建用户的效果。

    1.CREATE USER语句

    注意：在指定用户名称的时候可以指定两部分内容，即用户名和连接主机，分别对应mysql.user表的User和

Host列的值。比如mysql_1@'192.168.1.102',表示mysql_1用户在主机192.168.1.102连接MySQL服务器，连接主机

部分需要使用单引号引起来，而用户名部分可以不使用单引号。

     SQL语法：

     CREATE USER user [IDENTIFIED BY 'password']

     例17.77 创建用户mysql_1，并为其设置密码

     -->mysql> create user mysql_1 identified by 'redhat';

        Query OK, 0 rows affected (0.00 sec)

     -->mysql> select host,user,password from mysql.user where user='mysql_1';
+------+---------+-------------------------------------------+
| host | user    | password                                  |
+------+---------+-------------------------------------------+
| %    | mysql_1 | *84BB5DF4823DA319BBF86C99624479A198E6EEE9 |
+------+---------+-------------------------------------------+
1 row in set (0.02 sec)


    2.INSERT INTO语句

    mysql.user表中的Host列如果是localhost，表示该用户只能在MySQL服务器上本地登录；如果是"%"，表示该用户

可以在任何主机上连接并登录到MySQL服务器。

    注意：如果不使用FLUSH PRIVILEGES语句重载授权表，那么所创建的用户无法登录MySQL服务器。

    例17.79 创建用户mysql_2@'localhost'，密码为redhat

    -->mysql> insert into mysql.user(Host,User,Password)
       values('localhost','mysql_2',PASSWORD('redhat'));

       Query OK, 1 row affected, 3 warnings (0.00 sec)

    -->mysql> flush privileges;
       Query OK, 0 rows affected (0.00 sec)

    -->mysql> select host,user,password from mysql.user where user='mysql_2';
+-----------+---------+-------------------------------------------+
| host      | user    | password                                  |
+-----------+---------+-------------------------------------------+
| localhost | mysql_2 | *84BB5DF4823DA319BBF86C99624479A198E6EEE9 |
+-----------+---------+-------------------------------------------+
1 row in set (0.00 sec)

    或者：

    -->mysql> select user from user;



    例17.80 创建用户mysql_3@'localhost',密码为redhat，并授予 select和create权限。

    -->mysql> insert into mysql.user(host,user,password,select_priv,create_priv)
       values('localhost','mysql_3',password('redhat'),'Y','Y');

       Query OK, 1 row affected, 3 warnings (0.00 sec)

    -->mysql> flush privileges;
       Query OK, 0 rows affected (0.00 sec)


    -->mysql> select host,user,password,select_priv,create_priv from mysql.user where user='mysql_3';
+-----------+---------+-------------------------------------------+-------------+-------------+
| host      | user    | password                                  | select_priv | create_priv |
+-----------+---------+-------------------------------------------+-------------+-------------+
| localhost | mysql_3 | *84BB5DF4823DA319BBF86C99624479A198E6EEE9 | Y           | Y           |
+-----------+---------+-------------------------------------------+-------------+-------------+
1 row in set (0.00 sec)


17.8.2 设置用户密码

    介绍2种：

    第一种：使用SET PASSWORD语句设置用户密码。

    第二种：直接使用UPDATE语句更新mysql.user表password列的数据，然后使用FLUSH PRIVILEGES语句重载

授权表，以达到设置用户密码的效果。

    1.SET PASSWORD语句

    SQL语法：

    SET PASSWORD=PASSWORD('some password')

    SET PASSWORD FOR user=PASSWORD('some password')


    第一个SQL语法为当前用户设置密码。已使用一个非匿名账户连接到服务器上的任何用户都可以更改该账户的

密码。

    第二个语法为当前MySQL服务器上的一个特定账户设置密码。只有拥有数据库mysql的UPDATE权限的客户端可以

这么做。user值应以user_name@host_name的格式被指定，这里的user_name和host_name与mysql.user表的User和

Host列中列出的完全一样。

    例17.82 更改用户mysql_1@‘%'的密码

    -->mysql> set password for mysql_1@'%'=password('linux');

       Query OK, 0 rows affected (0.00 sec)


    2.UPDATE语句

    使用UPDATE语句更新mysql.user表password列的数据，然后使用FLUSH PRIVILEGES语句重载授权表也可以达到

设置用户密码的效果。

    例17.83 更改用户mysql_2@'%'的密码

    -->mysql> update mysql.user set password=password('linux')
              where user='mysql_2' and host='%';

       Query OK, 0 rows affected (0.00 sec)
       Rows matched: 0  Changed: 0  Warnings: 0

    -->mysql> flush privileges;

       Query OK, 0 rows affected (0.00 sec)


17.8.3 重命名用户名

    RENAME USER语句用于对原有MySQL用户进行重命名。要使用RENAME USER语句，必须拥有全局CREATE USER权限

或mysql数据库UPDATE权限。如果旧用户不存在或者新用户已存在，则会出现错误。

    SQL语法：

    RENAME USER old_user TO new_user
    [,old_user TO new_user]


    例17.84 将用户mysql_1重命名为mysql_4

    -->mysql> rename user mysql_1 to mysql_4;

       Query OK, 0 rows affected (0.00 sec)


    例17.85 将用户mysql_2重命名为mysql_5@'%'

    -->mysql> rename user mysql_2@'localhost' to mysql_5@'%';

      Query OK, 0 rows affected (0.00 sec)


17.8.4 删除用户

    DROP USER语句用于删除MySQL用户账户。要使用DROP USER，必须拥有数据库mysql的全局CREATE USER权限

或DELETE权限。使用GRANT或REVOKE相同的格式为每个账户命名，比如zhangsan@'localhost'。

    账户名称的用户和主机部分与用户表记录的User和Host列值相对应。该语句可以删除来自所有授权表的账户权限

记录。

    SQL语法：

    DROP USER user

    注意：DROP USER不能自动关闭任何打开的用户对话。如果用户有打开的对话，此时取消用户，则命令不会生效，

直到用户对话被关闭后才生效。一旦对话被关闭，用户也被取消，此用户再次试图登录时将会失败。

    例17.86 删除用户myql_2

    -->drop user myql_2;
  
       Query OK, 0 rows affected (0.00 sec)


17.9 权限管理

17.9.1 权限简介

    MySQL数据库中的权限系统可以用于管理和控制用户在某一主机上使用某一用户和密码是否能连接到指定的MySQL

服务器、打开指定的数据库、对表中的数据进行查询和操作（SELECT、INSERT、UPDATE或DELETE）

    MySQL存取控制包含以下两个阶段：

    。阶段1：服务器检查是否允许连接。

    。阶段2：假如能够连接，服务器检查发出的每个请求，查看是否有足够的权限来试试。

      比如从表中选择（SELECT)行或从数据库删除表，服务器确定对表有SELECT权限或对数据库有DROP权限。

    1.授权表

    在MySQL服务器中使用以下授权表

   （1）user表

    user表范围列决定是否允许或拒绝到来的的连接。对于允许的连接，user表授予的权限指出用户的全局

（超级用户）权限。这些权限适用于服务器上的所有数据库。

   （2）db表

    db表范围列决定用户能从哪个主机存取哪个数据库。权限列决定允许哪个操作。授予的数据库级别的权限

适用于数据库和它的表。

    当想要一个指定的db表行应用于若干主机时，db和host表一起使用。如果想要一个用户能在网络中从若干

主机使用一个数据库，在用户的db表行的Host值设为空值，然后将那些主机的每一个移入host表。

   （3）tables_priv和columns_priv表

    tables_priv和columns_priv表类似于db表，它们在表和列级应用而非在数据库级。授予表级别的权限适用于

表和它的所有列。授予列级别的权限只适用于专用列。

   （4）procs_priv表

    procs_priv表适用于保存的程序。授予程序级别的权限只适用于单个程序。


    在每一个授权表中，包含了【范围列】和【权限列】两部分内容。

    （1）范围列

    决定表中每个条目（行）的范围，即行适用的上下文，比如一个user表行的Host和User值为'linux'和'zhangsan'，

将被用于证实来自主机linux的zhangsan对服务器的连接。一个db表行的Host、User和Db列的值是'linux'、'zhangsan'

和'www'将用在zhangsan从主机linux联接访问数据库www的时候。tables_priv和columns_priv表包含范围列，指出每个

行适用的表或表/列的组合。procs_priv范围列指出每个行适用的保存程序。对于检查存取的用途，Host值是忽略大小

写的。User、Password、Db和Table_name值是区分大小写的，Column_name值是忽略大小写的。

                                  Host和User列的值组合
    ------------------------------------------------------------------------------------------------
      Host值                       User值                     被条目匹配的连接
    ------------------------------------------------------------------------------------------------
      'linux.sh.com'              'zhangsan'      用户zhangsan从主机linux.sh.com连接
    ------------------------------------------------------------------------------------------------
      'linux.sh.com'              ''              任何用户从主机linux.sh.com连接
    ------------------------------------------------------------------------------------------------
      '%'                         'zhangsan'      用户zhangsan从任何主机连接
    ------------------------------------------------------------------------------------------------
      '%'                         ''              任何用户从任何主机连接       
    ------------------------------------------------------------------------------------------------
      '%.sh.com'                  'zhangsan'      用户zhangsan从sh.com域的任何主机连接
    ------------------------------------------------------------------------------------------------
      'x.y.%'                     'zhangsan'      用户zhangsan从x.y.net、x.y.com、x.y.edu等主机连接
    ------------------------------------------------------------------------------------------------
      '192.168.0.5'               'zhangsan'      用户zhangsan从主机192.168.0.5连接
    ------------------------------------------------------------------------------------------------
      '192.168.0.%'               'zhangsan'      用户zhangsan从192.168.0.0子网的任何主机连接
    ------------------------------------------------------------------------------------------------

    (2)权限表

    指出由一个表行授予的权限，即可以实施什么操作。服务器组合各种的授权表的信息形成一个用户权限的完整描述。

    2.MySQL权限

    用户权限信息被存储在mysql数据库的user、db、host、tables_priv、columns_priv和procs_priv表中。在MySQL

服务器启动时并在权限更改生效时，服务器将这些表内容读入内存。

                                 MySQL权限
    --------------------------------------------------------------------------------------------------------------
       权限                  列名                              含义
    --------------------------------------------------------------------------------------------------------------
      SELECT                 select_priv                     查询数据
    --------------------------------------------------------------------------------------------------------------
      INSERT                 insert_pirv                     插入数据
    --------------------------------------------------------------------------------------------------------------
      UPDATE                 update_pirv                     更新数据
    --------------------------------------------------------------------------------------------------------------
      DELETE                 delete_pirv                     删除数据
    --------------------------------------------------------------------------------------------------------------
      CREATE                 create_pirv                     创建数据库和表
    --------------------------------------------------------------------------------------------------------------
      ALIER                  alter_pirv                      修改表
    --------------------------------------------------------------------------------------------------------------
      DROP                   drop_pirv                       删除数据库、表和视图
    --------------------------------------------------------------------------------------------------------------
      INDEX                  index_pirv                      创建和删除索引
    --------------------------------------------------------------------------------------------------------------
      FILE                   file_pirv                       执行SELETE INTO OUTFILE和LOAO DATA INFILE命令载入文件
    --------------------------------------------------------------------------------------------------------------
      RELOAD                 reload_priv                     刷新和重新加载mysql所用的各种内部缓存的特定命令，包括
                                                             日志、权限、主机、查询和表
    --------------------------------------------------------------------------------------------------------------
      SHUTDOWN               shutdown_priv                   关闭mysql服务器
    --------------------------------------------------------------------------------------------------------------
      PROCESS                process_priv                    显示连接进程和中断连接进程
    --------------------------------------------------------------------------------------------------------------
      CREATE USER            create_user_priv                创建、删除和重命名用户
    --------------------------------------------------------------------------------------------------------------
      EXECUTE                execute_priv                    执行函数或存储过程
    --------------------------------------------------------------------------------------------------------------
      LOCK TABLES            Lock_tables_priv                锁定表，防止其他会话读取锁定的表
    --------------------------------------------------------------------------------------------------------------
      SHOW DATABASES         show_db_priv                    显示数据库
    --------------------------------------------------------------------------------------------------------------
      CREATE ROUTINE         create_routine_priv             创建存储过程和函数
    --------------------------------------------------------------------------------------------------------------
      ALTER ROUTINE          alter_routine_priv              修改或删除存储过程和函数     
    --------------------------------------------------------------------------------------------------------------
      REPLICATION SLAVE      repl_slave_priv                 在复制环境汇总，允许从服务器连接到作为主服务器的当前
                                                             服务器。如果没有这种权限，从服务器不能要求主服务器上
                                                             的数据库更新。
    --------------------------------------------------------------------------------------------------------------
      REPLICATION CLIENT     repl_client_priv                在复制环境中显示主服务器和从服务器的状态
    --------------------------------------------------------------------------------------------------------------
      GRANT OPTION           grant_priv                      将自己拥有的权限再授予给其它用户。
    --------------------------------------------------------------------------------------------------------------
      SUPER                  super_priv                      执行某些强大的管理功能，比如通过KILL命令删除用户进程，
                                                             使用SET GLOBAL修改全局MySQL变量，执行关于复制和日志的
                                                             各种命令。
    --------------------------------------------------------------------------------------------------------------
      CREATE TEMPORARY       create_tmp_table_priv           创建临时表
      TABLES
    --------------------------------------------------------------------------------------------------------------
      TRIGGER                trigger_priv                    创建和删除触发器
    -------------------------------------------------------------------------------------------------------------- 
      EVENT                  event_priv                      创建、修改和删除事件
    --------------------------------------------------------------------------------------------------------------
      USAGE                                                  只有登录权限，其他权限都没有
    --------------------------------------------------------------------------------------------------------------
      ALL[PRIVILEGES]                                        授予所有权限，除了GRANT OPTION
    --------------------------------------------------------------------------------------------------------------


17.9.2   授予权限

    要授予用户权限，可以通过GRANT语句和UPDATE语句来实现。

    1、GRANT语句

    GRANT语句允许数据库管理员授予用户权限。如果加上WITH GRANT OPTION子句给予用户能力，可以在指定的权限层级，向其他

用户授予自己拥有的任何权限。 使用GRANT授予用户权限的时候，如果不存在该用户，则会创建用户。  

    
    GRANT授权的权限作用对象如下：

                                                    权限作用对象
    ------------------------------------------------------------------------------------------------------------
       权限作用对象                                     描述
    ------------------------------------------------------------------------------------------------------------
         *.*                              表示所有数据库和数据库中的表
    ------------------------------------------------------------------------------------------------------------
         *                                表示当前数据库的所有表
    ------------------------------------------------------------------------------------------------------------
         数据库.*                         表示某个数据库中的所有表，比如www.*
    ------------------------------------------------------------------------------------------------------------
         数据库.表                        表示某个数据库中的某个表，比如www.table1
    ------------------------------------------------------------------------------------------------------------
         数据库                           表示某个数据库，比如www
    ------------------------------------------------------------------------------------------------------------

                                                    指定访问主机
    ------------------------------------------------------------------------------------------------------------
             举例                                      描述
    ------------------------------------------------------------------------------------------------------------
              %                           匹配所有主机
    ------------------------------------------------------------------------------------------------------------
              %.sh.com                    匹配sh.com域的所有主机
    ------------------------------------------------------------------------------------------------------------
             空值                         等价于%
    ------------------------------------------------------------------------------------------------------------
             192.168.0.5                  IP地址
    ------------------------------------------------------------------------------------------------------------   
             192.168.0.%                  192.168.0.0子网的任何主机 
    ------------------------------------------------------------------------------------------------------------
             192.168.0.0/255.255.255.0    192.168.0.0子网的任何主机
    ------------------------------------------------------------------------------------------------------------
             x.y.%                        x.y.net   x.y.com、 x.y.edu等域内的主机
    ------------------------------------------------------------------------------------------------------------
             linux                        主机名
    ------------------------------------------------------------------------------------------------------------
             linux.sh.com                 主机域名
    ------------------------------------------------------------------------------------------------------------
             localhost                    本地主机
    ------------------------------------------------------------------------------------------------------------

    例17.87 授予用户zhangsan@'localhost'在所有数据库上面具有所有的权限，并设置密码

    -->mysql> grant all privileges on *.* to zhangsan@'localhost'
              identified by 'redhat' with grant option;

              Query OK, 0 rows affected (0.00 sec)


    例17.88 授予用户zhangsan@'%'在所有数据库上面具有的权限，并设置密码

    -->mysql> grant all privileges on *.* to zhangsan@'%'
              identified by 'redhat' with grant option;

              Query OK, 0 rows affected (0.13 sec)

    例17.89 授予用户zhangsan@'localhost'在数据库www上面具有SELECT、INSERT、UPDATE、DELETE、CREATE和DROP

权限，并设置密码。

    -->mysql> grant select,insert,update,delete,create,drop
    -> on www.*
    -> to zhangsan@'localhot'
    -> identified by 'redhat';

    Query OK, 0 rows affected (0.00 sec)


    例17.90 授予用户zhangsan@'localhost'在所有数据库上面具有RELOAD和PROCESS权限。

    -->mysql> grant reload,process on *.* to zhangsan@'localhost';

       Query OK, 0 rows affected (0.00 sec)


    例17.1 授予用户zhangsan@'localhost'在所有数据库上面具有USAGE权限

    -->mysql> grant usage on *.* to zhangsan@'localhost';

    Query OK, 0 rows affected (0.00 sec)


    2.UPDATE语句
    
    使用UPDATE语句更新mysql.user表的权限列的数据，然后使用FLUSH PRIVILEGES语句

重载授权表也可以达到授予用户权限的效果。

    例17.92 为用户mysql_1@'%'授予SELECT权限
 
    -->mysql> select * from user;

| Host          | User     | Password                                  | Select_priv | Insert_priv | Update_priv | Delete_priv | Create_priv | Drop_priv | Reload_priv | Shutdown_priv | Process_priv | File_priv | Grant_priv | References_priv | Index_priv | Alter_priv | Show_db_priv | Super_priv | Create_tmp_table_priv | Lock_tables_priv | Execute_priv | Repl_slave_priv | Repl_client_priv | Create_view_priv | Show_view_priv | Create_routine_priv | Alter_routine_priv | Create_user_priv | Event_priv | Trigger_priv | ssl_type | ssl_cipher | x509_issuer | x509_subject | max_questions | max_updates | max_connections | max_user_connections |

| localhost     | root     |                                           | Y           | Y           | Y           | Y           | Y           | Y         | Y           | Y             | Y            | Y         | Y          | Y               | Y          | Y          | Y            | Y          | Y                     | Y                | Y            | Y               | Y                | Y                | Y              | Y                   | Y                  | Y                | Y          | Y            |          |            |             |              |             0 |           0 |               0 |                    0 |
| puppet-server | root     |                                           | Y           | Y           | Y           | Y           | Y           | Y         | Y           | Y             | Y            | Y         | Y          | Y               | Y          | Y          | Y            | Y          | Y                     | Y                | Y            | Y               | Y                | Y                | Y              | Y                   | Y                  | Y                | Y          | Y            |          |            |             |              |             0 |           0 |               0 |                    0 |
| 127.0.0.1     | root     |                                           | Y           | Y           | Y           | Y           | Y           | Y         | Y           | Y             | Y            | Y         | Y          | Y               | Y          | Y          | Y            | Y          | Y                     | Y                | Y            | Y               | Y                | Y                | Y              | Y                   | Y                  | Y                | Y          | Y            |          |            |             |              |             0 |           0 |               0 |                    0 |
| localhost     |          |                                           | N           | N           | N           | N           | N           | N         | N           | N             | N            | N         | N          | N               | N          | N          | N            | N          | N                     | N                | N            | N               | N                | N                | N              | N                   | N                  | N                | N          | N            |          |            |             |              |             0 |           0 |               0 |                    0 |
| puppet-server |          |                                           | N           | N           | N           | N           | N           | N         | N           | N             | N            | N         | N          | N               | N          | N          | N            | N          | N                     | N                | N            | N               | N                | N                | N              | N                   | N                  | N                | N          | N            |          |            |             |              |             0 |           0 |               0 |                    0 |
| localhost     | zabbix   | *DEEF4D7D88CD046ECA02A80393B7780A63E7E789 | N           | N           | N           | N           | N           | N         | N           | N             | N            | N         | N          | N               | N          | N          | N            | N          | N                     | N                | N            | N               | N                | N                | N              | N                   | N                  | N                | N          | N            |          |            |             |              |             0 |           0 |               0 |                    0 |
| %             | mysql_4  | *6F3CAE7C3BBB2A5B5D933738682953BC21AEBEE7 | N           | N           | N           | N           | N           | N         | N           | N             | N            | N         | N          | N               | N          | N          | N            | N          | N                     | N                | N            | N               | N                | N                | N              | N                   | N                  | N                | N          | N            |          |            |             |              |             0 |           0 |               0 |                    0 |
| %             | z1       | *6F3CAE7C3BBB2A5B5D933738682953BC21AEBEE7 | N           | N           | N           | N           | N           | N         | N           | N             | N            | N         | N          | N               | N          | N          | N            | N          | N                     | N                | N            | N               | N                | N                | N              | N                   | N                  | N                | N          | N            |          |            |             |              |             0 |           0 |               0 |                    0 |
| localhost     | mysql_3  | *84BB5DF4823DA319BBF86C99624479A198E6EEE9 | Y           | N           | N           | N           | Y           | N         | N           | N             | N            | N         | N          | N               | N          | N          | N            | N          | N                     | N                | N            | N               | N                | N                | N              | N                   | N                  | N                | N          | N            |          |            |             |              |             0 |           0 |               0 |                    0 |
| localhost     | zhangsan | *84BB5DF4823DA319BBF86C99624479A198E6EEE9 | Y           | Y           | Y           | Y           | Y           | Y         | Y           | Y             | Y            | Y         | Y          | Y               | Y          | Y          | Y            | Y          | Y                     | Y                | Y            | Y               | Y                | Y                | Y              | Y                   | Y                  | Y                | Y          | Y            |          |            |             |              |             0 |           0 |               0 |                    0 |
| %             | zhangsan | *84BB5DF4823DA319BBF86C99624479A198E6EEE9 | Y           | Y           | Y           | Y           | Y           | Y         | Y           | Y             | Y            | Y         | Y          | Y               | Y          | Y          | Y            | Y          | Y                     | Y                | Y            | Y               | Y                | Y                | Y              | Y                   | Y                  | Y                | Y          | Y            |          |            |             |              |             0 |           0 |               0 |                    0 |
| localhot      | zhangsan | *84BB5DF4823DA319BBF86C99624479A198E6EEE9 | N           | N           | N           | N           | N           | N         | N           | N             | N            | N         | N          | N               | N          | N          | N            | N          | N                     | N                | N            | N               | N                | N                | N              | N                   | N                  | N                | N          | N            |          |            |             |              |             0 |           0 |               0 |                    0 |

12 rows in set (0.00 sec)


    -->mysql> update mysql.user set select_priv='Y' where host='%' and user='mysql_1';

             Query OK, 0 rows affected (0.00 sec)
             Rows matched: 0  Changed: 0  Warnings: 0


    -->mysql> flush privileges;

              Query OK, 0 rows affected (0.00 sec)


17.9.3 撤销权限

    REVOKE语句允许数据库管理员撤销用户拥有的权限。

    例17.93 撤销用户zhangsan@'localhost'在所有数据库上面具有的所有权限。

    -->mysql> revoke all privileges on *.* from zhangsan@'localhost';

       Query OK, 0 rows affected (0.00 sec)


    例17.94 撤销用户zhangsan@'%'在所有数据库上面具有的所有权限。

    -->mysql> revoke all privileges on *.* from zhangsan@'%';

      Query OK, 0 rows affected (0.00 sec)


    例17.95 撤销用户zhangsan@'localhost'在数据库www上面具有select、insert、update、

delete、create和drop权限。

    -->mysql> revoke select,insert,update,delete,create,drop on www.*
              from zhangsan@'localhost';


    例17.96 撤销用户zhangsan@'localhost'在所有数据库上面具有的USAGE权限。

    -->mysql> revoke usage on *.* from zhangsan@'localhost';

              Query OK, 0 rows affected (0.00 sec)


    例17.97 撤销用户zhangsan@'localhost'在所有数据库上面具有的USAGE权限。

    -->mysql> revoke usage on *.* from zhangsan@'localhost';

      cQuery OK, 0 rows affected (0.00 sec)


17.10 MySQL图形界面客户端

17.10.1 Navicat for MySQL

    Navicat for MySQL是一款基于Windows平台的强大的MySQL数据库管理和开发图形界面软件，可以完全控制MySQL

数据库和显示不同的管理资料，包括一个多功能的图形化管理用户和访问权限的管理工具，方便将数据从一个数据库

转移到另一个数据库中，进行档案备份。Navicat for MySQL支持Unicode，以及本地或远程MySQL服务器多连线，用户

可浏览数据库、建立和删除删除、编辑数据、建立或执行SQL查询、管理用户权限、将数据库备份和恢复、导入和导出

数据等。

    从以下网址下载Navicat for MySQL 11.0.9软件

    http:/www.navicat.com.cn


    1.MySQL服务器权限设置'

    在MySQL服务器中使用以下命令创建用户。这样就可以在主机192.168.

    -->mysql> grant all on *.* to root@'192.168.10.168' identified by 'redhatlinux';

       Query OK, 0 rows affected (0.00 sec)

    #192.168.10.168 为客户端的IP
 
    2.连接MySQL服务器

    打开Navicat for MySQL程序，文件-->新建连接-->常规-->连接名：192.168.1.102   --------->连接测试-->确定

                                                        主机名或IP地址：192.168.1.102

                                                        端口：3306

                                                        用户名：root

                                                        密码:redhatlinux



17.10.2 MySQL Workbench

    MySQL Workbench是MySQL AB发布的可视化的数据库设计软件，为开发人员、数据库管理员和数据库架构师设计的统一

的可视化工具，它提供了先进的数据建模、灵活的SQL编辑器和全面的管理工具。

    1.数据建模

    MySQL Workbench是MySQL AB发布的可视化的数据库设计软件，为开发人员、数据库管理员和数据库架构师设计的统一

的可视化工具，它提供了先进的数据建模、灵活的SQL编辑器和全面的管理工具。

    2.SQL编辑器

    MySQL Workbench提供了用于建模、执行和优化SQL查询的可视化工具。SQL编辑器提供了语法高亮显示、SQL代码复用和

查看SQL执行历史的功能。数据库的连接面板允许开发人员轻松地管理数据库连接。对象浏览器则提供即时访问的数据库建模

和对象。

    3.管理工具

    MySQL Workbench提供了可视化的控制台，能轻松管理MySQL数据库环境，并为数据库增加了更好的可视性。开发人员和DBA

可以使用可视化工具配置服务器、管理用户和监控数据库的监控状况。

    
    从以下网址下载MySQL Workbench    http://www.mysql.com


    打开软件：Database-->Connect to Database-->Storage Connection: Local  instance MySQL

                                               Connection Method: Standard (TCP/IP)

                                               Parameters-->Hostname: 192.168.1.102   Port:3306

                                               Username: root

                                               Password: 【Store in Vault ...】按钮-->Password:

                                               Default Schema: www
















































