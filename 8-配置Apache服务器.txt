                                      第8章  配置Apache服务器

8.1 Web简介

8.1.1 什么是Web

    WWW(World Wide Web,万维网，也叫Web)是应该人TimBerners-Lee在1989年欧洲共同体

的一个大型科研机构工作时发明的。

    Web是一种超文本信息系统，其主要实现方式是超文本链接。
    
    超文本是一种用户接口方式，用于显示文本及与文本相关的内容。

    超文本链接是一种全局性的信息结构，它将文档中的不同部分通过关键字建立链接，使信息

得以用交互方式搜索。

8.1.2 Web特点

    Web具有以下特点：

    1.Web页面的图形化和易于链接

    2.Web与操作系统、浏览器平台无关

    3.分布式

    4.动态性

    5.交互性

8.1.3 Web工作原理

    Web中的信息资源主要由一篇篇的Web网页为基本元素构成。这些Web网页采用超级文本格式，

即可以含有指向其它Web网页或其本身内部特定位置的超级链接。可以将链接理解为指向其它Web

网页的指针。链接使得Web网页交织为网状，这样，如果Internet上的Web网页和连接非常多的话

就构成了一个巨大的信息网。


8.1.4 静态网站和动态网站的区别

    1.静态网站

    采用HTML语言编写，没有数据交互。打开速度比较快，容易被搜索引擎收录。安全、数据不会丢失。

    2.动态网站

    有后台管理，有数据交互，可以在后台进行修改、删除操作。

    动态网站的开发语言有ASP、JSP、PHP以及ASP.NET等。

    交互的数据库有：Access、MySQL、Oracle、SQL Server等。通常，ASP开发语言结合Access和SQL Server

数据库使用，PHP结合My SQL数据库使用，JSP结合MySQL和Oracle数据库。

    优点：维护方便，能实现人们需要的各种需求；查询信息方便，能存储大量数据，需要时能立即查询。

    动态网站的缺点是网站要用到数据库，所以对数据库的安全和保密性要求较高，要专业技术人员维护才能

保证网站的安全；动态网站不利于搜索引擎收录；动态网站制作成本较高。

8.1.5 Web错误代码

                             Web错误代码
    -----------------------------------------------------------------------------
         错误代码                             描述
    ------------------------------------------------------------------------------
          400                          错误的请求
    ------------------------------------------------------------------------------
          401                          未经授权
    ------------------------------------------------------------------------------
          403                          禁止访问：访问被拒绝
    -------------------------------------------------------------------------------
          404                          找不到文件或目录
    -------------------------------------------------------------------------------
          405                          用于访问该页的HTTP动作未被许可
    -------------------------------------------------------------------------------
          408                          请求时间超时
    --------------------------------------------------------------------------------
          410                          系统资源已经不存在
    ---------------------------------------------------------------------------------
          411                          需要内容长度头
    --------------------------------------------------------------------------------
          412                          客户端设置的前提条件在Web服务器上评估时失败。
    --------------------------------------------------------------------------------
          413                          请求实体太大
    --------------------------------------------------------------------------------
          414                          请求URI太大
    --------------------------------------------------------------------------------
          415                          不支持的媒体类型
    --------------------------------------------------------------------------------
          500                          服务器内部错误
    --------------------------------------------------------------------------------
          501                          标题值指定的配置没有执行
    --------------------------------------------------------------------------------
          502                          Web服务器作为网关或代理服务器时受到无效的响应
    --------------------------------------------------------------------------------
          503                          服务不可用
    --------------------------------------------------------------------------------


8.16 Apache简介

    Apache HTTP Server(简称Apache)是Apache软件基金会的一个开放源代码的网页服务器，可以

运行在UNIX、Windows和Linux等操作系统中，由于其跨平台和安全性从而被广泛使用，是使用排名

第一的Web服务器软件。它快速、可靠并且可以通过简单的API扩展，将Perl和Python等解释器编译

到服务器中。

    Apache源于NCSA http服务器，经过多次修改发展而成。因为它是自由软件，所以不断有人来为

它开发新的功能、新的特性、修改原来的缺陷。Apache的特点是简单、速度快、性能稳定，并可以作

为代理服务器使用。

    Apache具有以下特性：

    。支持HTTP/1.1通信协议

    。拥有简单而强有力的基于文件的配置过程。

    。支持通用网关接口(CGI).

    。支持基于端口号、IP地址和域名的虚拟主机。

    。支持多种方式的HTTP认证。

    。集成Perl处理模块

    。集成代理服务器模块

    。支持实时监视服务器状态和定制服务器日志。

    。支持服务器端包含指令(SSI)

    。支持安全Socket层(SSL)

    。提供用户会话过程的跟踪。

    。支持FastCGI

    。通过第三方模块可以支持Java Servlets

8.2 Apache服务器安装和配置

8.2.1 安装Apache服务器软件包

    -->rpm -qa|grep httpd

httpd-manual-2.2.15-39.el6.centos.noarch
httpd-tools-2.2.15-39.el6.centos.x86_64
httpd-itk-2.2.22-7.el6.x86_64
httpd-devel-2.2.15-39.el6.centos.x86_64
httpd-2.2.15-39.el6.centos.x86_64


    -->yum install httpd httpd-tools httpd-manual -y



8.2.2 /etc/httpd/conf/httpd.conf文件详解

    该文件的内容由【全局环境】、【主服务器配置】和【虚拟主机】3部分构成。

    默认配置文件内容如下：

    -->more /etc/httpd/conf/httpd.conf
    
    文件内容见外面的httpd.conf文件

    1.全局环境设置

    。ServerTokens OS:设置当服务器响应主机头信息时，显示Apache的版本和操作系统名称

    。ServerRoot "/etc/httpd":设置Apache服务器的根目录，也就是服务器主配置文件和日志文件的位置。

    。PidFile run/httpd.pid: 设置运行Apache时使用的PID文件位置，用来记录httpd进程执行时的PID

    。Timeout 60: 设置响应超时，如果在指定时间内没有收到或发出任何数据则断开连接，单位为秒。

    。KeepAlive Off: 设置是否启用保持连接。On为启用，这样客户一次请求连接能响应多个文件；

                     Off为不启用，这样客户一次请求连接只能响应一个文件。建议使用On来提高访问性能。
  
    。MaxKeepAliveRequests 100:设置在启用KeepAlive ON时，可以限制客户一次请求连接能响应的文件数量，设置为0
                     将不限制。

    。KeepAliveTimeout 15:设置在启用KeepAlive On时，可以限制相邻的两个请求连接的时间间隔，在指定时间内则断开连接。

    。StartServers 8:设置服务器启动时的守护进程数

    。MinSpareServers 5:设置如果有低于该值的空闲子进程，就创建一个新的子进程准备为客户提供服务。

    。MaxSpareServers 20:设置如果有高于该值的空闲子进程，就删除子进程来提高系统性能。

    。ServerLimit: 256:设置服务器允许连接的最大同时连接数。

    。MacClients: 256:设置同一时间内客户端的最大连接数。

    。MaxRequestsPerChild 40000: 设置限制每个子进程在结束处理请求之前剔除的连接请求数量。

    。Listen 80:设置服务器的监听端口。

    。Include conf.d/*.conf:社会自将/etc/httpd/conf.d目录下的所有以conf结尾的配置文件包含进来。

    。ExtendedStatus On:设置服务器是否生成完整的状态信息，On为生成完整信息，Off为生成基本信息。

    。User apache:设置运行Apache服务器的用户。

    。Group apache:设置运行Apache服务器的组


    2.主服务器配置设置

    。ServerAdmin root@localhost:设置Apache服务器管理员的电子邮件地址，如果Apache有问题的话，会发送邮件通知管理员。

    。e www.example.com:80: 设置Apache服务器主机名称，如果没有域名，也可以使用IP地址。

    。UseCanonicalName Off:设置该参数为Off时，需要指向本身的链接时使用ServerNAme:Port作为主机名，若设置该参数为O时，

则需要使用Port将主机名和端口号隔开。

    。DocumentRoot "/var/www/html":设置Apache服务器中存放网页内容的根目录位置。

    。Options FollowSymLinks:设置允许访问符号链接的文件。

    。AllowOverride Nonde:设置禁止读取.htaccess配置文件的内容。

    。Options Indexes FolloeSymLinks:设置该参数值为INdexes时，在目录中找不到DirectoryIndex列表中指定的文件就生成当前目录
 
 的文件列表；设置该参数值为FolloeSymLinks时，将允许访问符号链接，访问不在本目录内的文件。

    。Order allow,deny:设置先执行allow (允许)访问规则，再执行deny(拒绝)访问规则。

    。Allow from all:设置执行allow(允许)访问规则，允许所有连接。

    。UserDir disabled:设置是否允许用户在自己的主目录中创建个人网站，enable为允许创建,disabled为不允许创建。

    。UserDir public_html:社会自每一为用户的Web网站的目录。

    。Order deny,allow:设置先执行deny(拒绝）访问规则，再执行allow(允许）访问规则。

    。Deny from all:设置执行(拒绝）访问规则，拒绝所有连接。

    。DirectoryIndex index.html index.html.var:设置网站默认文档首页名称。

    。TypesConfig /etc/mime.types:制度能够负责处理MIME对应格式的配置文件的存储位置。

    。DefaultType text/plain:社会自慕容恩的MIME文件类型为纯文本或HTML文件。

    。HostnameLookups Off:设置记录连接Apache服务器的是客户端的IP地址还是主机名。Off为记录IP地址，On为记录主机名。
    
    。ErrorLog logs/error_log:设置错误日志文件的保存位置。

    。LogLevel warn:社会自要记录的错误信息的等级为warn

    。ServerSignature On:设置服务器是否在自动生成Web页中加上服务器的版本和主机名，On为加上，Off为不加上。

    。Options INdexes MultiViews FollowSymLinks:设置使用内容协商功能决定被发送的网页的性质。

    。ReadmeName README.html:当服务器自动列出目录列表时，在所生成的页面之后显示README.html的内容。

    。HeaderName HEADRE.html:当服务器自动列出目录列表时，在所生成的页面之前显示HEADER.html的内容。

    。ProxyVia On:设置用于处理HTTP/1.1的Via文件头的功能。

    
    3.虚拟主机设置

    。NameVirtualHost *.80:设置基于域名的虚拟主机。

    。ServerAdmin webmaster@dummy-host.example.com

    。DocumentRoot /www/docs/dummy-host.example.com：设置虚拟主机根文档目录。

    。ServerName dummy-host.example.com:设置虚拟主机的名称和端口号

    。ErrorLog logs/dummy-host.example.com_error_log:设置虚拟主机的错误日志文件。

    。CustomLog logs/dummy-host.example.com-access_log common:设置虚拟主机的访问日志文件。


8.2.3 Apache模块

   在Apache使用模块的方式运行，Apache由【内核】、【标准模块】和【第三方提供的模块】3个层次组成。

   在/etc/httpd/conf/httpd.cofn文件中有类似以下的内容，代表使用Apache模块：

LoadModule auth_basic_module modules/mod_auth_basic.so
LoadModule auth_digest_module modules/mod_auth_digest.so
LoadModule authn_file_module modules/mod_authn_file.so
LoadModule authn_alias_module modules/mod_authn_alias.so

   所有的Apache模块都保存在/usr/lib64/httpd/modules目录中，而/etc/httpd/modules目录是该目录的一个软连接目录。


   -->ll

total 8
drwxr-xr-x 2 root root 4096 Jun 29 09:17 conf
drwxr-xr-x 2 root root 4096 May 26 01:53 conf.d
lrwxrwxrwx 1 root root   19 May 25 14:19 logs -> ../../var/log/httpd
lrwxrwxrwx 1 root root   29 May 25 14:19 modules -> ../../usr/lib64/httpd/modules
lrwxrwxrwx 1 root root   19 May 25 14:19 run -> ../../var/run/httpd
[root@sql httpd]# 



   -->ls /usr/lib64/httpd/modules/

libphp5.so            mod_authn_file.so       mod_cgid.so        mod_ext_filter.so    mod_mime.so            mod_setenvif.so
mod_actions.so        mod_authnz_ldap.so      mod_cgi.so         mod_filter.so        mod_negotiation.so     mod_speling.so
mod_alias.so          mod_authz_dbm.so        mod_dav_fs.so      mod_headers.so       mod_proxy_ajp.so       mod_status.so
mod_asis.so           mod_authz_default.so    mod_dav.so         mod_ident.so         mod_proxy_balancer.so  mod_substitute.so
mod_auth_basic.so     mod_authz_groupfile.so  mod_dbd.so         mod_include.so       mod_proxy_connect.so   mod_suexec.so
mod_auth_digest.so    mod_authz_host.so       mod_deflate.so     mod_info.so          mod_proxy_ftp.so       mod_unique_id.so
mod_authn_alias.so    mod_authz_owner.so      mod_dir.so         mod_ldap.so          mod_proxy_http.so      mod_userdir.so
mod_authn_anon.so     mod_authz_user.so       mod_disk_cache.so  mod_log_config.so    mod_proxy_scgi.so      mod_usertrack.so
mod_authn_dbd.so      mod_autoindex.so        mod_dumpio.so      mod_log_forensic.so  mod_proxy.so           mod_version.so
mod_authn_dbm.so      mod_cache.so            mod_env.so         mod_logio.so         mod_reqtimeout.so      mod_vhost_alias.so
mod_authn_default.so  mod_cern_meta.so        mod_expires.so     mod_mime_magic.so    mod_rewrite.so


    Apache模块描述：

                                       Apache模块
    -------------------------------------------------------------------------------------------------------------------------------
        模块名                                                  描述
    -------------------------------------------------------------------------------------------------------------------------------
       libmodunss                  使用网络安全服务(NSS)安全库通过SSL和TLS协议加密Apache服务器
    -------------------------------------------------------------------------------------------------------------------------------
       libphp5                     支持PHP脚本语言
    -------------------------------------------------------------------------------------------------------------------------------
       mod_actions                 基于媒体类型或请求方法，为执行CGI脚本而提供。
    -------------------------------------------------------------------------------------------------------------------------------
       mod_alias                   提供从文件系统的不同部分到文档树的映射和URL重定向。
    -------------------------------------------------------------------------------------------------------------------------------
       mod_asis                    发送自己包含HTTP头内容的文件。
    -------------------------------------------------------------------------------------------------------------------------------
       mod_auth_basic              使用基本认证
    -------------------------------------------------------------------------------------------------------------------------------
       mod_auth_digest             使用MD5摘要认证（更安全，但是只有最新版本的浏览器才支持）
    -------------------------------------------------------------------------------------------------------------------------------
       mod_auth_kerb               为HTTP进行Kerberos身份验证。
    -------------------------------------------------------------------------------------------------------------------------------
       mod_auth_mysql              支持使用MySQL数据库实现基本HTTP认证
    -------------------------------------------------------------------------------------------------------------------------------
       mod_auth_alias              基于实际认证支持者创建的认证支持者，并为它起一个别名以便于引用
    -------------------------------------------------------------------------------------------------------------------------------
       mod_authn_anon              提供匿名用户认证支持
    -------------------------------------------------------------------------------------------------------------------------------
       mod_authn_dbd               使用SQL数据库为认证提供支持
    -------------------------------------------------------------------------------------------------------------------------------
       mod_authn_dbm               使用DBM数据库为认证提供支持
    -------------------------------------------------------------------------------------------------------------------------------
       mod_authn_default           在未正确配置认证模块的情况下简单拒绝一切认证信息。
    -------------------------------------------------------------------------------------------------------------------------------
       mod_authn_file              使用纯文本文件为认证提供支持
    -------------------------------------------------------------------------------------------------------------------------------
       mod_authz_ldap              允许使用一个LDAP目录存储用户名和密码数据库来执行基本认证和授权
    -------------------------------------------------------------------------------------------------------------------------------
       mod_auth_pgsql              允许用户验证对存储在PostgreSQL数据库中的信息。
    -------------------------------------------------------------------------------------------------------------------------------
       mod_authz_dbm               使用DBM数据库文件为组提供授权支持。
    -------------------------------------------------------------------------------------------------------------------------------
       mod_authz_groupfile         使用纯文本文件为组提供授权支持。
    -------------------------------------------------------------------------------------------------------------------------------
       mod_authz_host              供基于主机名、IP地址、请求特征的访问控制
    -------------------------------------------------------------------------------------------------------------------------------
       mod_authz_ldap              允许使用一个LDAP目录存储用户名和密码数据库来执行基本认证和授权。
    -------------------------------------------------------------------------------------------------------------------------------
       mod_authz_owner             基于文件的所有者进行授权
    -------------------------------------------------------------------------------------------------------------------------------
       mod_authz_svn               访问Subversion版本库时执行认证和授权
    -------------------------------------------------------------------------------------------------------------------------------
       mod_authz_user              基于每个用户提供授权支持。
    -------------------------------------------------------------------------------------------------------------------------------
       mod_autoindex               自动对目录中的内容生成列表，类似于ls或dir命令
    -------------------------------------------------------------------------------------------------------------------------------
       mod_cache                   基于URI键的内容动态缓冲（内存或磁盘）
    -------------------------------------------------------------------------------------------------------------------------------
       mod_cern_meta               允许Apache使用CERN httpd元文件，从而可以在发送文件时对头进行修改。
    -------------------------------------------------------------------------------------------------------------------------------
       mod_cgi                     在非线程型MPM(worker)上用一个外部CGI守护进程执行CGI脚本
    -------------------------------------------------------------------------------------------------------------------------------
       mod_dav                     允许Apache提供DAV协议支持
    -------------------------------------------------------------------------------------------------------------------------------
       mod_dav_fs                  为mod_dav访问服务器上的文件系统提供支持。
    -------------------------------------------------------------------------------------------------------------------------------
       mod_dav_svn                 使用HTTP协议访问Subversion版本库
    -------------------------------------------------------------------------------------------------------------------------------
       mod_dbd                     管理SQL数据库连接，为需要数据库功能的模块提供支持。
    -------------------------------------------------------------------------------------------------------------------------------
       mod_deflate                 压缩发送给客户端的内容
    -------------------------------------------------------------------------------------------------------------------------------
       mod_dir                     指定目录索引文件以及为目录提供"尾斜杠"重定向。
    -------------------------------------------------------------------------------------------------------------------------------
       mod_disk_cache              基于磁盘的缓冲管理器
    -------------------------------------------------------------------------------------------------------------------------------
       mod_dnssd                   增加了零配置支持
    -------------------------------------------------------------------------------------------------------------------------------
       mod_dumpio                  将所有I/O操作转存到错误日志中
    -------------------------------------------------------------------------------------------------------------------------------
       mod_env                     允许Apache修改或清除传送到CGI脚本和SSI页面的环境变量
    -------------------------------------------------------------------------------------------------------------------------------
       mod_expires                 允许通过配置文件控制HTTP的"Expires:"和"Cache-Control:"头内容
    -------------------------------------------------------------------------------------------------------------------------------
       mod_ext_filter              使用外部程序作为过滤器
    ------------------------------------------------------------------------------------------------------------------------------
       mod_filter                  根据上下文实际情况对输出过滤器进行动态配置
    -------------------------------------------------------------------------------------------------------------------------------
       mod_headers                 允许通过配置文件控制任意的HTTP请求和应当头信息。
    -------------------------------------------------------------------------------------------------------------------------------
       mod_ident                   实现RFC1413规定的ident查找
    -------------------------------------------------------------------------------------------------------------------------------
       mod_include                 实现服务端包含文档(SSL)处理
    -------------------------------------------------------------------------------------------------------------------------------
       mod_info                    生成Apache配置情况的Web页面。
    -------------------------------------------------------------------------------------------------------------------------------
       mod_ldap                    为其他LDAP模块提供LDAP连接池和结果缓冲服务
    -------------------------------------------------------------------------------------------------------------------------------
       mod_log_config              允许记录日志和定制日志文件格式。
    -------------------------------------------------------------------------------------------------------------------------------
       mod_log_forensic            实现“对比日志”，即在请求被处理之前和处理完成之后进行两次记录
    -------------------------------------------------------------------------------------------------------------------------------
       mod_logio                   对每个请求的输入/输出字节数以及HTTP头进行日志记录
    -------------------------------------------------------------------------------------------------------------------------------
       mod_mime                    根据文件扩展名决定应答的行为（处理器/过滤器）和内容（MIME类型/语言/字符集/编码)
    -------------------------------------------------------------------------------------------------------------------------------
       mod_mime_magic              通过读取部分文件内容自动猜测文件的MIM类型
    -------------------------------------------------------------------------------------------------------------------------------
       mod_negotiation             提供内容协商支持
    -------------------------------------------------------------------------------------------------------------------------------
       mod_perl                    内嵌Perl解释器
    -------------------------------------------------------------------------------------------------------------------------------
       mod_proxy                   提供HTTP/1.1的代理/网关功能支持
    -------------------------------------------------------------------------------------------------------------------------------
       mod_proxy_ajp               mod_proxy的扩展，提供Apache JServ Protocol支持
    -------------------------------------------------------------------------------------------------------------------------------
       mod_proxy_balancer          mod_proxy的扩展，提供负载均衡支持。
    -------------------------------------------------------------------------------------------------------------------------------
       mod_proxy_connect           mod_proxy的扩展，提供对处理HTTP CONNECT方法的支持
    -------------------------------------------------------------------------------------------------------------------------------
       mod_proxy_Ftp               mod_porxy的FTP支持模块
    -------------------------------------------------------------------------------------------------------------------------------
       mod_proxy_scgi              为mod_proxy的SCGI网关。
    -------------------------------------------------------------------------------------------------------------------------------
       mod_rev                     检索并安装远程证书撤销列表（CRL)到Apache服务器
    -------------------------------------------------------------------------------------------------------------------------------
       mod_rewrite                 一个基于一定规则的实时重写URL请求的引擎。
    -------------------------------------------------------------------------------------------------------------------------------
       mod_setenvif                根据客户端请求头字段设置环境变量
    -------------------------------------------------------------------------------------------------------------------------------
       mod_speling                 自动纠正URL中的ping写错误
    -------------------------------------------------------------------------------------------------------------------------------
       mod_reqtimeout              为接收请求设置超时时间和最小数据率。
    -------------------------------------------------------------------------------------------------------------------------------
       mod_ssl                     使用安全套接字层(SSL)和传输层安全(TLS)协议实现高强度加加密传输
    -------------------------------------------------------------------------------------------------------------------------------
       mod_status                   生成藐视服务器状态的Web页面
    -------------------------------------------------------------------------------------------------------------------------------
       mod_substitute               在响应主体上执行搜索和替换操作
    -------------------------------------------------------------------------------------------------------------------------------
       mod_suexec                   使用域调用Web服务器的用户不同的用户身份来运行CGI和SSL程序。
    -------------------------------------------------------------------------------------------------------------------------------
       mod_unique_id                为每个请求生成唯一的标识以便跟踪。
    -------------------------------------------------------------------------------------------------------------------------------
       mod_userdir                  允许用户从自己的主目录中提供页面("/username")
    -------------------------------------------------------------------------------------------------------------------------------
       mod_usertrack                使用Session跟踪用户(会发送很多Cookie),以记录用户的点击流
    -------------------------------------------------------------------------------------------------------------------------------
       mod_version                  提供基于版本的配置段支持
    -------------------------------------------------------------------------------------------------------------------------------
       mod_vhost_alias              提供大批量虚拟主机的动态配置支持
    -------------------------------------------------------------------------------------------------------------------------------
       mod_wsgi                     Python Web应用程序的WSGI接口
    -------------------------------------------------------------------------------------------------------------------------------
    
8.2.4 Apache服务器配置实例

    在公司内部配置一台Apache服务器，为公司网络内的客户端计算机同能通过域名访问的Apache Web网站，具体参数如下：

    。Apache服务器IP地址：192.168.0.203

    。Web网站域名：www.fulong.com

    。Apache服务器默认文档首页名称：index.html和index.htm

    。Apache服务器中存放网页内容的根目录位置:/var/www/html

    。Apache服务器监听端口：80

    。默认字符集：GB2312

    。运行Apache服务器的用户和组:apache 

    。管理员邮件地址：root@fulong.com

    。超时时间：120秒

    1.配置DNS服务器

    (1)编辑/etc/named.conf文件

    修改DNS服务器的配置文件

    -->vim /etc/named.conf

修改后的文件内容如下：


options {
        listen-on port 53 { 192.168.0.203; };   ------------------- #修改此处IP
        listen-on-v6 port 53 { ::1; };
        directory       "/var/named";
        dump-file       "/var/named/data/cache_dump.db";
        statistics-file "/var/named/data/named_stats.txt";
        memstatistics-file "/var/named/data/named_mem_stats.txt";
        allow-query     { 192.168.0.0/24; };    --------------------#修改此处IP段
        recursion yes;

        dnssec-enable yes;
        dnssec-validation yes;
        dnssec-lookaside auto;

        /* Path to ISC DLV key */
        bindkeys-file "/etc/named.iscdlv.key";

        managed-keys-directory "/var/named/dynamic";
};

logging {
        channel default_debug {
                file "data/named.run";
                severity dynamic;
        };
};

zone "." IN {
        type hint;
        file "named.ca";
};

//------------------------------------------------------#添加如下段信息
zone "fulong.com" IN {
        type master;
        file "/var/named/fulong.com.hosts";
};


    (2)编辑区域文件/var/named/fulong.com.hosts

    -->vim /var/named/fulong.com.hosts

$ttl 38400
@     IN    SOA    Master1.fulong.com.    root.fulong.com. (
                   1268360234
                   10800
                   3600
                   604800
                   38400 )


@                     IN        NS                       Master1.fulong.com.
Master1               IN        A                        192.168.0.203
www                   IN        CNAME                    Master1.fulong.com.



     (3)重启named服务

     -->service named restart

        Stopping named:                                            [  OK  ]
        Starting named:                                            [  OK  ]



     2.编辑/etc/httpd/conf/httpd.conf文件

     修改Apache服务器的配置文件/etc/httpd/conf/httpd.conf

     -->vim /etc/httpd/conf/httpd.conf,修改以下参数(以下内容在不同位置)：

ServerRoot "/etc/httpd"
Timeout 120
Listen 80
ServerAdmin root@fulong.com
ServerName www.fulong.com:80
DocumentRoot "/var/www/html"
DirectoryIndex index.html index.htm
AddDefaultCharset GB2312
User apache
Group apache
                              

     3.将网页保存到/var/www/html目录中

     生成inde.html测试文件

     -->echo This is www.fulong.com > /var/www/html/index.html

8.2.5 控制httpd服务

    1.启动httpd服务

    -->service httpd start

       Starting httpd:                                            [  OK  ]

    2.查看httpd服务运行状态

    -->service httpd status

       httpd (pid  3416) is running...

    3.停止httpd服务

    -->service httpd stop

       Stopping httpd:                                            [  OK  ]

    4.重新启动httpd服务

    -->service httpd restart

       Stopping httpd:                                            [  OK  ]
       Starting httpd:                                            [  OK  ]

    5.重新加载httpd服务

    -->service httpd reload

       Reloading httpd: 


    6.开机自动启动httpd服务

    -->chkconfig httpd on

    -->chkconfig --list httpd

       httpd          	0:off	1:off	2:on	3:on	4:on	5:on	6:off


8.2.6 控制Apache服务器

    apachectl命令可以控制Apache服务器，比如启动、停止或重新启动Apache服务器等。

    命令语法：

    apachectl [选项]

    apachectl [命令]

                                apachectl命令选项含义
    ------------------------------------------------------------------------------
        选项                                      选项含义
    ------------------------------------------------------------------------------
        -l                                列出编译的模块
    ------------------------------------------------------------------------------
        -v                                显示Apache版本号
    ------------------------------------------------------------------------------
        -V                                显示编译配置
    ------------------------------------------------------------------------------
        -t                                执行语法检查配置文件
    ------------------------------------------------------------------------------
        -d <目录>                         指定一个备用初始的ServerRoot
    ------------------------------------------------------------------------------
        -e <等级>                         显示指定等级的启动错误
    ------------------------------------------------------------------------------
        -h                                列出可用的命令行选项
    ------------------------------------------------------------------------------
        -t -D DUMP_MODULES                显示所有加载的模块
    ------------------------------------------------------------------------------
        -t -D DUMP_VHOSTS                 显示解析设置（目前仅虚拟主机设置）
    -------------------------------------------------------------------------------
        -L                                列出可用的配置指令
    -------------------------------------------------------------------------------
        -S                                相当于-t -D DUMP_VHOSTS选项
    -------------------------------------------------------------------------------
        -M                                相当于-t -D DUMP_MODULES选项
    -------------------------------------------------------------------------------
        -E <文件>                         记录启动错误到指定文件
     -------------------------------------------------------------------------------
        -C <指令>                         读取配置文件之前处理指令
    -------------------------------------------------------------------------------
        -c <指令>                         读取配置文件之后处理指令
    -------------------------------------------------------------------------------
        -k <信号>                         发送指定信号给httpd，信号可以是start、
	                                  restart或stop	                             
    -------------------------------------------------------------------------------
                                    
				    apachectl命令的命令部分描述
    ------------------------------------------------------------------------------------------------------------------
       命令                                    描述
    -------------------------------------------------------------------------------------------------------------------
       start            启动httpd守护进程，如果该守护进程已经在运行就显示一个错误，相当于apachectl -k start命令
    -------------------------------------------------------------------------------------------------------------------
       stop             停止httpd守护进程。相当于apachectl -k stop命令。
    -------------------------------------------------------------------------------------------------------------------
       restart          重新启动httpd守护进程，如果该守护进程没有运行则启动。相当于apachectl -k restart命令。
    -------------------------------------------------------------------------------------------------------------------
       fullstatus       显示使用mod_status的一个完整的状态报告
    -------------------------------------------------------------------------------------------------------------------
       status           显示简要的状态报告
    -------------------------------------------------------------------------------------------------------------------
       graceful         安全地重新启动httpd守护进程。如果该守护进程没有运行则启动，不会中断原有的连接。
    -------------------------------------------------------------------------------------------------------------------
       graceful-stop    安全地停止httpd守护进程
    -------------------------------------------------------------------------------------------------------------------
       configtest       运行配置文件的语法测试。它解析配置问阿金和报告Syntax OK或有关特定语法错误的详细信息。
    -------------------------------------------------------------------------------------------------------------------
    
    例8.1 查看Aapche编译配置参数

    -->apachectl -V

Server version: Apache/2.2.15 (Unix)
Server built:   Oct 16 2014 14:48:21
Server's Module Magic Number: 20051115:25
Server loaded:  APR 1.3.9, APR-Util 1.3.9
Compiled using: APR 1.3.9, APR-Util 1.3.9
Architecture:   64-bit
Server MPM:     Prefork
  threaded:     no
    forked:     yes (variable process count)
Server compiled with....
 -D APACHE_MPM_DIR="server/mpm/prefork"
 -D APR_HAS_SENDFILE
 -D APR_HAS_MMAP
 -D APR_HAVE_IPV6 (IPv4-mapped addresses enabled)
 -D APR_USE_SYSVSEM_SERIALIZE
 -D APR_USE_PTHREAD_SERIALIZE
 -D SINGLE_LISTEN_UNSERIALIZED_ACCEPT
 -D APR_HAS_OTHER_CHILD
 -D AP_HAVE_RELIABLE_PIPED_LOGS
 -D DYNAMIC_MODULE_LIMIT=128
 -D HTTPD_ROOT="/etc/httpd"
 -D SUEXEC_BIN="/usr/sbin/suexec"
 -D DEFAULT_PIDLOG="run/httpd.pid"
 -D DEFAULT_SCOREBOARD="logs/apache_runtime_status"
 -D DEFAULT_LOCKFILE="logs/accept.lock"
 -D DEFAULT_ERRORLOG="logs/error_log"
 -D AP_TYPES_CONFIG_FILE="conf/mime.types"
 -D SERVER_CONFIG_FILE="conf/httpd.conf"


    例8.2 查看已经被编译的Apache模块

    -->apachectl -l

Compiled in modules:
  core.c
  prefork.c
  http_core.c
  mod_so.c


    例8.3 显示所有加载的Apache模块

    -->apachectl -M

Loaded Modules:
 core_module (static)
 mpm_prefork_module (static)
 http_module (static)
 so_module (static)
 auth_basic_module (shared)
 auth_digest_module (shared)
 authn_file_module (shared)
 authn_alias_module (shared)
 authn_anon_module (shared)
 authn_dbm_module (shared)
 authn_default_module (shared)
 authz_host_module (shared)
 authz_user_module (shared)
 authz_owner_module (shared)
 authz_groupfile_module (shared)
 authz_dbm_module (shared)
 authz_default_module (shared)
 ldap_module (shared)
 authnz_ldap_module (shared)
 include_module (shared)
 log_config_module (shared)
 logio_module (shared)
 env_module (shared)
 ext_filter_module (shared)
 mime_magic_module (shared)
 expires_module (shared)
 deflate_module (shared)
 headers_module (shared)
 usertrack_module (shared)
 setenvif_module (shared)
 mime_module (shared)
 dav_module (shared)
 status_module (shared)
 autoindex_module (shared)
 info_module (shared)
 dav_fs_module (shared)
 vhost_alias_module (shared)
 negotiation_module (shared)
 dir_module (shared)
 actions_module (shared)
 speling_module (shared)
 userdir_module (shared)
 alias_module (shared)
 substitute_module (shared)
 rewrite_module (shared)
 proxy_module (shared)
 proxy_balancer_module (shared)
 proxy_ftp_module (shared)
 proxy_http_module (shared)
 proxy_ajp_module (shared)
 proxy_connect_module (shared)
 cache_module (shared)
 suexec_module (shared)
 disk_cache_module (shared)
 cgi_module (shared)
 version_module (shared)
 php5_module (shared)
Syntax OK


    例8.4 显示Apache解析设置

    -->apachectl -S

VirtualHost configuration:
Syntax OK

    例8.5 停止httpd守护进程

    -->apachectl stop

    -->ps -ef|grep httpd

root      3574  3190  0 12:01 pts/0    00:00:00 grep httpd


    例8.6 启动httpd守护进程

    -->apachectl start

    -->ps -ef|grep httpd

root      3578     1  1 12:01 ?        00:00:00 /usr/sbin/httpd -k start
apache    3579  3578  0 12:01 ?        00:00:00 /usr/sbin/httpd -k start
apache    3580  3578  0 12:01 ?        00:00:00 /usr/sbin/httpd -k start
apache    3581  3578  0 12:01 ?        00:00:00 /usr/sbin/httpd -k start
apache    3582  3578  0 12:01 ?        00:00:00 /usr/sbin/httpd -k start
apache    3583  3578  0 12:01 ?        00:00:00 /usr/sbin/httpd -k start
apache    3584  3578  0 12:01 ?        00:00:00 /usr/sbin/httpd -k start
apache    3585  3578  0 12:01 ?        00:00:00 /usr/sbin/httpd -k start
apache    3586  3578  0 12:01 ?        00:00:00 /usr/sbin/httpd -k start
root      3588  3190  0 12:01 pts/0    00:00:00 grep httpd


    例8.7：查看httpd守护进程

    -->apachectl status

       The 'links' package is required for this functionality.

    例8.8 重新启动httpd守护进程

    -->apachectl restart


    例8.9 运行Apache配置文件的语法测试

    -->apachectl configtest

       Syntax OK


8.3 访问Apache服务器

8.3.1 MOzilla Firefox

    如果希望再Linux客户端域名方式访问Web网站，

    修改客户端/etc/resolv.conf指向DNS服务器

    nameserver 192.168.0.203

    使用Mozilla Firefox访问：

    -->http://192.168.0.203/

    或:http://www.fulong.com

    即可显示：This is www.fulong.com


8.3.2 lynx

    lynx是一个纯文本网页浏览器可以运行在多种操作系统下，在具有强调文字功能的终端上使用。  
    
    -->rpm -q lynx 

    -->yum install lynx -y

    Linux客户端使用lynx命令访问Web网站

    192.168.0.204

    -->lynx http://www.fulong.com

       This is www.fulong.com


8.3.3 curl

    curl是一个利用URL语法在命令行方式下传输文件和数据库的工具，支持HTTP、FTP、telnet等协议，

它被广泛应用在UNIX、Linux和Windows系统。

    -->rpm -q curl

       curl-7.19.7-37.el6_5.3.x86_64

    -->yum install curl -y  

    Linux客户端使用curl命令访问Web网站

    -->curl http://192.168.0.203

       This is www.fulong.com

    -->curl http://www.fulong.com

       This is www.fulong.com


8.3.4 elinks 

    elinks是一个Linux系统下基于文本的Web浏览器。elinks不能显示任何图像， 但它支持框架、表格和其它大多数

的HTML标签。elinks启动和退出很快，能迅速第显示网页。

    -->rpm -q nss_compat-ossl

       package nss_compat-ossl is not installed

    -->rpm -q elinks

       package elinks is not installed

    -->yum install nss_compat_ossl  elinks -y


    使用elinks命令访问http://www.fulong.com

8.4 日志文件

    在Apache服务器中的日志文件有【错误日志】和【访问日志】两种。

8.4.1 配置错误日志

    在Apache服务器的配置文件/etc/httpd/conf/httpd.conf中有以下两行内容，说明了错误日志的保存位置以及

当前错误日志的记录等级。

    ErrorLog logs/error_log

    LogLevel warn

    在Apache服务器中可以使用的错误日志登记，默认为warn，该等级将记录1~5等级的所有错误信息。

                                            错误日志记录等级
    ---------------------------------------------------------------------------------------------
       紧急程度                  等级                             描述
    ---------------------------------------------------------------------------------------------
          1                      emerg        出现紧急情况使得该系统不可用，如系统宕机
    ---------------------------------------------------------------------------------------------
          2                      alert        需要立即引起注意的情况
    ---------------------------------------------------------------------------------------------
          3                      crit         危险情况的警告
    ---------------------------------------------------------------------------------------------
          4                      error        除了emerg、alert和crit的其它错误
    ---------------------------------------------------------------------------------------------
          5                      warn         警告信息
    ---------------------------------------------------------------------------------------------
          6                      notice       需要引起注意的情况，但不如error和warn等级重要。
    ----------------------------------------------------------------------------------------------
          7                      info         值得报告的一般信息
    ---------------------------------------------------------------------------------------------
          8                      debug        由运行于debug模式的程序所产生的信息
    ---------------------------------------------------------------------------------------------

    通过/etc/httpd/logs/error_log文件来查看apache错误日志，在错误日志文件中记录下来的每一条

 记录，都是下面这样的格式。

      日期和时间         错误等级              导致错误的IP地址             错误信息

     -->more /etc/httpd/logs/error_log


[Mon Jun 29 14:47:31 2015] [alert] [client 192.168.0.204] /var/www/html/pub/.htaccess: Invalid command 'Options-Indexes', perhaps misspelled 
or defined by a module not included in the server configuration
Could not open log file 'logs/access_log.1435536000' (No such file or directory)
piped log program '/usr/sbin/rotatelogs logs/access_log 86400' failed unexpectedly
Could not open log file 'logs/access_log.1435536000' (No such file or directory)
piped log program '/usr/sbin/rotatelogs logs/access_log 86400' failed unexpectedly
[Mon Jun 29 14:47:36 2015] [alert] [client 192.168.0.204] /var/www/html/pub/.htaccess: Invalid command 'Options-Indexes', perhaps misspelled 
or defined by a module not included in the server configuration
Could not open log file 'logs/access_log.1435536000' (No such file or directory)
piped log program '/usr/sbin/rotatelogs logs/access_log 86400' failed unexpectedly




8.4.2 配置访问日志

    在Apache服务器中记录真服务器所处理的所有请求，在配置文件中有如下5行内容，说明了访问日志的保存位置

以及访问日志的格式分类

LogFormat "%h %l %u %t \"%r\" %>s %b \"%{Referer}i\" \"%{User-Agent}i\"" combined
LogFormat "%h %l %u %t \"%r\" %>s %b" common
LogFormat "%{Referer}i -> %U" referer
LogFormat "%{User-agent}i" agent
#CustomLog logs/access_log common

                                 在Apache服务器中访问日志的格式分类
    --------------------------------------------------------------------------------------
      格式分类              格式名称                           描述
    --------------------------------------------------------------------------------------
      普通日志格式           commmon           大多数日志分析软件都支持的格式
    --------------------------------------------------------------------------------------
      参考日志格式           referer           记录客户访问站点的用户身份
    --------------------------------------------------------------------------------------
      代理日志格式           agent             记录请求的用户代理
    --------------------------------------------------------------------------------------
      综合日志格式           combined          结合common、referer和agent三种日志信息
    --------------------------------------------------------------------------------------

    使用LogFormat指定设置访问日志记录内容时，将使用下表各个参数：

                                       访问日志参数
    ---------------------------------------------------------------------------------------
           参数                                    描述
    ---------------------------------------------------------------------------------------
           %h                               访问Web网站的客户端IP地址
    ---------------------------------------------------------------------------------------
           %l                               从identd服务器中获取远程登录名称
    ---------------------------------------------------------------------------------------
           %u                               来自于认证的远程用户
    ---------------------------------------------------------------------------------------
           %t                               连接的日期和时间
    ---------------------------------------------------------------------------------------
           %r                               HTTP请求的首行信息
    ---------------------------------------------------------------------------------------
           %>s                              服务器返回给客户端的状态代码
    ---------------------------------------------------------------------------------------
           %b                               传送的字节数
    ---------------------------------------------------------------------------------------
           %{Referer}i                      发给服务器的请求头信息
    ---------------------------------------------------------------------------------------
           %{User-Agent}i                   客户机使用的浏览器信息
    ---------------------------------------------------------------------------------------


    。查看访问记录

    -->cat /etc/httpd/logs/access_log中有如下这行：

    192.168.0.204 -- [19/Aug/2012:07:31:12 +0800] "GET/HTTP/1.1" 200 19 "_" "Mozilla/5.0(X11;Linux x86_64;
rv:10.0.12) Gecko/20130104 Firefox/10.0.12

    输出信息如下描述

                            /etc/httpd/logs/access_log文件输出信息描述
    -----------------------------------------------------------------------------------------------
              输出信息                                信息描述
    -----------------------------------------------------------------------------------------------
         192.168.0.204                      访问Web网站的客户端IP地址
    -----------------------------------------------------------------------------------------------
         -                                  从identd服务器中获取远程登录名称，“-"表示没有取得信息
    -----------------------------------------------------------------------------------------------
         -                                  来自于认证的远程用户，"-"表示没有取得信息
    -----------------------------------------------------------------------------------------------
        [19/Aug/2013:07:31:12 +0800]        连接的日期和时间
    -----------------------------------------------------------------------------------------------
        "GET/HTTP/1.1"                      HTTP请求的首行信息
    ---------------------------------------------------------------------------------------------
        200                                 服务器返回给客户端的状态代码
    ---------------------------------------------------------------------------------------------
        19                                  传送的字节数
    ---------------------------------------------------------------------------------------------
        "-"                                 发送给服务器的请求头信息，“-”表示没有取得信息
    ---------------------------------------------------------------------------------------------
        "Mozilla/5.0 (X11; Linux x86_64;
	rv:10.0.12)Gecko/20130104 Firefox/10.0.12"  客户机使用的浏览器信息。
    ---------------------------------------------------------------------------------------------

8.4.2 日志滚动

   为了日志文件定期清理和删除，需要实现Apache日志滚动，可以通过重新使用新的日志文件、logrotate和rotatelogs来实现。

   1.重新使用新的日志文件实现日志滚动

   (1)重命名Apache日志文件

   -->mv /var/log/httpd/access_log /var/log/httpd/access_log.old

   -->mv /var/log/httpd/error_log /var/log/httpd/error_log.old


   (2)重新启动httpd守护进程

   -->apachectl graceful


   (3)查看新的日志文件

   -->ls /var/log/httpd/

      access_log  access_log-20150601  access_log.old  error_log  error_log-20150601  error_log.old

   从输出可知，重新产生了：access_log 和 error_log文件

   

   2.使用logrotate实现日志滚动

   logrotate是Linux系统下的日志滚动处理程序，通过该程序可以自动完成日志的压缩、备份和删除工作。logrotate

配合使用cron可以实现Apache日志的定期滚动处理。

   (1)/etc/logrotate.conf文件

   -->more /etc/logrotate.conf

 more /etc/logrotate.conf 
# see "man logrotate" for details
# rotate log files weekly
weekly  //--------------------------------#每周滚动一次日志文件

# keep 4 weeks worth of backlogs
rotate 4  //------------------------------#保存过去四周的日志文件

# create new (empty) log files after rotating old ones
create   //-------------------------------#滚动日志时，创建一个新的日志文件

# use date as a suffix of the rotated file
dateext

# uncomment this if you want your log files compressed
#compress

# RPM packages drop log rotation information into this directory
include /etc/logrotate.d   //-------------#处理/etc/logrotate.d目录下的文件

# no packages own wtmp and btmp -- we'll rotate them here
/var/log/wtmp {
    monthly
    create 0664 root utmp
	minsize 1M
    rotate 1
}

/var/log/btmp {
    missingok
    monthly
    create 0600 root utmp
    rotate 1
}



   (2)/etc/cron.daily/logrotate文件

   /etc/cron.daily/logrotate文件将每天执行一次，按/etc/logrotate.conf配置文件设置进行日志滚动。

   -->more /etc/cron.daily/logrotate 

#!/bin/sh

/usr/sbin/logrotate /etc/logrotate.conf >/dev/null 2>&1
EXITVALUE=$?
if [ $EXITVALUE != 0 ]; then
    /usr/bin/logger -t logrotate "ALERT exited abnormally with [$EXITVALUE]"
fi
exit 0


  (3)/etc/logrotate.d/httpd文件

  /etc/logrotate.d/httpd文件将会对/var/log/httpd目录下的所有日志文件进行处理

  -->more /etc/logrotate.d/httpd

/var/log/httpd/*log {
    missingok    ----------------#如果日志文件丢失，那么重新启用一个新的日志文件。
    notifempty   ----------------#如果日志文件是空的，那么不进行日志滚动
    sharedscripts  --------------#调用日志滚动通用函数
    delaycompress
    postrotate
        /sbin/service httpd reload > /dev/null 2>/dev/null || true  #在日志滚动之后重新加载httpd服务
    endscript
}
   
    3.使用rotatelogs实现日志滚动

    Apache提供了通过管道操作将日志记录发送给另外一个程序，让其他的应用程序来实现日志滚动。Apache自带了

rotatelogs程序来实现日志滚动，这样就可以无需再使用cron了。为了使rotatelogs程序能够运行，需要在

/etc/httpd/conf/httpd.conf中进行管理日志配置。

    (1)编辑/etc/httpd/conf/httpd.conf文件

     -->vim /etc/httpd/conf/httpd.conf,将文件中下面这样打开注释并修改：

CustomLog "|/usr/sbin/rotatelogs logs/access_log 86400" combined

    上面配置，使得日志滚动间隔为86400秒(1天)，滚动后的日志文件名为access_log.nnnnnnnnnn, nnnnnnnnnn是指1970年
 
1月1日0时0分0秒到日志文件滚动的时间差，单位为秒。

    (2)重新启动httpd服务

    -->service httpd restart

       Stopping httpd:                                            [  OK  ]
       Starting httpd:                                            [  OK  ]


8.5 Apache服务器高级配置

8.5.1 .htaccess文件

    使用.htaccess文件改变/etc/httpd/conf/httpd.conf文件中的设置，以此来设置对.htaccess文件所在目录的访问控制。

    -->vim /etc/httpd/conf/httpd.conf，启用以下内容：

AccessFileName .htaccess

<Files ~ "^\.ht">
    Order allow,deny
    Deny from all
    Satisfy All
</Files>

    内容将启用.htaccess文件


    1.AllowOverride指令组

    要控制在.htaccess文件中可以使用的指令组，需要在/etc/httpd/conf/httpd.conf文件所示的AllowOverride指令组

                                            AllowOverride指令使用的指令组
    ------------------------------------------------------------------------------------------------------------------------
       指令组                        指令                                                描述
    -------------------------------------------------------------------------------------------------------------------------
       AuthConfig     AuthGroupFile、AuthUserFile、AuthName、AuthType、Require    进行认证，授权和全设置
                      AuthDBMUserFile、AuthDBMGroupFile            
    -------------------------------------------------------------------------------------------------------------------------
       FileInfo       DefaultType、SetOutputFilter、ErrorDocument、SetHandlert    控制文件处理方式
                      ForceType、LanguagePriority、SetInputFilter  
    -------------------------------------------------------------------------------------------------------------------------  
       Indexes        IndexIgnore、IndexOptions、ReadmeName、AddDescription、     控制目录列表方式    
                      AddIcon、AddIconByEncoding、DirectoryIndex、FancyIndexing、
		      AddIconByType、DefaultIcon、HeaderName 
    -------------------------------------------------------------------------------------------------------------------------
       Limit          Allow、Deny、Order                                          进行目录访问控制
    -------------------------------------------------------------------------------------------------------------------------
       Options        Options、XBitHack                                           启用不能在主配置文件中使用的各种选项
    -------------------------------------------------------------------------------------------------------------------------
       All            全部的指令组                                                可以使用以上所有的指令。
    -------------------------------------------------------------------------------------------------------------------------
       None           禁止使用指令组                                              禁止处理.htaccess文件
    -------------------------------------------------------------------------------------------------------------------------


    2.  .htaccess文件配置实例

    (1)创建/var/www/html/pub目录，并在目录内创建文件

    -->mkdir /var/www/html/pub

    -->touch /var/www/html/pub/testfile

    (2)编辑/etc/httpd/conf/httpd.conf文件

    -->vim /etc/httpd/conf/httpd.conf #添加
    
<Directory "/var/www/html/pub">
    AllowOverride Options
</Directory>


<Directory "/var/www/html/pub">
    Options Indexes FollowSymLinks
    AllowOverride None
    AllowOverride Options
    Order allow,deny
    Allow from all
</Directory>




    (3)重新启动httpd服务

    -->service httpd restart

       Stopping httpd:                                            [  OK  ]
       Starting httpd:                                            [  OK  ]


    (4)创建/var/e/html/pub/.htaccess文件

    -->vim /var/www/html/pub/.htaccess

       Options -Indexes  #添加


    (5)测试.htaccess文件

    客户端浏览器输入：http://www.fulong.com/pub  显示如下：

    Forbidden

    You dont't have permission to access /pub/ on this server


    表示.htaccess已经生效，对pub目录的访问不生成文件列表(禁止显示Apache目录列表)


8.5.2 访问控制

    默认在/etc/httpd/conf/httpd.conf配置文件中，有以下这样含有Order参数的内容，这些设置将

控制指定目录的访问控制权限。


<Directory "/var/www/html">

    Options Indexes FollowSymLinks
    AllowOverride None
    Order allow,deny
    Allow from all

</Directory>

    1.访问控制配置指令

                             配置访问控制指令
    -------------------------------------------------------------------------------
       动作                                     描述
    -------------------------------------------------------------------------------
      Order                 指定执行允许访问规则和拒绝访问规则的先后顺序
    -------------------------------------------------------------------------------
      Deny                  定义拒绝访问列表
    -------------------------------------------------------------------------------
      Allow                 定义允许访问列表
    -------------------------------------------------------------------------------

    
    Order指令默认有以下两种方式：

    。Orer allow,deny:先执行允许访问规则，再执行拒绝访问规则。默认会拒绝所有没有明确被

允许的客户端。

    。Order deny,allow

    先执行拒绝访问规则，再执行允许访问规则。默认会允许所有没有明确被拒绝的客户端。

                           访问列表方式
    -------------------------------------------------------------------------------------------------
           控制形式                              描述
    ------------------------------------------------------------------------------------------------
           All                         表示所有客户机 
    ------------------------------------------------------------------------------------------------
          域名                         表示特定域内的所有客户机，如fulong.com
    ------------------------------------------------------------------------------------------------
          IP地址                       可以指定完整的IP地址或者部分IP地址的客户机，如192.168.0.204
    ------------------------------------------------------------------------------------------------
     网络地址/子网掩码                 指定网络地址或者子网地址，如192.168.0.0/255.255.255.0
     ------------------------------------------------------------------------------------------------
          CIDR规范                     指定网络地址或者子网地址，如192.168.0.0/24     
     ------------------------------------------------------------------------------------------------

    2.访问控制配置实例

    (1)允许所有客户端能访问Web网站，只有IP地址为192.168.0.204不能访问。

    -->vim /etc/httpd/conf/httpd.conf


<Directory "/var/www/html/">
    Options Indexes FollowSymLinks
    AllowOverride None
    Order allow,deny
    Allow from all
    Deny from 192.168.0.204  #添加此行
</Directory>

    。重启服务

    -->service httpd restart

Stopping httpd:                                            [  OK  ]
Starting httpd:                                            [  OK  ]


    。测试

    192.168.0.204主机测试：

    访问:http://192.168.0.203后显示后Apache主页

    其它主机访问显示为：This is www.fulong.com ﻿


    (2)拒绝所有客户端访问Web网站

    只有IP地址为192.168.0.204的客户端才能访问Web网站

    -->vim /etc/httpd/conf/httpd.conf

修改为如下：

<Directory "/var/www/html/">
    Options Indexes FollowSymLinks
    AllowOverride None
    Order deny,allow
    Deny from all
    Allow from 192.168.0.204  #允许204访问
</Directory>



    。重启服务

    -->service httpd restart

       Stopping httpd:                                            [  OK  ]
       Starting httpd:                                            [  OK  ]


    。测试

    192.168.0.204访问：http://192.168.0.203显示为：

    其它主机访问203显示为：Apache首页

8.5.3 用户认证和授权

    在Apache服务器中有基本认证和摘要认证两种认证类型。一般来说，使用摘要认证要比

基本认证更加安全，但是因为某些浏览器不支持使用摘要认证，所以在大多数情况下用户只能

使用基本认证。

    1.认证配置指令

    所有的认证配置指令即可以再主配置文件的Directory容器中出现，也可以在./htaccess文件中

出现。                 

                                  认证配置指令
    -------------------------------------------------------------------------------
        指令                      指令语法                          描述
    -------------------------------------------------------------------------------
       AuthName            AuthName领域名称             定义受保护领域的名称
    -------------------------------------------------------------------------------
       AuthType            AuthType Basic或者Digest     定义使用的认证方式
    -------------------------------------------------------------------------------
       AuthUserFile        AuthUserFile文件名           定义认证口令文件位置。
    -------------------------------------------------------------------------------
       AuthGroupFile       AuthGroupFile文件名          定义认证组文件位置
    -------------------------------------------------------------------------------

    2.授权

    使用认证配置指令配置认证以后，需要使用Require指令的用户和组进行授权。

                            Required指令的使用格式
    ---------------------------------------------------------------------------------
         指令语法格式                          描述
 
    ---------------------------------------------------------------------------------
       Require user 用户名[用户名]         给指定的一个或多个用户授权
    --------------------------------------------------------------------------------- 
       Require grop 组名[组名]             给指定的一个或多个组授权
    ----------------------------------------------------------------------------------
       Require valid-user                  给认证口令文件中的所有用户授权
    ---------------------------------------------------------------------------------  


    3.用户认证和授权配置实例

    为/var/www/html/test目录设置目录用户认证和授权

    (1)创建访问目录

    -->mkdir /var/www/html/test

    (2)创建认证口令文件并添加用户

    -->mkdir /var/www/html/test

    -->mkdir /var/www/passwd

    -->htpasswd -c /var/www/passwd/fulong zhangsan

New password:                  #输入2次zhangsan的认证口令。
Re-type new password: 
Adding password for user zhangsan


    注意：不需要在Linux系统中创建用户zhangsan

    
    。查看认证口令文件

    -->cat /var/www/passwd/fulong 

       zhangsan:Vxo7nwjwamTaw
 
    。为口令文件设置所有者

    -->chown apache.apache /var/www/passwd/fulong

    (3)编辑httpd.conf文件

    -->vim /etc/httpd/conf/httpd.conf


<Directory "/var/www/html/test">
   AllowOverride None    
   AuthType basic        
   AuthName "fulong"     
   AuthUserFile /var/www/passwd/fulong 
   require  valid-user          
</Directory>



     (4)重启httpd服务

     -->service httpd restart

        Stopping httpd:                                            [  OK  ]
        Starting httpd:                                            [  OK  ]


     (5)客户端测试

     192.168.0.204打开Mozilla Firefox浏览器输入：

     -->http://192.168.0.203/test

     用户名：zhangsan 

     密码:******


     即可显示

Index of /test
[ICO]	Name	Last modified	Size	Description
[DIR]	Parent Directory	 	- 	 
Apache/2.2.15 (CentOS) Server at 192.168.0.203 Port 80


8.5.4 虚拟目录

    Apache默认网站根目录是/var/www/html。  

                             虚拟目录和文件物理位置
    ---------------------------------------------------------------------------------
       物理位置                          别名                     URL
    ---------------------------------------------------------------------------------
      /var/www/html                  主目录(无)        http://www.fulong.com
    ----------------------------------------------------------------------------------
     /var/xuni                       xuni              http://www.fulong.com/xuni
    ----------------------------------------------------------------------------------

    1.创建虚拟目录

    -->mkdir /var/xuni/

    -->echo This is /var/xuni Directory > /var/xuni/index.html
     

    2.编辑/etc/httpd/conf/httpd.conf文件

    -->vim /etc/httpd/conf/httpd.conf

添加：

Alias /xuni "/var/xuni/"
<Directory "/var/xuni">
   AllowOverride None
   Options Indexes
   Order allow,deny
   Allow from all
</Directory>


    3.重启httpd服务

    -->service httpd restart

Stopping httpd:                                            [  OK  ]
Starting httpd:                                            [  OK  ]


    4.访问虚拟目录

    -->http://www.fulong.com/xuni

    或：

    -->http://192.168.0.203/xuni

    显示为：This is /var/xuni Directory 


8.5.5 WebDAV配置

    WebDAV(Web-based Distributed Authoring and Versioning, Web分布式授权和版本控制)是一种基于

HTTP 1.1协议的通信协议，允许客户端发布、锁定和管理Web网站上的资源。它扩展了HTTP 1.1协议，主要

有GET、PUT、POST、HEAD、OPTIONS、TRACE、DELETE、Mkcol、PropFind、PropPatch、Copy、Move、Lock

和Unlock。

    当Apache配置了对WebDAV的支持以后，用户就可以在支持WebDAV的客户端上对站点内容进程上传和维护。

    WebDAV允许在客户端进行以下操作：

    。具有正确权限的用户可以再WebDAV目录中复制和移动文件。

    。修改域某些资源相关联的属性，比如用户可写入并检索文件的属性信息。

    。锁定并解锁资源以便多个用户可以同时读取一个文件，但每次只允许一个人修改文件。

    。搜索WebDAV目录中的文件的内容和属性

    1.支持使用WebDAV功能

    在/etc/httpd/conf/httpd.conf文件中，默认有以下内容，表示支持使用WebDAV功能

    LoadModule dav_module modules/mod_dav.so
    LoadModule dav_fs_module modules/mod_dav_fs.so

    2.创建认证口令文件并添加用户

    -->htpasswd -c /var/www/html/htpasswd admin  #htpasswd默认是不存在的

New password:          #输入用户admin的认证口令
Re-type new password: 
Adding password for user admin


    3.编辑httpd.conf文件

    -->vim /etc/httpd/conf/httpd.conf

    修改为：

<Directory "/var/www/html/">
    Options Indexes FollowSymLinks
    AllowOverride None
    Order allow,deny
    Allow from all
    Dav On         -----------------#启用WebDAV服务
    AuthType Basic
    AuthName "admin"
    AuthUserFile /var/www/htpasswd
</Directory>

    4.重新启动httpd服务

    -->service httpd restart

Stopping httpd:                                            [  OK  ]
Starting httpd:                                            [  OK  ]

    5.设置所有者

    -->chown -R apache.apache /var/www/html/


    6.访问WebDAV

    Win7计算机

    -->右键"计算机"-->"映射网络驱动器"-->驱动器为:Z:  ------------------->完成

                                         文件夹:http://192.168.0.203  

                                         勾选：登录时重新连接

					       使用其他凭据连接
 
    -->再弹出的对话框中输入:admin   -->确定

                            ****** #密码

    即可打开:DavWWWRoot(\\192.168.0.203)(Z)，显示的为服务器上文件。

    htpasswd  index.html  phpldapadmin  pub  test  usage_squid


    同时打开计算机：有一项"网络位置"，显示名称为：DavWWWRoot(\\192.168.0.203)(Z)


8.5.6 符号链接

    通过在文档目录下使用符号链接使文档目录外的内容被访问。】

    通过为/usr/share/man目录创建符号链接，使得用户可以通过网址：http://www.fulong.com/man的方式

方式访问该目录内容。

    1.编辑/etc/httpd/conf/httpd.conf文件

    默认包含有以下内容，包含了符号链接的相关参数。

    -->vim /etc/httpd/conf/httpd.conf

<Directory />
    Options FollowSymLinks
    AllowOverride None
</Directory>


<Directory "/var/www/html/">
    Options Indexes FollowSymLinks
    AllowOverride None
    Order allow,deny
    Allow from all
</Directory>

    2.使用符号链接

    -->ln -s /usr/share/man /var/www/html/man

    3.重启服务httpd

    -->service httpd restart

Stopping httpd:                                            [  OK  ]
Starting httpd:                                            [  OK  ]

    4.客户端访问

    -->http://192.168.0.203/man/ 即可看到目录列表

Index of /man
 Name Last modified Size Description 

--------------------------------------------------------------------------------
 
 Parent Directory   -    
 cs/ 27-Jun-2014 04:24  -    
 de/ 27-Jun-2014 04:24  -    
 fr/ 27-Jun-2014 04:24  -    
 hu/ 27-Jun-2014 05:04  -    
 id/ 27-Jun-2014 04:24  -    
 it/ 27-Jun-2014 04:24  -    
 ja/ 12-Jun-2015 20:28  -    
 ko/ 27-Jun-2014 04:24  -    
 man0p/ 23-Sep-2011 19:50  -    
 man1/ 29-Jun-2015 13:12  -    
 man1p/ 23-Sep-2011 19:50  -    
 man1x/ 23-Sep-2011 19:50  -    
 man2/ 23-Sep-2011 19:50  -    
 man2x/ 23-Sep-2011 19:50  -    
 man3/ 24-Jun-2015 13:54  -    
 man3p/ 23-Sep-2011 19:50  -    
 man3x/ 23-Sep-2011 19:50  -    
 man4/ 25-May-2015 14:19  -    
 man4x/ 23-Sep-2011 19:50  -    
 man5/ 29-Jun-2015 13:12  -    
 man5x/ 23-Sep-2011 19:50  -    
 man6/ 23-Sep-2011 19:50  -    
 man6x/ 23-Sep-2011 19:50  -    
 man7/ 19-Jun-2015 19:08  -    
 man7x/ 23-Sep-2011 19:50  -    
 man8/ 24-Jun-2015 17:49  -    
 man8x/ 23-Sep-2011 19:50  -    
 man9/ 23-Sep-2011 19:50  -    
 man9x/ 23-Sep-2011 19:50  -    
 mann/ 23-Sep-2011 19:50  -    
 pl/ 27-Jun-2014 04:24  -    
 pt/ 27-Jun-2014 04:24  -    
 pt_BR/ 27-Jun-2014 04:24  -    
 ru/ 27-Jun-2014 04:24  -    
 sk/ 27-Jun-2014 04:24  -    
 sv/ 27-Jun-2014 04:24  -    
 tr/ 27-Jun-2014 04:24  -    
 zh_CN/ 27-Jun-2014 04:24  -    
 zh_TW/ 27-Jun-2014 04:24  -    

--------------------------------------------------------------------------------
 
Apache/2.2.15 (CentOS) Server at 192.168.0.203 Port 80
﻿


8.5.7 网页重定向

    在Apache服务器中，通过使用网页重定向可以使得用户在访问URL地址时，Apache服务器将自动

重定向到另外一个URL网址。

    在/etc/httpd/conf/httpd.conf文件中，定义网页重定向的语法如下：

    Redirect    错误响应代码    URL   重定向URL

                           错误响应代码
    --------------------------------------------------------------------------------
        代码                                      描述
    --------------------------------------------------------------------------------
         301                       被请求的URL已经永久的移动到新的URL
    --------------------------------------------------------------------------------
         302                       被请求的URL临时移动到新的URL
    --------------------------------------------------------------------------------
         303                       被访问的页面已经被替换
    --------------------------------------------------------------------------------
         410                       被访问的页面已经不存在，使用此代码时不应该使用重
	                           定向URL参数
    --------------------------------------------------------------------------------

    配置Apache服务，在用户访问http://www.fulong.com/foo网页时重定向到http://www.fulong.com/xuni网页

    1.编辑httpd.conf文件

    -->vim /etc/httpd/conf/httpd.conf

    Redirect 302 /foo http://www.fulong.com/xuni  #修改此行

    2.重启httpd服务

    -->service httpd restart

    Stopping httpd:                                            [  OK  ]
    Starting httpd:                                            [  OK  ]


    3.客户端访问

    Linux客户端访问：http://www.fulong.com/foo，即可跳转到：

    www.fulong.com/xuni。

8.5.8 配置每个用户的Web网站

    为用户zhangsan配置Web网站，使得可以通过网址http://www.fulong.com/~zhangsan的方式访问。

    1.编辑/etc/httpd/conf/httpd.conf文件

    -->vim /etc/httpd/conf/httpd.conf

<IfModule mod_userdir.c>
    UserDir disabled root    #禁止用户root创建自己的Web网站，而其它用户可以创建自己的Web网站。
    UserDir public_html      #设置每一位用户的Web网站目录。
</IfModule>

    设置每个用户Web网站目录的访问权限，在该文件内添加以下内容：

    打开以下注释：

<Directory /home/*/public_html>
    AllowOverride FileInfo AuthConfig Limit
    Options MultiViews Indexes SymLinksIfOwnerMatch IncludesNoExec
    <Limit GET POST OPTIONS>
        Order allow,deny
        Allow from all
    </Limit>
    <LimitExcept GET POST OPTIONS>
        Order deny,allow
        Deny from all
    </LimitExcept>
</Directory>

    2.重启httpd服务

    -->service httpd restart

      Stopping httpd:                                            [  OK  ]
      Starting httpd:                                            [  OK  ]


    3.创建用户zhangsan的Web网站

    -->su - zhangsan 

    -->mkdir public_html

    -->echo "Hello zhangsan" > /home/zhangsan/public_html/index.html

    -->chmod 711 /home/zhangsan/  #7111权限，只有用户所有者zhangsan才嫩对其读取和写入操作。


    4.访问用户zhangsan的Web网站

    -->http://www.fulong.com/~zhangsan 

    显示：Hello zhangsan


8.5.9 配置Apache代理服务

    Apache内部提供了HTTP代理功能，配置如下；

    -->vim /etc/httpd/conf/httpd.conf

    LoadModule proxy_module modules/mod_proxy.so  #默认有有代理有关模块



//设置Apace代理服务访问许可
<Proxy *>
    Order deny,allow
    Deny from all
    Allow from .example.com
</Proxy>


#ProxyVia On


//配置Apache代理服务缓存设置
<IfModule mod_disk_cache.c>
   CacheEnable disk /
   CacheRoot "/var/cache/mod_proxy"
</IfModule>

    在配置文件中可以添加和修改以下域代理和缓存相关的参数：

    。ProxyRequests ON:启用或者禁用Apache代理服务器功能，On表示启用，Off表示禁用，默认为Off

    。Proxyremote http://aaa.com  http://bbb.com:8000

     定义此代理服务器的远程代理。当用户请求与URL匹配时，就使用远程服务器作为远程代理服务器。其中远程服务器的格式是：

      protocol://hostname[:port],由于Apache只能代理HTTP服务，所以protocol的值为HTTP。这个例子中的远程服务器是http://bbb.com:8000

    。ProxyBlock word/hostname /domain 

      代理服务器过滤功能。在ProxyBlock关键字后面定义了一组词语、节点名称或域名。如果用户的HTTP请求中包含了这里的词语、节点名称、

      或域名，请求将被过滤掉。

    注意：ProxyBlock * 将屏蔽所有站点的连接。


    。ProxyPass  /home http://192.168.0.203 :将一个远端服务器映射到本地服务器的URL空间中。

    。ProxyPassReverse /home http://192.168.0.203:调整由反向代理服务器链中的代理请求的流向。

    。ProxyVia On: 控制位于代理服务器链中的代理请求的流向。

    。ProxyReceiveBufferSize 512: 设置来自代理服务器的出站请求的网络缓冲大小，必须超过512KB，0表示使用系统默认值。

    。CacheRoot "/var/cache/mod_porxy": 代理缓存的根目录。

    。CacheMaxExpire 24: 设置全部高速缓存文件到期的时间，单位为小时。

    。CacheDefaultExpire 1: 当文件的最后修改时间未知的时候，提供使高速缓存文件到期的时间，单位为小时。

    。CacheMaxFileSize 1000000:一个文件被存储在缓存中的最大值，单位为字节。

    。CacheMinFileSize 64:一个文件被存储在高速缓存中的最小值，单位为字节

    。CacheIgnoreCacheControl On: 忽略请求不嗯能够达到缓存内容到客户端。

    。CacheIngnoreHeaders Set-Cookie:在缓存中不存储指定的HTTP头

    。CacheLastModifiedFactor 0.1:如果没有定义文件过期时间，就按照后面的公式计算。 过期时间=最近一次修改的时间间隔*0.1

    。CacheDirLevels 5: 缓存中子目录的层数。

    。CacheDirLength 3: 代理缓存子目录名的字母数。

    。NoCache word/hostname/domain: 在NoCache关键字后面定义了一组词语、节点名称或域名。包含浙西词语、节点名称或域名的HTTP

      文件将不会被缓存。


    1. Apache服务器配置


    (1)编辑httpd.conf文件

    -->vim /etc/httpd/conf/httpd.conf

    修改如下：

<IfModule mod_proxy.c>
ProxyRequests On

<Proxy *>
    Order deny,allow
    Deny from all
    Allow from 192.168.0.0/24
</Proxy>

ProxyVia On

<IfModule mod_disk_cache.c>
   CacheEnable disk /
   CacheRoot "/var/cache/mod_proxy"
   CacheDirLevels 5
   CacheDirLength 3
   CacheMaxFileSize 1000000
   CacheMinFileSize 64
   CacheDefaultExpire 1
   CacheMaxExpire 24
   CacheIgnoreCacheControl On
   CacheIgnoreHeaders Set-Cookie
   ProxyReceiveBufferSize 5120
</IfModule>

    (2)重启httpd服务

    -->service httpd restart

       Stopping httpd:                                            [  OK  ]
       Starting httpd:                                            [  OK  ]


    2. Linux客户端配置

    打开Firefox浏览器-->首选项-->高级-->网络-->设置-->手动配置代理

    -->HTTP代理: 192.168.0.203  端口：80

       不使用代理：localhost,127.0.0.1

    。测试：访问:http://www.baidu.com,发现可以访问网络了。


8.6 检测Apache服务器状态和信息

   (做这一步是最好用新的httpd.conf修改以防止出错)

8.6.1 server-status

    在/etc/httpd/conf/httpd.conf文件中有以下几行内容，用来显示Apache服务器的状态报告：

    LoadModule status_module modules/mod_status.so

    加载模块即可把Web服务的一些信息统计出来，并生成网页。 

    1.编辑httpd.conf文件

     -->vim /etc/httpd/conf/httpd.conf 

     ExtendedStatus On

<Location /server-status>
    SetHandler server-status
    Order deny,allow
    Deny from all
    Allow from 192.168.0.204   #设置只允许204客户机能访问server-status
</Location>

    -->service httpd restart

       停止 httpd：                                               [确定]
       正在启动 httpd：                                           [确定]


    2.重新启动httpd服务

    -->service httpd restart

       停止 httpd：                                               [确定]
       正在启动 httpd：                                           [确定]

    3.访问server-status

    Linux客户端204,打开Mozilla Frefox浏览：

    -->http://192.168.0.203/server-status，即可查看状态信息：

Apache Server Status for 192.168.0.203
Server Version: Apache/2.2.15 (Unix) DAV/2 PHP/5.3.3   #服务器版本 
Server Built: Oct 16 2014 14:48:21       

--------------------------------------------------------------------------------

Current Time: Monday, 29-Jun-2015 18:46:40 CST   #当前时间
Restart Time: Monday, 29-Jun-2015 18:46:17 CST   #服务器最后一次启动时间。
Parent Server Generation: 0             
Server uptime: 23 seconds                 #服务器的正常运行时间
Total accesses: 0 - Total Traffic: 0 kB   #总访问量
CPU Usage: u0 s0 cu0 cs0                  #CPU负载
0 requests/sec - 0 B/second - 
1 requests currently being processed, 7 idle workers   #目前正在处理的1项要求中，有7个闲置的工作。


8.6.2 server-info

    在/etc/httpd/conf/httpd.conf文件中，默认有以下内容，用来生成Apache配置情况的Web页面，
    
显示Apache服务器的信息。

   LoadModule info_module modules/mod_info.so

   配置通过server-info查看Apache服务器信息。

   1.编辑/etc/httpd/conf/httpd.conf文件

   -->vim /etc/httpd/conf/httpd.conf

<Location /server-info>
    SetHandler server-info
    Order deny,allow
    Deny from all
    Allow from 192.168.0.204 #设置只允许204客户机能访问server-inf
</Location>


   2,重启Aapche服务

   -->service httpd restart
Stopping httpd:                                            [  OK  ]
Starting httpd:                                            [  OK  ]


   3.访问server-inf

   -->http://192.168.0.203/server-info


   Apache Server Information
Subpages:
Configuration Files, Server Settings, Module List, Active Hooks

--------------------------------------------------------------------------------

Sections:
Server Settings, Startup Hooks, Request Hooks

--------------------------------------------------------------------------------

Loaded Modules: 
mod_php5.c, mod_version.c, mod_cgi.c, mod_disk_cache.c, mod_suexec.c, mod_cache.c, mod_proxy_connect.c, mod_proxy_ajp.c, mod_proxy_http.c, mod_proxy_ftp.c, mod_proxy_balancer.c, mod_proxy.c, mod_rewrite.c, mod_substitute.c, mod_alias.c, mod_userdir.c, mod_speling.c, mod_actions.c, mod_dir.c, mod_negotiation.c, mod_vhost_alias.c, mod_dav_fs.c, mod_info.c, mod_autoindex.c, mod_status.c, mod_dav.c, mod_mime.c, mod_setenvif.c, mod_usertrack.c, mod_headers.c, mod_deflate.c, mod_expires.c, mod_mime_magic.c, mod_ext_filter.c, mod_env.c, mod_logio.c, mod_log_config.c, mod_include.c, mod_authnz_ldap.c, util_ldap.c, mod_authz_default.c, mod_authz_dbm.c, mod_authz_groupfile.c, mod_authz_owner.c, mod_authz_user.c, mod_authz_host.c, mod_authn_default.c, mod_authn_dbm.c, mod_authn_anon.c, mod_authn_alias.c, mod_authn_file.c, mod_auth_digest.c, mod_auth_basic.c, mod_so.c, http_core.c, prefork.c, core.c

--------------------------------------------------------------------------------

Server Settings
Server Version: Apache/2.2.15 (Unix) DAV/2 PHP/5.3.3
Server Built: Oct 16 2014 14:48:21
Server loaded APR Version: 1.3.9
Compiled with APR Version: 1.3.9
Server loaded APU Version: 1.3.9
Compiled with APU Version: 1.3.9
Module Magic Number: 20051115:25
Hostname/port: 192.168.0.203:80
Timeouts: connection: 60    keep-alive: 15
MPM Name: Prefork
MPM Information: Max Daemons: 256 Threaded: no Forked: yes
Server Architecture: 64-bit
Server Root: /etc/httpd
Config File: /etc/httpd/conf/httpd.conf
Server Built With:  -D APACHE_MPM_DIR="server/mpm/prefork"
 -D APR_HAS_SENDFILE
 -D APR_HAS_MMAP
 -D APR_HAVE_IPV6 (IPv4-mapped addresses enabled)
 -D APR_USE_SYSVSEM_SERIALIZE
 -D SINGLE_LISTEN_UNSERIALIZED_ACCEPT
 -D APR_HAS_OTHER_CHILD
 -D AP_HAVE_RELIABLE_PIPED_LOGS
 -D HTTPD_ROOT="/etc/httpd"
 -D SUEXEC_BIN="/usr/sbin/suexec"
 -D DEFAULT_ERRORLOG="logs/error_log"
 -D AP_TYPES_CONFIG_FILE="conf/mime.types"
 -D SERVER_CONFIG_FILE="conf/httpd.conf"


--------------------------------------------------------------------------------
.................................................................


8.7 Apache日志分析

8.7.1 webbalizer

    webbalizer是一款高效、免费的Web服务器日志分析程序。其记过以HTML文件格式进行保存，从而

可以很方便地通过Web服务器进行浏览。

   Webbalizer具有以下特性：

   。使用C语言编写，具有很高的运行效率。

   。支持一般日志文件格式。

   。支持命令行配置以及配置文件。

   。可以支持多种语言，也可以自己进行本地化工作。

   。支持UNIX、Linux、Windows、OS/2和MacOS等操作系统。


    1.安装webalizer软件包

    -->yum install libXpm gd webalizer -y

    2.配置webalizer 

    (1)移动目录

    -->mv /var/www/usage/ /var/www/html/webalizer

    (2)编辑/etc/webalizer.conf 文件

    -->vim /etc/webalizer.conf 
   
    OutputDir      /var/www/html/webalizer   ----------只修改此行，其它默认， #42行左右，修改为这个目录

    (3)生成统计分析

    -->webalizer

    如果想定时生成统计分析，额可以使用计划任务

    3.访问webalizer

    -->http://192.168.0.203/webalizer/

    即可看到图表界面。

    如果要查看详细信息-->点击"Month"下方的：月份
    
Summary by Month 
 
Month Daily Avg Monthly Totals 

Jun 2015 
May 2015 
 
Totals 4852 25 446 599 805 
 


8.7.2 awstats

    当需要了解Web网站的访问情况，比如每天有多少IP地址在访问、PV数量有多少、哪个URL访问量大、

用户使用最多的浏览器是哪个、通过什么方式知道这个网站以及有多少用户访问处错误等信息。通过掌握

这些信息来提高用户的体验，从而改善Web网站的质量。

    awstats是一款免费、简洁和功能强大的需要per环境支持的Web网站日志分析工具，带来先进到网络、流量、

 FTP或邮件服务器统计图。awstats作为CGI或从命令行在数个图形网页中显示日志中包含的所有可能信息。它利用

 一部分文件资料就能很快地处理大量日志文件，并能分析日志文件。

   下载地址:http://www.awstats.org

   1. 安装awstats软件

   -->tar -zxf awstats-7.2.tar.gz 

   -->mv awstats-7.2/ /usr/local/awstats


   2.配置awstats

   -->cd /usr/local/awstats/tools/

   -->perl awstats_configure.pl 


----- AWStats awstats_configure 1.0 (build 1.9) (c) Laurent Destailleur -----
This tool will help you to configure AWStats to analyze statistics for
one web server. You can try to use it to let it do all that is possible
in AWStats setup, however following the step by step manual setup
documentation (docs/index.html) is often a better idea. Above all if:
- You are not an administrator user,
- You want to analyze downloaded log files without web server,
- You want to analyze mail or ftp log files instead of web log files,
- You need to analyze load balanced servers log files,
- You want to 'understand' all possible ways to use AWStats...
Read the AWStats documentation (docs/index.html).

-----> Running OS detected: Linux, BSD or Unix

-----> Check for web server install ----------------------------------------#检测到操作熊

Enter full config file path of your Web server.
Example: /etc/httpd/httpd.conf
Example: /usr/local/apache2/conf/httpd.conf
Example: c:\Program files\apache group\apache\conf\httpd.conf
Config file path ('none' to skip web server setup):
> /etc/httpd/conf/httpd.conf   ---------------------------------------------#指定Apache服务器配置文件

-----> Check and complete web server config file '/etc/httpd/conf/httpd.conf'
  Add 'Alias /awstatsclasses "/usr/local/awstats/wwwroot/classes/"'
  Add 'Alias /awstatscss "/usr/local/awstats/wwwroot/css/"'
  Add 'Alias /awstatsicons "/usr/local/awstats/wwwroot/icon/"'
  Add 'ScriptAlias /awstats/ "/usr/local/awstats/wwwroot/cgi-bin/"'
  Add '<Directory>' directive
  AWStats directives added to Apache config file.

-----> Update model config file '/usr/local/awstats/wwwroot/cgi-bin/awstats.model.conf'
  File awstats.model.conf updated.

-----> Need to create a new config file ?
Do you want me to build a new AWStats config/profile
file (required if first install) [y/N] ? y----------------------------------#输入y创建一个新的awstats配置文件

-----> Define config file name to create
What is the name of your web site or profile analysis ?
Example: www.mysite.com
Example: demo
Your web site, virtual server or profile name:
> www.fulong.com    --------------------------------------------------------#输入Web网名

-----> Define config file path
In which directory do you plan to store your config file(s) ?
Default: /etc/awstats
Directory path to store config file(s) (Enter for default):
> /etc/awstats  -------------------------------------------------------------#指定生成awstats配置文件的存储路径，如果不指定默认为/etc/awstats


-----> Create config file '/etc/awstats/awstats.www.fulong.com.conf'
 Config file /etc/awstats/awstats.www.fulong.com.conf created.

-----> Restart Web server with '/sbin/service httpd restart'
Stopping httpd:                                            [  OK  ]
Starting httpd:                                            [  OK  ]  -------#由于更改了/etc/httpd/conf/httpd.conf文件，所以它会自动重新启动httpd服务来使配置文件生效。

-----> Add update process inside a scheduler
Sorry, configure.pl does not support automatic add to cron yet.
You can do it manually by adding the following command to your cron:
/usr/local/awstats/wwwroot/cgi-bin/awstats.pl -update -config=www.fulong.com   #更新www.fulong.com    将这样写入任务计划或者下面这行
Or if you have several config files and prefer having only one command:
/usr/local/awstats/tools/awstats_updateall.pl now                              #在有多个Web站点的情况下，更新所有的站点。  或者这行写入任务计划
Press ENTER to continue...   --------------------------------------------------------#按Enter


A SIMPLE config file has been created: /etc/awstats/awstats.www.fulong.com.conf
You should have a look inside to check and change manually main parameters.
You can then manually update your statistics for 'www.fulong.com' with command:
> perl awstats.pl -update -config=www.fulong.com
You can also read your statistics for 'www.fulong.com' with URL:
> http://localhost/awstats/awstats.pl?config=www.fulong.com

Press ENTER to finish...     --------------------------------------------------------#按Enter配置完毕



    执行完毕，在/etc/httpd/conf/httpd.conf文件末尾自动增加了以下内容


# Directives to allow use of AWStats as a CGI
#
Alias /awstatsclasses "/usr/local/awstats/wwwroot/classes/"
Alias /awstatscss "/usr/local/awstats/wwwroot/css/"
Alias /awstatsicons "/usr/local/awstats/wwwroot/icon/"
ScriptAlias /awstats/ "/usr/local/awstats/wwwroot/cgi-bin/"

#
# This is to permit URL access to scripts/files in AWStats directory.
#
<Directory "/usr/local/awstats/wwwroot">
    Options None
    AllowOverride None
    Order allow,deny
    Allow from all
</Directory>


    3.创建/var/lib/awstats目录

    -->mkdir  /var/lib/awstats

    4.设置/usr/local/awstats目录权限

    -->chmod -R 755 /usr/local/awstats/

    5.编辑/etc/awstats/awstats.www.fulong.com.conf文件

    -->vim /etc/awstats/awstats.www.fulong.com.conf 

    文件中出LogFile默认是这些参数的话，不用修改

LogFile="/var/log/httpd/access_log" --------#指定Apache服务器访问日志文件位置   修改路径
LogType=W                 ------------------#指定要分析的日志类型，W是指Web网站类型
LogFormat=1               ------------------#表示日志格式为combined
DirData="/var/lib/awstats"  ----------------#awstats数据目录

SiteDomain="www.fulong.com"  ---------------#指定Apache网站域名

HostAliases="fulong.com www.fulong.com 192.168.0.204"  3  #输入所有其他可能的域名、地址或虚拟主机
DirCgi="/awstats"                           #awstats的cgi-bin目录的相对或绝对的Web网址。

DirIcons="/awstatsicons"                    #awstats的图标目录的相对或绝对的网页的URL


    6.更新数据库

    -->cd /usr/local/awstats/wwwroot/cgi-bin/

    -->perl awstats.pl -config=www.fulong.com -update -output > index.html

    -->ls

    awdownloadcsv.pl  awredir.pl  awstats.model.conf  awstats.pl  index.html  lang  lib 

    -->ls /var/lib/awstats/

    awstats062015.www.fulong.com.txt


    7.访问awstats

    -->http://www.fulong.com/awstats/awstats.pl?config=www.fulong.com

     (会报错）

     192.168.0.204主机访问

     实际应该访问： http://www.fulong.com/awstats/awstats.pl


8.8 配置Apache虚拟主机

8.8.1 基于IP地址的虚拟主机

    如果在同一台服务器上使用多个IP地址来区分不同的Web网站，则必须为网卡绑定多个IP地址，并且给

每个网站指派唯一的IP地址。

    在公司内部的一台服务器上通过基于IP地址的虚拟主机方式配置两个Web网站，为公司网络内的计算机

提供Web服务，具体参数如下：

     (1)第一个Web网站

     。网站根目录：/var/www/html/www1.fulong.com

     。网站首页：index.html

     。网站IP地址：192.168.0.74

     (2)第二个Web网站

     。网站根目录：/var/www/html/www2.fulong.com

     。网站首页：index.html

     。网站IP地址：192.168.0.75


     1.创建Web网站目录

    -->mkdir /var/www/html/www1.fulong.com

    -->mkdir /var/www/html/www2.fulong.com


     2.创建Web网站首页

     -->echo This is www1.fulong.com > /var/www/html/www1.fulong.com/index.html

     -->echo This is www2.fulong.com > /var/www/html/www2.fulong.com/index.html

     3.设置IP地址

     -->ifconfig eth0:0 192.168.0.74 netmask 255.255.255.0

     -->ifconfig eth0:1 192.168.0.75 netmask 255.255.255.0

     。查看网卡设置的IP地址

     -->ifconfig

docker0   Link encap:Ethernet  HWaddr BA:79:24:26:7D:CB  
          inet addr:172.17.42.1  Bcast:0.0.0.0  Mask:255.255.0.0
          inet6 addr: fe80::b879:24ff:fe26:7dcb/64 Scope:Link
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
          RX packets:0 errors:0 dropped:0 overruns:0 frame:0
          TX packets:8628 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:0 
          RX bytes:0 (0.0 b)  TX bytes:2163860 (2.0 MiB)

eth0      Link encap:Ethernet  HWaddr 00:0C:29:EE:FA:05  
          inet addr:192.168.0.203  Bcast:192.168.0.255  Mask:255.255.255.0
          inet6 addr: fe80::20c:29ff:feee:fa05/64 Scope:Link
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
          RX packets:245966 errors:0 dropped:0 overruns:0 frame:0
          TX packets:78639 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:1000 
          RX bytes:34829735 (33.2 MiB)  TX bytes:12856948 (12.2 MiB)

eth0:0    Link encap:Ethernet  HWaddr 00:0C:29:EE:FA:05  
          inet addr:192.168.0.74  Bcast:192.168.0.255  Mask:255.255.255.0
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1

eth0:1    Link encap:Ethernet  HWaddr 00:0C:29:EE:FA:05  
          inet addr:192.168.0.75  Bcast:192.168.0.255  Mask:255.255.255.0
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1

eth1      Link encap:Ethernet  HWaddr 00:0C:29:EE:FA:0F  
          inet addr:192.168.1.100  Bcast:192.168.1.255  Mask:255.255.255.0
          inet6 addr: fe80::20c:29ff:feee:fa0f/64 Scope:Link
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
          RX packets:183241 errors:0 dropped:0 overruns:0 frame:0
          TX packets:10100 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:1000 
          RX bytes:18165096 (17.3 MiB)  TX bytes:2512540 (2.3 MiB)

lo        Link encap:Local Loopback  
          inet addr:127.0.0.1  Mask:255.0.0.0
          inet6 addr: ::1/128 Scope:Host
          UP LOOPBACK RUNNING  MTU:16436  Metric:1
          RX packets:1226 errors:0 dropped:0 overruns:0 frame:0
          TX packets:1226 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:0 
          RX bytes:110161 (107.5 KiB)  TX bytes:110161 (107.5 KiB)

     4.编辑/etc/httpd/conf/httpd.conf文件
     
     (最好用新的配置文件做)

     -->vim /etc/httpd/conf/httpd.conf

     在文件最后添加或修改如下：

<VirtualHost 192.168.0.74:80>
    ServerAdmin root@fulong.com
    DocumentRoot /var/www/html/www1.fulong.com
    ServerName www1.fulong.com
    ErrorLog logs/www1.fulong.com-error_log
    CustomLog logs/www1.fulong.com-access_log common
</VirtualHost>

<VirtualHost 192.168.0.75:80>
    ServerAdmin root@fulong.com
    DocumentRoot /var/www/html/www2.fulong.com
    ServerName www2.fulong.com
    ErrorLog logs/www2.fulong.com-error_log
    CustomLog logs/www2.fulong.com-access_log common
</VirtualHost>





<VirtualHost 192.168.0.74:80>
    ServerAdmin root@test.com
    DocumentRoot /var/www/html/www1.test.com
    ServerName www1.test.com
    ErrorLog logs/www1.test.com-error_log
    CustomLog logs/www1.test.com-access_log common
</VirtualHost>

<VirtualHost 192.168.0.75:80>
    ServerAdmin root@test.com
    DocumentRoot /var/www/html/www2.test.com
    ServerName www2.test.com
    ErrorLog logs/www2.test.com-error_log
    CustomLog logs/www2.testg.com-access_log common
</VirtualHost>







     5.重新启动httpd服务

     -->service httpd restart

       Stopping httpd:                                            [  OK  ]
       Starting httpd:                                            [  OK  ]

     6.访问虚拟主机

     -->http://192.168.0.74/ 显示为：This is ww1.fulong.com 
     
     -->http://192.168.0.75/ 显示为：This is ww2.fulong.com 
     
     
8.8.2 基于TCP端口号的虚拟主机

    在公司内部的一台服务器上通过基于端口号的虚拟主机方式配置两个Web网站，为公司网络内的
    
客户端 计算机提供Web服务，具体参数如下：

    (1)第一个Web网站

    。网站根目录：/var/www/html/www1.fulong.com

    。网站首页：index.html

    。网站端口号：80
    
    (2)第二个Web网站
    
    。网站根目录：/var/www/html/www2.fulong.com

    。网站首页：index.html

    。网站端口号：8080

    
    1.创建Web网站目录

    -->mkdir /var/www/html/www1.fulong.com

    -->mkdir /var/www/html/www2.fulong.com


     2.创建Web网站首页

     -->echo This is www1.fulong.com > /var/www/html/www1.fulong.com/index.html

     -->echo This is www2.fulong.com > /var/www/html/www2.fulong.com/index.html

     3.编辑/etc/httpd/conf/httpd.conf文件
     
     -->vim /etc/httpd/conf/httpd.conf

Listen 80
Listen 808  #添加

<VirtualHost 192.168.0.203:80>
    ServerAdmin root@fulong.com
    DocumentRoot /var/www/html/www1.fulong.com
    ServerName www1.fulong.com
    ErrorLog logs/www1.fulong.com-error_log
    CustomLog logs/www1.fulong.com-access_log common
</VirtualHost>

<VirtualHost 192.168.0.203:8080>
    ServerAdmin root@fulong.com
    DocumentRoot /var/www/html/www2.fulong.com
    ServerName www2.fulong.com
    ErrorLog logs/www2.fulong.com-error_log
    CustomLog logs/www2.fulong.com-access_log common
</VirtualHost>

    4.重新启动httpd服务

    -->service httpd restart

      Stopping httpd:                                            [  OK  ]
      Starting httpd:                                            [  OK  ]
  
   
    5.查看端口

    -->netstat -antu|grep 80

tcp        0      0 192.168.0.203:42885         124.40.53.34:80             ESTABLISHED 
tcp        1      1 192.168.0.203:42842         124.40.53.34:80             LAST_ACK    
tcp        0      0 :::8080                     :::*                        LISTEN      
tcp        0      0 :::80                       :::*                        LISTEN      
udp        0      0 fe80::b879:24ff:fe26:7dc:123 :::*                                    
udp        0      0 fe80::20c:29ff:feee:fa0f:123 :::*                                    
udp        0      0 fe80::20c:29ff:feee:fa05:123 :::*     


     6.访问虚拟主机

     -->http://192.168.0.203/      显示为：This is www1.fulong.com ﻿

     -->http://192.168.0.203:8080/ 显示为: This is www2.fulong.com 
     
 
8.8.3 基于域名的虚拟主机

    在公司内部的一台服务器上通过基于域名的虚拟主机方式配置两个Web网站，为公司网络内的客户端
    
计算机提供Web服务，具体参数如下：

    ﻿
   (1)第一个Web网站

    。网站根目录：/var/www/html/www1.fulong.com

    。网站首页：index.html

    。网站域名：www1.fulong.com
    
    (2)第二个Web网站
    
    。网站根目录：/var/www/html/www2.fulong.com

    。网站首页：index.html

    。网站域名: www2.fulong.com

    
    1.创建Web网站目录

    -->mkdir /var/www/html/www1.fulong.com

    -->mkdir /var/www/html/www2.fulong.com


     2.创建Web网站首页

     -->echo This is www1.fulong.com > /var/www/html/www1.fulong.com/index.html

     -->echo This is www2.fulong.com > /var/www/html/www2.fulong.com/index.html

     3.配置DNS服务器

     (1)编辑/var/named/fulong.com.hosts区域文件

     -->vim /var/named/fulong.com.hosts

     添加
www1                  IN        CNAME                    Master1.fulong.com.
www2                  IN        CNAME                    Master1.fulong.com.

   (MAster1为主机名)

    
    (2)重新启动named服务

    -->service named restart

Stopping named: .                                          [  OK  ]
Starting named:                                            [  OK  ]

    4.编辑httpd.conf文件

    -->vim /etc/httpd/conf/httpd.conf
    
    修改为：

NameVirtualHost *:80  #打开


<VirtualHost *:80>
    ServerAdmin root@fulong.com
    DocumentRoot /var/www/html/www1.fulong.com
    ServerName www1.fulong.com
    ErrorLog logs/www1.fulong.com-error_log
    CustomLog logs/www1.fulong.com-access_log common
</VirtualHost>

<VirtualHost *:80>
    ServerAdmin root@fulong.com
    DocumentRoot /var/www/html/www2.fulong.com
    ServerName www2.fulong.com
    ErrorLog logs/www2.fulong.com-error_log
    CustomLog logs/www2.fulong.com-access_log common
</VirtualHost>


    5.重新启动httpd服务

    -->service httpd restart


    6.访问虚拟机主机：

    -->http://www1.fulong.com，显示为：　This is www1.fulong.com

    -->http://www2.fulong.com，显示为：　This is www２.fulong.com


8.9 配置Apache动态网站

8.9.1 配置CGI动态网站

    CGI(Common GatewayINterface，通用网关接口）是Web即使中最中啊哟的技术之一。

CGI是外部应用程序（CGI程序）与Web服务器之间的接口标准，是在CGI程序和Web服务器之间

传递信息的规程。CGI规范允许Web服务器执行外部程序，并将它们的输出发送给Web浏览器，

CGI将Web的一组简单的静态超文本文件变成一个完整的新的交互式媒体。

    CGI在物理上是一段程序，运行在服务器上，提供同客户端HTML页面的接口。

    1.编辑/etc/httpd/conf/httpd.conf文件

    默认有如下内容，表示对CGI脚本执行的支持。

    修改如下：

LoadModule cgi_module modules/mod_cgi.so

ScriptAlias /cgi-bin/ "/var/www/cgi-bin/"

<Directory "/var/www/cgi-bin">
    AllowOverride None
    Options ExecCGI -Indexes
    Order allow,deny
    Allow from all
</Directory>

    
    2.重新启动httpd服务

    -->service httpd restart

       Stopping httpd:                                            [  OK  ]
       Starting httpd:                                            [  OK  ]


    3.创建/var/www/cgi-bin/HelloLinux.cgi文件

    -->vim /var/www/cgi-bin/HelloLinux.cgi

#!/usr/bin/perl

print "Content-type:text/plain\n\n";
print "Hello Linux\n";
~                       

    -->chmod 755 /var/www/cgi-bin/HelloLinux.cgi 


    4.客户端访问

    -->http://www.fulong.com/cgi-bin/HelloLinux.cgi

    或：

    -->http://192.168.0.203/cgi-bin/HelloLinux.cgi

    显示为：Hello Linux



8.9.2 配置PHP动态网站

    PHP(PHP:Hypertext Preprocessor,PHP:超文本预处理器)是一种通用开源脚本语言。

PHP语法吸收了C、Java和Perl的特点，使用广泛，主要适用于Web开发领域。PHP的后缀为

".php"。

    PHP具有以下特性：

    。PHP语法混合料C、Java、Perl以及PHP自创新的语法。

    。PHP比CGI和Perl更快速的执行动态网页。

    。PHP能实现所有的CGI功能

    。PHP支持几乎所有流行的数据库以及操作系统。

    。PHP可以用C、C++进行程序的扩展。


    1.安装php软件包

    -->rpm -q php

       php-5.3.3-40.el6_6.x86_64

    -->yum install php -y

    
    2.编辑php.conf文件

    -->vim /etc/httpd/conf.d/php.conf的默认内容

    不需要进行任何更改

#
# PHP is an HTML-embedded scripting language which attempts to make it
# easy for developers to write dynamically generated webpages.
#
<IfModule prefork.c>
  LoadModule php5_module modules/libphp5.so
</IfModule>
<IfModule worker.c>
  LoadModule php5_module modules/libphp5-zts.so
</IfModule>

#
# Cause the PHP interpreter to handle files with a .php extension.
#
AddHandler php5-script .php
AddType text/html .php

#
# Add index.php to the list of files that will be served as directory
# indexes.
#
DirectoryIndex index.php

#
# Uncomment the following line to allow PHP to pretty-print .phps
# files as PHP source code:
#
#AddType application/x-httpd-php-source .phps


    3.重新启动httpd服务

    -->service httpd restart

      Stopping httpd:                                            [  OK  ]
      Starting httpd:                                            [  OK  ]


    4.编写测试文件

    -->cd /var/www/html/

    -->vim info.php

<?php 
   phpinfo();
?>;


    5.客户端访问；

    http://192.168.0.203/info.php, 即可看到PHP信息页面


PHP Version 5.3.3 

System  Linux Master1 2.6.32-431.23.3.el6.x86_64 #1 SMP Thu Jul 31 17:20:51 UTC 2014 x86_64  
Build Date  Oct 30 2014 20:13:31  
Configure Command  './configure' '--build=x86_64-redhat-linux-gnu' '--host=x86_64-redhat-linux-gnu' '
--target=x86_64-redhat-linux-gnu' '--program-prefix=' '--prefix=/usr' '--exec-prefix=/usr' '--bindir=/usr/bin'
'--sbindir=/usr/sbin' '--sysconfdir=/etc' '--datadir=/usr/share' '--includedir=/usr/include' '--libdir=/usr/lib64'
'--libexecdir=/usr/libexec' '--localstatedir=/var' '--sharedstatedir=/var/lib' '--mandir=/usr/share/man' '--infodir=/usr/share/info'
'--cache-file=../config.cache' '--with-libdir=lib64' '--with-config-file-path=/etc' '--with-config-file-scan-dir=/etc/php.d'
'--disable-debug' '--with-pic' '--disable-rpath' '--without-pear' '--with-bz2' '--with-exec-dir=/usr/bin' '--with-freetype-dir=/usr'
'--with-png-dir=/usr' '--with-xpm-dir=/usr' '--enable-gd-native-ttf' '--without-gdbm' '--with-gettext' '--with-gmp' '--with-iconv' 
'--with-jpeg-dir=/usr' '--with-openssl' '--with-pcre-regex=/usr' '--with-zlib' '--with-layout=GNU' '--enable-exif' '--enable-ftp' 
'--enable-magic-quotes' '--enable-sockets' '--enable-sysvsem' '--enable-sysvshm' '--enable-sysvmsg' '--with-kerberos' 
'--enable-ucd-snmp-hack' '--enable-shmop' '--enable-calendar' '--without-sqlite' '--with-libxml-dir=/usr' '--enable-xml' 
'--with-system-tzdata' '--with-apxs2=/usr/sbin/apxs' '--without-mysql' '--without-gd' '--disable-dom' '--disable-dba'
'--without-unixODBC' '--disable-pdo' '--disable-xmlreader' '--disable-xmlwriter' '--without-sqlite3' '--disable-phar' 
'--disable-fileinfo' '--disable-json' '--without-pspell' '--disable-wddx' '--without-curl' '--disable-posix' '--disable-sysvmsg'
'--disable-sysvshm' '--disable-sysvsem'  



8.10 配置LAMP网站

8.10.1 LAMP简介

    LAMP是一组用来单间动态Web网站或者服务器的开源软件，该架构目前比较成熟、流行的Web框架。LAMP是指Linux操作系统、

Apache服务器、MySQL数据库和PHP。所有组成软件都是开源软件，很多流行的商业应用平台都采取这个架构。


8.10.2 搭建LAMP网站实例

    以实例的方式结合Discuz!程序搭建一个LAMP网站

    Discuz!是一套通用的身躯论坛软件系统，可以在不需要任何编程的基础上，通过简单的设置和安装，在互联网上搭建起一个

具备完善功能、负载能力强和高度定制的BBS论坛服务。

    1.安装perl相关软件包

    -->yum install perl-DBI  perl-DBD-MySQL -y

    2.安装php相关软件包

    -->yum install php-common php-cli php php-mysql php-pdo -y


    3.安装mysql相关包

    -->yum install mysql mysql-server mysql-test -y

    4.初始化MySQL数据库

    -->service mysqld start

    5.设置MySQL数据库管理员密码

    -->mysqladmin -u root password yhq845541

    。登录mysql

    -->mysql -u root -p

Enter password: 
Welcome to the MySQL monitor.  Commands end with ; or \g.
Your MySQL connection id is 8
Server version: 5.1.73-log Source distribution

Copyright (c) 2000, 2013, Oracle and/or its affiliates. All rights reserved.

Oracle is a registered trademark of Oracle Corporation and/or its
affiliates. Other names may be trademarks of their respective
owners.

Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.

mysql> 

    6.安装Discuz!软件

    下载地址：http://www.discuz.net

    下载的版本：Discuz_X3.2_SC_UTF8.zip  #下载UTF8编码的

    -->unzip Discuz_X3.2_SC_UTF8.zip   

    -->ls

    Discuz_X3.2_SC_GBK.zip  readme  upload  utility

   
    解压后的文件有3个目录

    -->mv upload /var/www/html/bbs

    -->chmod -R 777 /var/www/html/bbs


    7.配置Apache服务器

    (1)编辑/etc/httpd/conf/httpd.conf文件

    -->vim /etc/httpd/conf/httpd.conf

    修改主目录

    DocumentRoot "/var/www/html/bbs"

    
    (2)启动httpd服务

    -->service httpd restart

Stopping httpd:                                            [  OK  ]
Starting httpd:                                            [  OK  ]
   

    8.安装Discuz!社区论坛

    客户端浏览器打开：

    -->http://192.168.0.203/install/index.php

    -->我同意

    -->下一步  #1.检查安装环境

    -->"全新安装Discuz! X(喊UCenter Server)"-->下一步  #2.设置运行环境

    -->"安装数据库"-->填写数据库信息：

                      数据库服务器：localhost

		      数据库名:bbs

		      数据库用户名：root

		      数据库密码：yhq845541

		      数据库前缀：bbs_

		      系统信箱Email: admin@fulong.com


		    填写管理员信息：

		      管理员账号：admin

		      管理员密码：yhq845541

		      重复密码：yhq845541

		      管理员Email: admin@fulong.com

 
     -->下一步  #安装中

     -->马上去应用

     之后打开浏览器输入：http://192.168.0.203，即可打开Discuz社区动力。 

     登录：用户名：admin

           密码：yhq845541


     即可登录。


8.1.1 HTTPS网站

    HTTPS (Hypertext Transfer Protocol over Secure Socket Layer,基于SSL的超文本传输协议)

用于对数据进行加密和解密操作，用以保证在Internet上数据传输的安全，可以确保数据在网络传输

过程中不会被截取和窃听。HTTPS实际上应用浏览SSL组委HTTP应用层的子层。HTTPS使用端口443，而

不像HTTP那样使用该端口80来和TCP/IP进行通信。HTTPS和SSL支持使用X.509数字认证，如果需要的话’

用户可以确认发送者是谁。

    HTTPS的主要作用可以分为两种：

    。一种是建立一个信息安全通道，来保证数据传输的安全。

    。另一种是确认网站的真实性，凡是使用了HTTPS的网站，都可以通过点击地址栏的锁头标识来

查看网站认证之后的真实信息，也可以通过CA机构颁发的安全签章来查询。

    SSL(Secure Sockets Layer,安全套接层)是为网络通信提供安全和数据完整性的一种安全协议，在传输层

对网络连接进行加密。SSL使用40位关键字作为RC4流加密算法，这对于商业信息的加密是合适的，已被广泛地

应用于Web浏览器与Web服务器之间的身份认证和加密数据传输。

   SSL协议位于TCP/IP协议与各层应用层协议之间，为数据通信提供安全支持。SSL协议可分为两层：

   。SSL记录协议(SSL Record Protocol)建立在可靠的传输协议(比如TCP)之上，为高层协议提供数据封装、压缩

和加密等基本功能的支持；

   。SSL捂手协议(SSL Handshake Protocol)建立在SSL记录协议之上，用于在实际的数据传输开始前，通信双方进行

身份认证、协商加密算法和交换加密密钥等。



8.11.2 /etc/httpd/conf.d/ssl.conf文件详解

    SSL的主配置文件是/etc/httpd/conf.d/ssl.conf文件，该文件是由mod_ssl软件包生成的。

    -->more /etc/httpd/conf.d/ssl.conf

#
# This is the Apache server configuration file providing SSL support.
# It contains the configuration directives to instruct the server how to
# serve pages over an https connection. For detailing information about these 
# directives see <URL:http://httpd.apache.org/docs/2.2/mod/mod_ssl.html>
# 
# Do NOT simply read the instructions in here without understanding
# what they do.  They're here only as hints or reminders.  If you are unsure
# consult the online docs. You have been warned.  
#


//------------------------------------------------------------#第一部分：参数设置
LoadModule ssl_module modules/mod_ssl.so

#
# When we also provide SSL we have to listen to the 
# the HTTPS port in addition.
#
Listen 443



//------------------------------------------------------------#第二部分：SSL全局环境
##
##  SSL Global Context
##
##  All SSL configuration in this context applies both to
##  the main server and all SSL-enabled virtual hosts.
##

#   Pass Phrase Dialog:
#   Configure the pass phrase gathering process.
#   The filtering dialog program (`builtin' is a internal
#   terminal dialog) has to provide the pass phrase on stdout.
SSLPassPhraseDialog  builtin

#   Inter-Process Session Cache:
#   Configure the SSL Session Cache: First the mechanism 
#   to use and second the expiring timeout (in seconds).
SSLSessionCache         shmcb:/var/cache/mod_ssl/scache(512000)
SSLSessionCacheTimeout  300

#   Semaphore:
#   Configure the path to the mutual exclusion semaphore the
#   SSL engine uses internally for inter-process synchronization. 
SSLMutex default

#   Pseudo Random Number Generator (PRNG):
#   Configure one or more sources to seed the PRNG of the 
#   SSL library. The seed data should be of good random quality.
#   WARNING! On some platforms /dev/random blocks if not enough entropy
#   is available. This means you then cannot use the /dev/random device
#   because it would lead to very long connection times (as long as
#   it requires to make more entropy available). But usually those
#   platforms additionally provide a /dev/urandom device which doesn't
#   block. So, if available, use this one instead. Read the mod_ssl User
#   Manual for more details.
SSLRandomSeed startup file:/dev/urandom  256
SSLRandomSeed connect builtin
#SSLRandomSeed startup file:/dev/random  512
#SSLRandomSeed connect file:/dev/random  512
#SSLRandomSeed connect file:/dev/urandom 512

#
# Use "SSLCryptoDevice" to enable any supported hardware
# accelerators. Use "openssl engine -v" to list supported
# engine names.  NOTE: If you enable an accelerator and the
# server does not start, consult the error logs and ensure
# your accelerator is functioning properly. 
#
SSLCryptoDevice builtin
#SSLCryptoDevice ubsec

##
## SSL Virtual Host Context
##

//-----------------------------------------------------------------------------#第三部分：虚拟主机环境
<VirtualHost _default_:443>

# General setup for the virtual host, inherited from global configuration
#DocumentRoot "/var/www/html"
#ServerName www.example.com:443

# Use separate log files for the SSL virtual host; note that LogLevel
# is not inherited from httpd.conf.
ErrorLog logs/ssl_error_log
TransferLog logs/ssl_access_log
LogLevel warn

#   SSL Engine Switch:
#   Enable/Disable SSL for this virtual host.
SSLEngine on

#   SSL Protocol support:
# List the enable protocol levels with which clients will be able to
# connect.  Disable SSLv2 access by default:

//---------------------------------------------------------------------#SSL协议支持
SSLProtocol all -SSLv2
#   SSL Cipher Suite:
# List the ciphers that the client is permitted to negotiate.
# See the mod_ssl documentation for a complete list.

//---------------------------------------------------------------------#SSL加密套件
SSLCipherSuite ALL:!ADH:!EXPORT:!SSLv2:RC4+RSA:+HIGH:+MEDIUM:+LOW

#   Server Certificate:
# Point SSLCertificateFile at a PEM encoded certificate.  If
# the certificate is encrypted, then you will be prompted for a
# pass phrase.  Note that a kill -HUP will prompt again.  A new
# certificate can be generated using the genkey(1) command.

//---------------------------------------------------------------------#服务器证书
SSLCertificateFile /etc/pki/tls/certs/localhost.crt

#   Server Private Key:
#   If the key is not combined with the certificate, use this
#   directive to point at the key file.  Keep in mind that if
#   you've both a RSA and a DSA private key you can configure
#   both in parallel (to also allow the use of DSA ciphers, etc.)

SSLCertificateKeyFile /etc/pki/tls/private/localhost.key ---------------#服务器私钥

#   Server Certificate Chain:
#   Point SSLCertificateChainFile at a file containing the
#   concatenation of PEM encoded CA certificates which form the
#   certificate chain for the server certificate. Alternatively
#   the referenced file can be the same as SSLCertificateFile
#   when the CA certificates are directly appended to the server
#   certificate for convinience.

#SSLCertificateChainFile /etc/pki/tls/certs/server-chain.crt-------------#服务器证书链

#   Certificate Authority (CA):
#   Set the CA certificate verification path where to find CA
#   certificates for client authentication or alternatively one
#   huge file containing all of them (file must be PEM encoded)
#SSLCACertificateFile /etc/pki/tls/certs/ca-bundle.crt--------------------#证书颁发结构

#   Client Authentication (Type):
#   Client certificate verification type and depth.  Types are
#   none, optional, require and optional_no_ca.  Depth is a
#   number which specifies how deeply to verify the certificate
#   issuer chain before deciding the certificate is not valid.
#SSLVerifyClient require  -------------------------------------------------#客户端身份验证
#SSLVerifyDepth  10

#   Access Control:
#   With SSLRequire you can do per-directory access control based
#   on arbitrary complex boolean expressions containing server
#   variable checks and other lookup directives.  The syntax is a
#   mixture between C and Perl.  See the mod_ssl documentation
#   for more details.

#<Location /> //-----------------------------------------------------------#访问控制
#SSLRequire (    %{SSL_CIPHER} !~ m/^(EXP|NULL)/ \
#            and %{SSL_CLIENT_S_DN_O} eq "Snake Oil, Ltd." \
#            and %{SSL_CLIENT_S_DN_OU} in {"Staff", "CA", "Dev"} \
#            and %{TIME_WDAY} >= 1 and %{TIME_WDAY} <= 5 \
#            and %{TIME_HOUR} >= 8 and %{TIME_HOUR} <= 20       ) \
#           or %{REMOTE_ADDR} =~ m/^192\.76\.162\.[0-9]+$/
#</Location>


#   SSL Engine Options:
#   Set various options for the SSL engine.
#   o FakeBasicAuth:
#     Translate the client X.509 into a Basic Authorisation.  This means that
#     the standard Auth/DBMAuth methods can be used for access control.  The
#     user name is the `one line' version of the client's X.509 certificate.
#     Note that no password is obtained from the user. Every entry in the user
#     file needs this password: `xxj31ZMTZzkVA'.
#   o ExportCertData:
#     This exports two additional environment variables: SSL_CLIENT_CERT and
#     SSL_SERVER_CERT. These contain the PEM-encoded certificates of the
#     server (always existing) and the client (only existing when client
#     authentication is used). This can be used to import the certificates
#     into CGI scripts.
#   o StdEnvVars:
#     This exports the standard SSL/TLS related `SSL_*' environment variables.
#     Per default this exportation is switched off for performance reasons,
#     because the extraction step is an expensive operation and is usually
#     useless for serving static content. So one usually enables the
#     exportation for CGI and SSI requests only.
#   o StrictRequire:
#     This denies access when "SSLRequireSSL" or "SSLRequire" applied even
#     under a "Satisfy any" situation, i.e. when it applies access is denied
#     and no other module can change it.
#   o OptRenegotiate:
#     This enables optimized SSL connection renegotiation handling when SSL
#     directives are used in per-directory context. 
#SSLOptions +FakeBasicAuth +ExportCertData +StrictRequire  ---------------------#SSL引擎选项
<Files ~ "\.(cgi|shtml|phtml|php3?)$">
    SSLOptions +StdEnvVars
</Files>
<Directory "/var/www/cgi-bin">
    SSLOptions +StdEnvVars
</Directory>

#   SSL Protocol Adjustments:
#   The safe and default but still SSL/TLS standard compliant shutdown
#   approach is that mod_ssl sends the close notify alert but doesn't wait for
#   the close notify alert from client. When you need a different shutdown
#   approach you can use one of the following variables:
#   o ssl-unclean-shutdown:
#     This forces an unclean shutdown when the connection is closed, i.e. no
#     SSL close notify alert is send or allowed to received.  This violates
#     the SSL/TLS standard but is needed for some brain-dead browsers. Use
#     this when you receive I/O errors because of the standard approach where
#     mod_ssl sends the close notify alert.
#   o ssl-accurate-shutdown:
#     This forces an accurate shutdown when the connection is closed, i.e. a
#     SSL close notify alert is send and mod_ssl waits for the close notify
#     alert of the client. This is 100% SSL/TLS standard compliant, but in
#     practice often causes hanging connections with brain-dead browsers. Use
#     this only for browsers where you know that their SSL implementation
#     works correctly. 
#   Notice: Most problems of broken clients are also related to the HTTP
#   keep-alive facility, so you usually additionally want to disable
#   keep-alive for those clients, too. Use variable "nokeepalive" for this.
#   Similarly, one has to force some clients to use HTTP/1.0 to workaround
#   their broken HTTP/1.1 implementation. Use variables "downgrade-1.0" and
#   "force-response-1.0" for this.
SetEnvIf User-Agent ".*MSIE.*" \   ---------------------------------------------#SSL协议调整
         nokeepalive ssl-unclean-shutdown \
         downgrade-1.0 force-response-1.0


#   Per-Server Logging:
#   The home of a custom SSL log file. Use this when you want a
#   compact non-error SSL logfile on a virtual host basis.
CustomLog logs/ssl_request_log \   ---------------------------------------------#每个服务器日志
          "%t %h %{SSL_PROTOCOL}x %{SSL_CIPHER}x \"%r\" %b"

</VirtualHost>                            


8.11.3 配置HTTPS网站

    1.安装软件包

    -->rpm -q mod_ssl

    -->rpm -q openssl

    。安装

    -->yum install mod_ssl openssl -y

   
    2.生成密钥

    -->mkdir  /etc/httpd/conf/ssl.key

    -->openssl genrsa 1024 > /etc/httpd/conf/ssl.key/server.key  #书中的会报错：

       -bash: 1024: Bad file descriptor

    所以采用下面方法安装:

    -->openssl genrsa -des3 -out /etc/httpd/conf/ssl.key/server.key  2048
Generating RSA private key, 2048 bit long modulus
..............+++
...........................................................................+++
e is 65537 (0x10001)
Enter pass phrase for /etc/httpd/conf/ssl.key/server.key:   ----------------------#输入2次证书密码
Verifying - Enter pass phrase for /etc/httpd/conf/ssl.key/server.key:
[root@Master1 ~]# 
[root@Master1 ~]# 
[root@Master1 ~]# ls /etc/httpd/conf/ssl.key/
server.key

    。查看证书文件内容：

    -->cat /etc/httpd/conf/ssl.key/server.key 

-----BEGIN RSA PRIVATE KEY-----
Proc-Type: 4,ENCRYPTED
DEK-Info: DES-EDE3-CBC,C0157D1962D38B00

13FZVC4340oEb86CEinLgmZzKmGV5Uk98Y4P5UYvoG5T/sDTpmQzjfenJcLfiB1e
v4xGGqzsS4ohmGVoN2kZeY5F2lnmnDqG6vGUOTeXA8LeNSPvW/LW4DbVN4P0JGcI
1ZqbJTG8g4VmBz7jZLMmZ7RxG6WagfzNw3PqHIoCFFSSYp0AY/BkqZqNk29p+968
fp3+OZomUcY0WQZ5yIztghHtZ3VD1CY0f4reB1TCAAXgl4NJEDSQL5cOQ0nOr/cj
gR9QGPO0cjGpAtc/VW2HAd5NpepFdzEjHfqvwLFE2NSVSf02DyK1r8geipifonzc
g+LHB1C1sRmWehNQefjrlIcxMeX03L66+vKezudcDkMt0CvTRVf7v83umP4N26Jk
t07uV0ElAlbDso/50f/V2z/wDtf7bZtUIq2a1hweobxRrjovdKlgsehl0VTIk/YE
b3USBAjgdc9pOpdabEZ0kjcOvg47ogTnZvQUB2TDk7Z1Ulbn64RwKj8L7vui1AoG
ya410W+HcFz0MawXkhQA36in+qFR60yY6G9FNB5hUeRH37j+gKEySABgUWDqqeA4
urH3qYSVBYp8x/brXZH3oKefkpkUJegNYkvkUkts08LBK3gzkiMMFhZyKDfqTNoF
lZOjUrXKdCeserR5omtB3tyy3mgtRpp2ndNz3QIdrl+21p79lE0QP+Iptilmm50W
tGZVDeIW3DhfeuBy1jHluUpDY3yRcvtf/HUDOTRSWPpuj7gvMQU2skRAUL1kCzeF
Eit9xtTSBzzB8Iz1PALyBcKVl2sJPGVAmaXc9Fwo6jcc+Pq09AkfPjiXxzrmCDbR
8BA/o6ViqrMHF5d9Bl9wxVhhWQsiHhUPE2KA1C/kDxGh9vff3PZBpGUhXqw+f4fY
muYmL1wCjkaWFqfhvqVfuBERJBeHrNoESYkmLXwzxNveZDVgtWpOSnB9Llm6iz/5
M2yCzgs7POYY9wQ+a2sMsL2uUrzK43Asqvi8+SYL3y9WW+QnLjrLpN8wryl9Vn+y
WVFt/xrczQ7Td0ipCCSTAETC2YTuWqx82Gob1I/NJujT9/cpNVmKYxuxpjw19wZf
C70LAnmBpx7rq+VEUrf+WmgFw0/+pHptwlJQcxbuQmvazRq8/O3EAsBbzqyveJLU
xCdQ+SbDfLkRM1rt8ZK0TnnIsIzUeWsvcvH7LhzMz9LygGyn3mEY4/9FjyxuPjsG
yylWe0pkyJJsuuo2Isx2hnN6rVxUP6SnBxdILtUeqaS5M7NPyrTqvYehygAohMMS
FEnMXE26e/p0aZ1a/Ng1kxggMpqGL5UoPUL+vH4LMyAoW9Rbl+O7uNS9A8+odY3H
fvukm4LwSerSgmgiI/KTLZb5cR942LLiSx4EfgnZ1f+gN0tuoUAuEi8BM5bil0vi
qzutoB6aB4FD5l2Fj41gaWR2MAsb4HC/uhrtjtMP/xXiQEohGlDWFLmXwatSFeLu
b0q3Ms+AB2QoMkw/cF1q+O7vsxY7jfyMKOb/t2Uilaemh8gfCn8fsMJ8wt773xHK
BfNGfQjbmSZKSEYT0xlN1vyvWNhIpJW9rUZDr1u8aZoMKVkPL36ODA==
-----END RSA PRIVATE KEY-----

   。为证书文件设置权限：

   -->chmod go-rwx /etc/httpd/conf/ssl.key/server.key 


   3.重新启动httpd服务

   -->service httpd restart

      Stopping httpd:                                            [  OK  ]
      Starting httpd:                                            [  OK  ]


    4.查看端口号，443是HTTPS协议锁使用的端口号：

    -->netstat -antu|grep 443

      tcp        0      0 :::443                      :::*                        LISTEN      


    5.访问HTTPS网站

    -->https://192.168.0.203























